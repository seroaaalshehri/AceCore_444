{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/tokenizer/keywords.js"],"sourcesContent":["export var ContextualKeyword; (function (ContextualKeyword) {\n  const NONE = 0; ContextualKeyword[ContextualKeyword[\"NONE\"] = NONE] = \"NONE\";\n  const _abstract = NONE + 1; ContextualKeyword[ContextualKeyword[\"_abstract\"] = _abstract] = \"_abstract\";\n  const _accessor = _abstract + 1; ContextualKeyword[ContextualKeyword[\"_accessor\"] = _accessor] = \"_accessor\";\n  const _as = _accessor + 1; ContextualKeyword[ContextualKeyword[\"_as\"] = _as] = \"_as\";\n  const _assert = _as + 1; ContextualKeyword[ContextualKeyword[\"_assert\"] = _assert] = \"_assert\";\n  const _asserts = _assert + 1; ContextualKeyword[ContextualKeyword[\"_asserts\"] = _asserts] = \"_asserts\";\n  const _async = _asserts + 1; ContextualKeyword[ContextualKeyword[\"_async\"] = _async] = \"_async\";\n  const _await = _async + 1; ContextualKeyword[ContextualKeyword[\"_await\"] = _await] = \"_await\";\n  const _checks = _await + 1; ContextualKeyword[ContextualKeyword[\"_checks\"] = _checks] = \"_checks\";\n  const _constructor = _checks + 1; ContextualKeyword[ContextualKeyword[\"_constructor\"] = _constructor] = \"_constructor\";\n  const _declare = _constructor + 1; ContextualKeyword[ContextualKeyword[\"_declare\"] = _declare] = \"_declare\";\n  const _enum = _declare + 1; ContextualKeyword[ContextualKeyword[\"_enum\"] = _enum] = \"_enum\";\n  const _exports = _enum + 1; ContextualKeyword[ContextualKeyword[\"_exports\"] = _exports] = \"_exports\";\n  const _from = _exports + 1; ContextualKeyword[ContextualKeyword[\"_from\"] = _from] = \"_from\";\n  const _get = _from + 1; ContextualKeyword[ContextualKeyword[\"_get\"] = _get] = \"_get\";\n  const _global = _get + 1; ContextualKeyword[ContextualKeyword[\"_global\"] = _global] = \"_global\";\n  const _implements = _global + 1; ContextualKeyword[ContextualKeyword[\"_implements\"] = _implements] = \"_implements\";\n  const _infer = _implements + 1; ContextualKeyword[ContextualKeyword[\"_infer\"] = _infer] = \"_infer\";\n  const _interface = _infer + 1; ContextualKeyword[ContextualKeyword[\"_interface\"] = _interface] = \"_interface\";\n  const _is = _interface + 1; ContextualKeyword[ContextualKeyword[\"_is\"] = _is] = \"_is\";\n  const _keyof = _is + 1; ContextualKeyword[ContextualKeyword[\"_keyof\"] = _keyof] = \"_keyof\";\n  const _mixins = _keyof + 1; ContextualKeyword[ContextualKeyword[\"_mixins\"] = _mixins] = \"_mixins\";\n  const _module = _mixins + 1; ContextualKeyword[ContextualKeyword[\"_module\"] = _module] = \"_module\";\n  const _namespace = _module + 1; ContextualKeyword[ContextualKeyword[\"_namespace\"] = _namespace] = \"_namespace\";\n  const _of = _namespace + 1; ContextualKeyword[ContextualKeyword[\"_of\"] = _of] = \"_of\";\n  const _opaque = _of + 1; ContextualKeyword[ContextualKeyword[\"_opaque\"] = _opaque] = \"_opaque\";\n  const _out = _opaque + 1; ContextualKeyword[ContextualKeyword[\"_out\"] = _out] = \"_out\";\n  const _override = _out + 1; ContextualKeyword[ContextualKeyword[\"_override\"] = _override] = \"_override\";\n  const _private = _override + 1; ContextualKeyword[ContextualKeyword[\"_private\"] = _private] = \"_private\";\n  const _protected = _private + 1; ContextualKeyword[ContextualKeyword[\"_protected\"] = _protected] = \"_protected\";\n  const _proto = _protected + 1; ContextualKeyword[ContextualKeyword[\"_proto\"] = _proto] = \"_proto\";\n  const _public = _proto + 1; ContextualKeyword[ContextualKeyword[\"_public\"] = _public] = \"_public\";\n  const _readonly = _public + 1; ContextualKeyword[ContextualKeyword[\"_readonly\"] = _readonly] = \"_readonly\";\n  const _require = _readonly + 1; ContextualKeyword[ContextualKeyword[\"_require\"] = _require] = \"_require\";\n  const _satisfies = _require + 1; ContextualKeyword[ContextualKeyword[\"_satisfies\"] = _satisfies] = \"_satisfies\";\n  const _set = _satisfies + 1; ContextualKeyword[ContextualKeyword[\"_set\"] = _set] = \"_set\";\n  const _static = _set + 1; ContextualKeyword[ContextualKeyword[\"_static\"] = _static] = \"_static\";\n  const _symbol = _static + 1; ContextualKeyword[ContextualKeyword[\"_symbol\"] = _symbol] = \"_symbol\";\n  const _type = _symbol + 1; ContextualKeyword[ContextualKeyword[\"_type\"] = _type] = \"_type\";\n  const _unique = _type + 1; ContextualKeyword[ContextualKeyword[\"_unique\"] = _unique] = \"_unique\";\n  const _using = _unique + 1; ContextualKeyword[ContextualKeyword[\"_using\"] = _using] = \"_using\";\n})(ContextualKeyword || (ContextualKeyword = {}));\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/tokenizer/types.js"],"sourcesContent":["// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\n/* istanbul ignore file */\n/**\n * Enum of all token types, with bit fields to signify meaningful properties.\n */\nexport var TokenType; (function (TokenType) {\n  // Precedence 0 means not an operator; otherwise it is a positive number up to 12.\n  const PRECEDENCE_MASK = 0xf; TokenType[TokenType[\"PRECEDENCE_MASK\"] = PRECEDENCE_MASK] = \"PRECEDENCE_MASK\";\n  const IS_KEYWORD = 1 << 4; TokenType[TokenType[\"IS_KEYWORD\"] = IS_KEYWORD] = \"IS_KEYWORD\";\n  const IS_ASSIGN = 1 << 5; TokenType[TokenType[\"IS_ASSIGN\"] = IS_ASSIGN] = \"IS_ASSIGN\";\n  const IS_RIGHT_ASSOCIATIVE = 1 << 6; TokenType[TokenType[\"IS_RIGHT_ASSOCIATIVE\"] = IS_RIGHT_ASSOCIATIVE] = \"IS_RIGHT_ASSOCIATIVE\";\n  const IS_PREFIX = 1 << 7; TokenType[TokenType[\"IS_PREFIX\"] = IS_PREFIX] = \"IS_PREFIX\";\n  const IS_POSTFIX = 1 << 8; TokenType[TokenType[\"IS_POSTFIX\"] = IS_POSTFIX] = \"IS_POSTFIX\";\n  const IS_EXPRESSION_START = 1 << 9; TokenType[TokenType[\"IS_EXPRESSION_START\"] = IS_EXPRESSION_START] = \"IS_EXPRESSION_START\";\n\n  const num = 512; TokenType[TokenType[\"num\"] = num] = \"num\"; // num startsExpr\n  const bigint = 1536; TokenType[TokenType[\"bigint\"] = bigint] = \"bigint\"; // bigint startsExpr\n  const decimal = 2560; TokenType[TokenType[\"decimal\"] = decimal] = \"decimal\"; // decimal startsExpr\n  const regexp = 3584; TokenType[TokenType[\"regexp\"] = regexp] = \"regexp\"; // regexp startsExpr\n  const string = 4608; TokenType[TokenType[\"string\"] = string] = \"string\"; // string startsExpr\n  const name = 5632; TokenType[TokenType[\"name\"] = name] = \"name\"; // name startsExpr\n  const eof = 6144; TokenType[TokenType[\"eof\"] = eof] = \"eof\"; // eof\n  const bracketL = 7680; TokenType[TokenType[\"bracketL\"] = bracketL] = \"bracketL\"; // [ startsExpr\n  const bracketR = 8192; TokenType[TokenType[\"bracketR\"] = bracketR] = \"bracketR\"; // ]\n  const braceL = 9728; TokenType[TokenType[\"braceL\"] = braceL] = \"braceL\"; // { startsExpr\n  const braceBarL = 10752; TokenType[TokenType[\"braceBarL\"] = braceBarL] = \"braceBarL\"; // {| startsExpr\n  const braceR = 11264; TokenType[TokenType[\"braceR\"] = braceR] = \"braceR\"; // }\n  const braceBarR = 12288; TokenType[TokenType[\"braceBarR\"] = braceBarR] = \"braceBarR\"; // |}\n  const parenL = 13824; TokenType[TokenType[\"parenL\"] = parenL] = \"parenL\"; // ( startsExpr\n  const parenR = 14336; TokenType[TokenType[\"parenR\"] = parenR] = \"parenR\"; // )\n  const comma = 15360; TokenType[TokenType[\"comma\"] = comma] = \"comma\"; // ,\n  const semi = 16384; TokenType[TokenType[\"semi\"] = semi] = \"semi\"; // ;\n  const colon = 17408; TokenType[TokenType[\"colon\"] = colon] = \"colon\"; // :\n  const doubleColon = 18432; TokenType[TokenType[\"doubleColon\"] = doubleColon] = \"doubleColon\"; // ::\n  const dot = 19456; TokenType[TokenType[\"dot\"] = dot] = \"dot\"; // .\n  const question = 20480; TokenType[TokenType[\"question\"] = question] = \"question\"; // ?\n  const questionDot = 21504; TokenType[TokenType[\"questionDot\"] = questionDot] = \"questionDot\"; // ?.\n  const arrow = 22528; TokenType[TokenType[\"arrow\"] = arrow] = \"arrow\"; // =>\n  const template = 23552; TokenType[TokenType[\"template\"] = template] = \"template\"; // template\n  const ellipsis = 24576; TokenType[TokenType[\"ellipsis\"] = ellipsis] = \"ellipsis\"; // ...\n  const backQuote = 25600; TokenType[TokenType[\"backQuote\"] = backQuote] = \"backQuote\"; // `\n  const dollarBraceL = 27136; TokenType[TokenType[\"dollarBraceL\"] = dollarBraceL] = \"dollarBraceL\"; // ${ startsExpr\n  const at = 27648; TokenType[TokenType[\"at\"] = at] = \"at\"; // @\n  const hash = 29184; TokenType[TokenType[\"hash\"] = hash] = \"hash\"; // # startsExpr\n  const eq = 29728; TokenType[TokenType[\"eq\"] = eq] = \"eq\"; // = isAssign\n  const assign = 30752; TokenType[TokenType[\"assign\"] = assign] = \"assign\"; // _= isAssign\n  const preIncDec = 32640; TokenType[TokenType[\"preIncDec\"] = preIncDec] = \"preIncDec\"; // ++/-- prefix postfix startsExpr\n  const postIncDec = 33664; TokenType[TokenType[\"postIncDec\"] = postIncDec] = \"postIncDec\"; // ++/-- prefix postfix startsExpr\n  const bang = 34432; TokenType[TokenType[\"bang\"] = bang] = \"bang\"; // ! prefix startsExpr\n  const tilde = 35456; TokenType[TokenType[\"tilde\"] = tilde] = \"tilde\"; // ~ prefix startsExpr\n  const pipeline = 35841; TokenType[TokenType[\"pipeline\"] = pipeline] = \"pipeline\"; // |> prec:1\n  const nullishCoalescing = 36866; TokenType[TokenType[\"nullishCoalescing\"] = nullishCoalescing] = \"nullishCoalescing\"; // ?? prec:2\n  const logicalOR = 37890; TokenType[TokenType[\"logicalOR\"] = logicalOR] = \"logicalOR\"; // || prec:2\n  const logicalAND = 38915; TokenType[TokenType[\"logicalAND\"] = logicalAND] = \"logicalAND\"; // && prec:3\n  const bitwiseOR = 39940; TokenType[TokenType[\"bitwiseOR\"] = bitwiseOR] = \"bitwiseOR\"; // | prec:4\n  const bitwiseXOR = 40965; TokenType[TokenType[\"bitwiseXOR\"] = bitwiseXOR] = \"bitwiseXOR\"; // ^ prec:5\n  const bitwiseAND = 41990; TokenType[TokenType[\"bitwiseAND\"] = bitwiseAND] = \"bitwiseAND\"; // & prec:6\n  const equality = 43015; TokenType[TokenType[\"equality\"] = equality] = \"equality\"; // ==/!= prec:7\n  const lessThan = 44040; TokenType[TokenType[\"lessThan\"] = lessThan] = \"lessThan\"; // < prec:8\n  const greaterThan = 45064; TokenType[TokenType[\"greaterThan\"] = greaterThan] = \"greaterThan\"; // > prec:8\n  const relationalOrEqual = 46088; TokenType[TokenType[\"relationalOrEqual\"] = relationalOrEqual] = \"relationalOrEqual\"; // <=/>= prec:8\n  const bitShiftL = 47113; TokenType[TokenType[\"bitShiftL\"] = bitShiftL] = \"bitShiftL\"; // << prec:9\n  const bitShiftR = 48137; TokenType[TokenType[\"bitShiftR\"] = bitShiftR] = \"bitShiftR\"; // >>/>>> prec:9\n  const plus = 49802; TokenType[TokenType[\"plus\"] = plus] = \"plus\"; // + prec:10 prefix startsExpr\n  const minus = 50826; TokenType[TokenType[\"minus\"] = minus] = \"minus\"; // - prec:10 prefix startsExpr\n  const modulo = 51723; TokenType[TokenType[\"modulo\"] = modulo] = \"modulo\"; // % prec:11 startsExpr\n  const star = 52235; TokenType[TokenType[\"star\"] = star] = \"star\"; // * prec:11\n  const slash = 53259; TokenType[TokenType[\"slash\"] = slash] = \"slash\"; // / prec:11\n  const exponent = 54348; TokenType[TokenType[\"exponent\"] = exponent] = \"exponent\"; // ** prec:12 rightAssociative\n  const jsxName = 55296; TokenType[TokenType[\"jsxName\"] = jsxName] = \"jsxName\"; // jsxName\n  const jsxText = 56320; TokenType[TokenType[\"jsxText\"] = jsxText] = \"jsxText\"; // jsxText\n  const jsxEmptyText = 57344; TokenType[TokenType[\"jsxEmptyText\"] = jsxEmptyText] = \"jsxEmptyText\"; // jsxEmptyText\n  const jsxTagStart = 58880; TokenType[TokenType[\"jsxTagStart\"] = jsxTagStart] = \"jsxTagStart\"; // jsxTagStart startsExpr\n  const jsxTagEnd = 59392; TokenType[TokenType[\"jsxTagEnd\"] = jsxTagEnd] = \"jsxTagEnd\"; // jsxTagEnd\n  const typeParameterStart = 60928; TokenType[TokenType[\"typeParameterStart\"] = typeParameterStart] = \"typeParameterStart\"; // typeParameterStart startsExpr\n  const nonNullAssertion = 61440; TokenType[TokenType[\"nonNullAssertion\"] = nonNullAssertion] = \"nonNullAssertion\"; // nonNullAssertion\n  const _break = 62480; TokenType[TokenType[\"_break\"] = _break] = \"_break\"; // break keyword\n  const _case = 63504; TokenType[TokenType[\"_case\"] = _case] = \"_case\"; // case keyword\n  const _catch = 64528; TokenType[TokenType[\"_catch\"] = _catch] = \"_catch\"; // catch keyword\n  const _continue = 65552; TokenType[TokenType[\"_continue\"] = _continue] = \"_continue\"; // continue keyword\n  const _debugger = 66576; TokenType[TokenType[\"_debugger\"] = _debugger] = \"_debugger\"; // debugger keyword\n  const _default = 67600; TokenType[TokenType[\"_default\"] = _default] = \"_default\"; // default keyword\n  const _do = 68624; TokenType[TokenType[\"_do\"] = _do] = \"_do\"; // do keyword\n  const _else = 69648; TokenType[TokenType[\"_else\"] = _else] = \"_else\"; // else keyword\n  const _finally = 70672; TokenType[TokenType[\"_finally\"] = _finally] = \"_finally\"; // finally keyword\n  const _for = 71696; TokenType[TokenType[\"_for\"] = _for] = \"_for\"; // for keyword\n  const _function = 73232; TokenType[TokenType[\"_function\"] = _function] = \"_function\"; // function keyword startsExpr\n  const _if = 73744; TokenType[TokenType[\"_if\"] = _if] = \"_if\"; // if keyword\n  const _return = 74768; TokenType[TokenType[\"_return\"] = _return] = \"_return\"; // return keyword\n  const _switch = 75792; TokenType[TokenType[\"_switch\"] = _switch] = \"_switch\"; // switch keyword\n  const _throw = 77456; TokenType[TokenType[\"_throw\"] = _throw] = \"_throw\"; // throw keyword prefix startsExpr\n  const _try = 77840; TokenType[TokenType[\"_try\"] = _try] = \"_try\"; // try keyword\n  const _var = 78864; TokenType[TokenType[\"_var\"] = _var] = \"_var\"; // var keyword\n  const _let = 79888; TokenType[TokenType[\"_let\"] = _let] = \"_let\"; // let keyword\n  const _const = 80912; TokenType[TokenType[\"_const\"] = _const] = \"_const\"; // const keyword\n  const _while = 81936; TokenType[TokenType[\"_while\"] = _while] = \"_while\"; // while keyword\n  const _with = 82960; TokenType[TokenType[\"_with\"] = _with] = \"_with\"; // with keyword\n  const _new = 84496; TokenType[TokenType[\"_new\"] = _new] = \"_new\"; // new keyword startsExpr\n  const _this = 85520; TokenType[TokenType[\"_this\"] = _this] = \"_this\"; // this keyword startsExpr\n  const _super = 86544; TokenType[TokenType[\"_super\"] = _super] = \"_super\"; // super keyword startsExpr\n  const _class = 87568; TokenType[TokenType[\"_class\"] = _class] = \"_class\"; // class keyword startsExpr\n  const _extends = 88080; TokenType[TokenType[\"_extends\"] = _extends] = \"_extends\"; // extends keyword\n  const _export = 89104; TokenType[TokenType[\"_export\"] = _export] = \"_export\"; // export keyword\n  const _import = 90640; TokenType[TokenType[\"_import\"] = _import] = \"_import\"; // import keyword startsExpr\n  const _yield = 91664; TokenType[TokenType[\"_yield\"] = _yield] = \"_yield\"; // yield keyword startsExpr\n  const _null = 92688; TokenType[TokenType[\"_null\"] = _null] = \"_null\"; // null keyword startsExpr\n  const _true = 93712; TokenType[TokenType[\"_true\"] = _true] = \"_true\"; // true keyword startsExpr\n  const _false = 94736; TokenType[TokenType[\"_false\"] = _false] = \"_false\"; // false keyword startsExpr\n  const _in = 95256; TokenType[TokenType[\"_in\"] = _in] = \"_in\"; // in prec:8 keyword\n  const _instanceof = 96280; TokenType[TokenType[\"_instanceof\"] = _instanceof] = \"_instanceof\"; // instanceof prec:8 keyword\n  const _typeof = 97936; TokenType[TokenType[\"_typeof\"] = _typeof] = \"_typeof\"; // typeof keyword prefix startsExpr\n  const _void = 98960; TokenType[TokenType[\"_void\"] = _void] = \"_void\"; // void keyword prefix startsExpr\n  const _delete = 99984; TokenType[TokenType[\"_delete\"] = _delete] = \"_delete\"; // delete keyword prefix startsExpr\n  const _async = 100880; TokenType[TokenType[\"_async\"] = _async] = \"_async\"; // async keyword startsExpr\n  const _get = 101904; TokenType[TokenType[\"_get\"] = _get] = \"_get\"; // get keyword startsExpr\n  const _set = 102928; TokenType[TokenType[\"_set\"] = _set] = \"_set\"; // set keyword startsExpr\n  const _declare = 103952; TokenType[TokenType[\"_declare\"] = _declare] = \"_declare\"; // declare keyword startsExpr\n  const _readonly = 104976; TokenType[TokenType[\"_readonly\"] = _readonly] = \"_readonly\"; // readonly keyword startsExpr\n  const _abstract = 106000; TokenType[TokenType[\"_abstract\"] = _abstract] = \"_abstract\"; // abstract keyword startsExpr\n  const _static = 107024; TokenType[TokenType[\"_static\"] = _static] = \"_static\"; // static keyword startsExpr\n  const _public = 107536; TokenType[TokenType[\"_public\"] = _public] = \"_public\"; // public keyword\n  const _private = 108560; TokenType[TokenType[\"_private\"] = _private] = \"_private\"; // private keyword\n  const _protected = 109584; TokenType[TokenType[\"_protected\"] = _protected] = \"_protected\"; // protected keyword\n  const _override = 110608; TokenType[TokenType[\"_override\"] = _override] = \"_override\"; // override keyword\n  const _as = 112144; TokenType[TokenType[\"_as\"] = _as] = \"_as\"; // as keyword startsExpr\n  const _enum = 113168; TokenType[TokenType[\"_enum\"] = _enum] = \"_enum\"; // enum keyword startsExpr\n  const _type = 114192; TokenType[TokenType[\"_type\"] = _type] = \"_type\"; // type keyword startsExpr\n  const _implements = 115216; TokenType[TokenType[\"_implements\"] = _implements] = \"_implements\"; // implements keyword startsExpr\n})(TokenType || (TokenType = {}));\nexport function formatTokenType(tokenType) {\n  switch (tokenType) {\n    case TokenType.num:\n      return \"num\";\n    case TokenType.bigint:\n      return \"bigint\";\n    case TokenType.decimal:\n      return \"decimal\";\n    case TokenType.regexp:\n      return \"regexp\";\n    case TokenType.string:\n      return \"string\";\n    case TokenType.name:\n      return \"name\";\n    case TokenType.eof:\n      return \"eof\";\n    case TokenType.bracketL:\n      return \"[\";\n    case TokenType.bracketR:\n      return \"]\";\n    case TokenType.braceL:\n      return \"{\";\n    case TokenType.braceBarL:\n      return \"{|\";\n    case TokenType.braceR:\n      return \"}\";\n    case TokenType.braceBarR:\n      return \"|}\";\n    case TokenType.parenL:\n      return \"(\";\n    case TokenType.parenR:\n      return \")\";\n    case TokenType.comma:\n      return \",\";\n    case TokenType.semi:\n      return \";\";\n    case TokenType.colon:\n      return \":\";\n    case TokenType.doubleColon:\n      return \"::\";\n    case TokenType.dot:\n      return \".\";\n    case TokenType.question:\n      return \"?\";\n    case TokenType.questionDot:\n      return \"?.\";\n    case TokenType.arrow:\n      return \"=>\";\n    case TokenType.template:\n      return \"template\";\n    case TokenType.ellipsis:\n      return \"...\";\n    case TokenType.backQuote:\n      return \"`\";\n    case TokenType.dollarBraceL:\n      return \"${\";\n    case TokenType.at:\n      return \"@\";\n    case TokenType.hash:\n      return \"#\";\n    case TokenType.eq:\n      return \"=\";\n    case TokenType.assign:\n      return \"_=\";\n    case TokenType.preIncDec:\n      return \"++/--\";\n    case TokenType.postIncDec:\n      return \"++/--\";\n    case TokenType.bang:\n      return \"!\";\n    case TokenType.tilde:\n      return \"~\";\n    case TokenType.pipeline:\n      return \"|>\";\n    case TokenType.nullishCoalescing:\n      return \"??\";\n    case TokenType.logicalOR:\n      return \"||\";\n    case TokenType.logicalAND:\n      return \"&&\";\n    case TokenType.bitwiseOR:\n      return \"|\";\n    case TokenType.bitwiseXOR:\n      return \"^\";\n    case TokenType.bitwiseAND:\n      return \"&\";\n    case TokenType.equality:\n      return \"==/!=\";\n    case TokenType.lessThan:\n      return \"<\";\n    case TokenType.greaterThan:\n      return \">\";\n    case TokenType.relationalOrEqual:\n      return \"<=/>=\";\n    case TokenType.bitShiftL:\n      return \"<<\";\n    case TokenType.bitShiftR:\n      return \">>/>>>\";\n    case TokenType.plus:\n      return \"+\";\n    case TokenType.minus:\n      return \"-\";\n    case TokenType.modulo:\n      return \"%\";\n    case TokenType.star:\n      return \"*\";\n    case TokenType.slash:\n      return \"/\";\n    case TokenType.exponent:\n      return \"**\";\n    case TokenType.jsxName:\n      return \"jsxName\";\n    case TokenType.jsxText:\n      return \"jsxText\";\n    case TokenType.jsxEmptyText:\n      return \"jsxEmptyText\";\n    case TokenType.jsxTagStart:\n      return \"jsxTagStart\";\n    case TokenType.jsxTagEnd:\n      return \"jsxTagEnd\";\n    case TokenType.typeParameterStart:\n      return \"typeParameterStart\";\n    case TokenType.nonNullAssertion:\n      return \"nonNullAssertion\";\n    case TokenType._break:\n      return \"break\";\n    case TokenType._case:\n      return \"case\";\n    case TokenType._catch:\n      return \"catch\";\n    case TokenType._continue:\n      return \"continue\";\n    case TokenType._debugger:\n      return \"debugger\";\n    case TokenType._default:\n      return \"default\";\n    case TokenType._do:\n      return \"do\";\n    case TokenType._else:\n      return \"else\";\n    case TokenType._finally:\n      return \"finally\";\n    case TokenType._for:\n      return \"for\";\n    case TokenType._function:\n      return \"function\";\n    case TokenType._if:\n      return \"if\";\n    case TokenType._return:\n      return \"return\";\n    case TokenType._switch:\n      return \"switch\";\n    case TokenType._throw:\n      return \"throw\";\n    case TokenType._try:\n      return \"try\";\n    case TokenType._var:\n      return \"var\";\n    case TokenType._let:\n      return \"let\";\n    case TokenType._const:\n      return \"const\";\n    case TokenType._while:\n      return \"while\";\n    case TokenType._with:\n      return \"with\";\n    case TokenType._new:\n      return \"new\";\n    case TokenType._this:\n      return \"this\";\n    case TokenType._super:\n      return \"super\";\n    case TokenType._class:\n      return \"class\";\n    case TokenType._extends:\n      return \"extends\";\n    case TokenType._export:\n      return \"export\";\n    case TokenType._import:\n      return \"import\";\n    case TokenType._yield:\n      return \"yield\";\n    case TokenType._null:\n      return \"null\";\n    case TokenType._true:\n      return \"true\";\n    case TokenType._false:\n      return \"false\";\n    case TokenType._in:\n      return \"in\";\n    case TokenType._instanceof:\n      return \"instanceof\";\n    case TokenType._typeof:\n      return \"typeof\";\n    case TokenType._void:\n      return \"void\";\n    case TokenType._delete:\n      return \"delete\";\n    case TokenType._async:\n      return \"async\";\n    case TokenType._get:\n      return \"get\";\n    case TokenType._set:\n      return \"set\";\n    case TokenType._declare:\n      return \"declare\";\n    case TokenType._readonly:\n      return \"readonly\";\n    case TokenType._abstract:\n      return \"abstract\";\n    case TokenType._static:\n      return \"static\";\n    case TokenType._public:\n      return \"public\";\n    case TokenType._private:\n      return \"private\";\n    case TokenType._protected:\n      return \"protected\";\n    case TokenType._override:\n      return \"override\";\n    case TokenType._as:\n      return \"as\";\n    case TokenType._enum:\n      return \"enum\";\n    case TokenType._type:\n      return \"type\";\n    case TokenType._implements:\n      return \"implements\";\n    default:\n      return \"\";\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 586, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/tokenizer/state.js"],"sourcesContent":["\nimport {ContextualKeyword} from \"./keywords\";\nimport { TokenType as tt} from \"./types\";\n\nexport class Scope {\n  \n  \n  \n\n  constructor(startTokenIndex, endTokenIndex, isFunctionScope) {\n    this.startTokenIndex = startTokenIndex;\n    this.endTokenIndex = endTokenIndex;\n    this.isFunctionScope = isFunctionScope;\n  }\n}\n\nexport class StateSnapshot {\n  constructor(\n     potentialArrowAt,\n     noAnonFunctionType,\n     inDisallowConditionalTypesContext,\n     tokensLength,\n     scopesLength,\n     pos,\n     type,\n     contextualKeyword,\n     start,\n     end,\n     isType,\n     scopeDepth,\n     error,\n  ) {;this.potentialArrowAt = potentialArrowAt;this.noAnonFunctionType = noAnonFunctionType;this.inDisallowConditionalTypesContext = inDisallowConditionalTypesContext;this.tokensLength = tokensLength;this.scopesLength = scopesLength;this.pos = pos;this.type = type;this.contextualKeyword = contextualKeyword;this.start = start;this.end = end;this.isType = isType;this.scopeDepth = scopeDepth;this.error = error;}\n}\n\nexport default class State {constructor() { State.prototype.__init.call(this);State.prototype.__init2.call(this);State.prototype.__init3.call(this);State.prototype.__init4.call(this);State.prototype.__init5.call(this);State.prototype.__init6.call(this);State.prototype.__init7.call(this);State.prototype.__init8.call(this);State.prototype.__init9.call(this);State.prototype.__init10.call(this);State.prototype.__init11.call(this);State.prototype.__init12.call(this);State.prototype.__init13.call(this); }\n  // Used to signify the start of a potential arrow function\n  __init() {this.potentialArrowAt = -1}\n\n  // Used by Flow to handle an edge case involving function type parsing.\n  __init2() {this.noAnonFunctionType = false}\n\n  // Used by TypeScript to handle ambiguities when parsing conditional types.\n  __init3() {this.inDisallowConditionalTypesContext = false}\n\n  // Token store.\n  __init4() {this.tokens = []}\n\n  // Array of all observed scopes, ordered by their ending position.\n  __init5() {this.scopes = []}\n\n  // The current position of the tokenizer in the input.\n  __init6() {this.pos = 0}\n\n  // Information about the current token.\n  __init7() {this.type = tt.eof}\n  __init8() {this.contextualKeyword = ContextualKeyword.NONE}\n  __init9() {this.start = 0}\n  __init10() {this.end = 0}\n\n  __init11() {this.isType = false}\n  __init12() {this.scopeDepth = 0}\n\n  /**\n   * If the parser is in an error state, then the token is always tt.eof and all functions can\n   * keep executing but should be written so they don't get into an infinite loop in this situation.\n   *\n   * This approach, combined with the ability to snapshot and restore state, allows us to implement\n   * backtracking without exceptions and without needing to explicitly propagate error states\n   * everywhere.\n   */\n  __init13() {this.error = null}\n\n  snapshot() {\n    return new StateSnapshot(\n      this.potentialArrowAt,\n      this.noAnonFunctionType,\n      this.inDisallowConditionalTypesContext,\n      this.tokens.length,\n      this.scopes.length,\n      this.pos,\n      this.type,\n      this.contextualKeyword,\n      this.start,\n      this.end,\n      this.isType,\n      this.scopeDepth,\n      this.error,\n    );\n  }\n\n  restoreFromSnapshot(snapshot) {\n    this.potentialArrowAt = snapshot.potentialArrowAt;\n    this.noAnonFunctionType = snapshot.noAnonFunctionType;\n    this.inDisallowConditionalTypesContext = snapshot.inDisallowConditionalTypesContext;\n    this.tokens.length = snapshot.tokensLength;\n    this.scopes.length = snapshot.scopesLength;\n    this.pos = snapshot.pos;\n    this.type = snapshot.type;\n    this.contextualKeyword = snapshot.contextualKeyword;\n    this.start = snapshot.start;\n    this.end = snapshot.end;\n    this.isType = snapshot.isType;\n    this.scopeDepth = snapshot.scopeDepth;\n    this.error = snapshot.error;\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 716, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/util/charcodes.js"],"sourcesContent":["export var charCodes; (function (charCodes) {\n  const backSpace = 8; charCodes[charCodes[\"backSpace\"] = backSpace] = \"backSpace\";\n  const lineFeed = 10; charCodes[charCodes[\"lineFeed\"] = lineFeed] = \"lineFeed\"; //  '\\n'\n  const tab = 9; charCodes[charCodes[\"tab\"] = tab] = \"tab\"; //  '\\t'\n  const carriageReturn = 13; charCodes[charCodes[\"carriageReturn\"] = carriageReturn] = \"carriageReturn\"; //  '\\r'\n  const shiftOut = 14; charCodes[charCodes[\"shiftOut\"] = shiftOut] = \"shiftOut\";\n  const space = 32; charCodes[charCodes[\"space\"] = space] = \"space\";\n  const exclamationMark = 33; charCodes[charCodes[\"exclamationMark\"] = exclamationMark] = \"exclamationMark\"; //  '!'\n  const quotationMark = 34; charCodes[charCodes[\"quotationMark\"] = quotationMark] = \"quotationMark\"; //  '\"'\n  const numberSign = 35; charCodes[charCodes[\"numberSign\"] = numberSign] = \"numberSign\"; //  '#'\n  const dollarSign = 36; charCodes[charCodes[\"dollarSign\"] = dollarSign] = \"dollarSign\"; //  '$'\n  const percentSign = 37; charCodes[charCodes[\"percentSign\"] = percentSign] = \"percentSign\"; //  '%'\n  const ampersand = 38; charCodes[charCodes[\"ampersand\"] = ampersand] = \"ampersand\"; //  '&'\n  const apostrophe = 39; charCodes[charCodes[\"apostrophe\"] = apostrophe] = \"apostrophe\"; //  '''\n  const leftParenthesis = 40; charCodes[charCodes[\"leftParenthesis\"] = leftParenthesis] = \"leftParenthesis\"; //  '('\n  const rightParenthesis = 41; charCodes[charCodes[\"rightParenthesis\"] = rightParenthesis] = \"rightParenthesis\"; //  ')'\n  const asterisk = 42; charCodes[charCodes[\"asterisk\"] = asterisk] = \"asterisk\"; //  '*'\n  const plusSign = 43; charCodes[charCodes[\"plusSign\"] = plusSign] = \"plusSign\"; //  '+'\n  const comma = 44; charCodes[charCodes[\"comma\"] = comma] = \"comma\"; //  ','\n  const dash = 45; charCodes[charCodes[\"dash\"] = dash] = \"dash\"; //  '-'\n  const dot = 46; charCodes[charCodes[\"dot\"] = dot] = \"dot\"; //  '.'\n  const slash = 47; charCodes[charCodes[\"slash\"] = slash] = \"slash\"; //  '/'\n  const digit0 = 48; charCodes[charCodes[\"digit0\"] = digit0] = \"digit0\"; //  '0'\n  const digit1 = 49; charCodes[charCodes[\"digit1\"] = digit1] = \"digit1\"; //  '1'\n  const digit2 = 50; charCodes[charCodes[\"digit2\"] = digit2] = \"digit2\"; //  '2'\n  const digit3 = 51; charCodes[charCodes[\"digit3\"] = digit3] = \"digit3\"; //  '3'\n  const digit4 = 52; charCodes[charCodes[\"digit4\"] = digit4] = \"digit4\"; //  '4'\n  const digit5 = 53; charCodes[charCodes[\"digit5\"] = digit5] = \"digit5\"; //  '5'\n  const digit6 = 54; charCodes[charCodes[\"digit6\"] = digit6] = \"digit6\"; //  '6'\n  const digit7 = 55; charCodes[charCodes[\"digit7\"] = digit7] = \"digit7\"; //  '7'\n  const digit8 = 56; charCodes[charCodes[\"digit8\"] = digit8] = \"digit8\"; //  '8'\n  const digit9 = 57; charCodes[charCodes[\"digit9\"] = digit9] = \"digit9\"; //  '9'\n  const colon = 58; charCodes[charCodes[\"colon\"] = colon] = \"colon\"; //  ':'\n  const semicolon = 59; charCodes[charCodes[\"semicolon\"] = semicolon] = \"semicolon\"; //  ';'\n  const lessThan = 60; charCodes[charCodes[\"lessThan\"] = lessThan] = \"lessThan\"; //  '<'\n  const equalsTo = 61; charCodes[charCodes[\"equalsTo\"] = equalsTo] = \"equalsTo\"; //  '='\n  const greaterThan = 62; charCodes[charCodes[\"greaterThan\"] = greaterThan] = \"greaterThan\"; //  '>'\n  const questionMark = 63; charCodes[charCodes[\"questionMark\"] = questionMark] = \"questionMark\"; //  '?'\n  const atSign = 64; charCodes[charCodes[\"atSign\"] = atSign] = \"atSign\"; //  '@'\n  const uppercaseA = 65; charCodes[charCodes[\"uppercaseA\"] = uppercaseA] = \"uppercaseA\"; //  'A'\n  const uppercaseB = 66; charCodes[charCodes[\"uppercaseB\"] = uppercaseB] = \"uppercaseB\"; //  'B'\n  const uppercaseC = 67; charCodes[charCodes[\"uppercaseC\"] = uppercaseC] = \"uppercaseC\"; //  'C'\n  const uppercaseD = 68; charCodes[charCodes[\"uppercaseD\"] = uppercaseD] = \"uppercaseD\"; //  'D'\n  const uppercaseE = 69; charCodes[charCodes[\"uppercaseE\"] = uppercaseE] = \"uppercaseE\"; //  'E'\n  const uppercaseF = 70; charCodes[charCodes[\"uppercaseF\"] = uppercaseF] = \"uppercaseF\"; //  'F'\n  const uppercaseG = 71; charCodes[charCodes[\"uppercaseG\"] = uppercaseG] = \"uppercaseG\"; //  'G'\n  const uppercaseH = 72; charCodes[charCodes[\"uppercaseH\"] = uppercaseH] = \"uppercaseH\"; //  'H'\n  const uppercaseI = 73; charCodes[charCodes[\"uppercaseI\"] = uppercaseI] = \"uppercaseI\"; //  'I'\n  const uppercaseJ = 74; charCodes[charCodes[\"uppercaseJ\"] = uppercaseJ] = \"uppercaseJ\"; //  'J'\n  const uppercaseK = 75; charCodes[charCodes[\"uppercaseK\"] = uppercaseK] = \"uppercaseK\"; //  'K'\n  const uppercaseL = 76; charCodes[charCodes[\"uppercaseL\"] = uppercaseL] = \"uppercaseL\"; //  'L'\n  const uppercaseM = 77; charCodes[charCodes[\"uppercaseM\"] = uppercaseM] = \"uppercaseM\"; //  'M'\n  const uppercaseN = 78; charCodes[charCodes[\"uppercaseN\"] = uppercaseN] = \"uppercaseN\"; //  'N'\n  const uppercaseO = 79; charCodes[charCodes[\"uppercaseO\"] = uppercaseO] = \"uppercaseO\"; //  'O'\n  const uppercaseP = 80; charCodes[charCodes[\"uppercaseP\"] = uppercaseP] = \"uppercaseP\"; //  'P'\n  const uppercaseQ = 81; charCodes[charCodes[\"uppercaseQ\"] = uppercaseQ] = \"uppercaseQ\"; //  'Q'\n  const uppercaseR = 82; charCodes[charCodes[\"uppercaseR\"] = uppercaseR] = \"uppercaseR\"; //  'R'\n  const uppercaseS = 83; charCodes[charCodes[\"uppercaseS\"] = uppercaseS] = \"uppercaseS\"; //  'S'\n  const uppercaseT = 84; charCodes[charCodes[\"uppercaseT\"] = uppercaseT] = \"uppercaseT\"; //  'T'\n  const uppercaseU = 85; charCodes[charCodes[\"uppercaseU\"] = uppercaseU] = \"uppercaseU\"; //  'U'\n  const uppercaseV = 86; charCodes[charCodes[\"uppercaseV\"] = uppercaseV] = \"uppercaseV\"; //  'V'\n  const uppercaseW = 87; charCodes[charCodes[\"uppercaseW\"] = uppercaseW] = \"uppercaseW\"; //  'W'\n  const uppercaseX = 88; charCodes[charCodes[\"uppercaseX\"] = uppercaseX] = \"uppercaseX\"; //  'X'\n  const uppercaseY = 89; charCodes[charCodes[\"uppercaseY\"] = uppercaseY] = \"uppercaseY\"; //  'Y'\n  const uppercaseZ = 90; charCodes[charCodes[\"uppercaseZ\"] = uppercaseZ] = \"uppercaseZ\"; //  'Z'\n  const leftSquareBracket = 91; charCodes[charCodes[\"leftSquareBracket\"] = leftSquareBracket] = \"leftSquareBracket\"; //  '['\n  const backslash = 92; charCodes[charCodes[\"backslash\"] = backslash] = \"backslash\"; //  '\\    '\n  const rightSquareBracket = 93; charCodes[charCodes[\"rightSquareBracket\"] = rightSquareBracket] = \"rightSquareBracket\"; //  ']'\n  const caret = 94; charCodes[charCodes[\"caret\"] = caret] = \"caret\"; //  '^'\n  const underscore = 95; charCodes[charCodes[\"underscore\"] = underscore] = \"underscore\"; //  '_'\n  const graveAccent = 96; charCodes[charCodes[\"graveAccent\"] = graveAccent] = \"graveAccent\"; //  '`'\n  const lowercaseA = 97; charCodes[charCodes[\"lowercaseA\"] = lowercaseA] = \"lowercaseA\"; //  'a'\n  const lowercaseB = 98; charCodes[charCodes[\"lowercaseB\"] = lowercaseB] = \"lowercaseB\"; //  'b'\n  const lowercaseC = 99; charCodes[charCodes[\"lowercaseC\"] = lowercaseC] = \"lowercaseC\"; //  'c'\n  const lowercaseD = 100; charCodes[charCodes[\"lowercaseD\"] = lowercaseD] = \"lowercaseD\"; //  'd'\n  const lowercaseE = 101; charCodes[charCodes[\"lowercaseE\"] = lowercaseE] = \"lowercaseE\"; //  'e'\n  const lowercaseF = 102; charCodes[charCodes[\"lowercaseF\"] = lowercaseF] = \"lowercaseF\"; //  'f'\n  const lowercaseG = 103; charCodes[charCodes[\"lowercaseG\"] = lowercaseG] = \"lowercaseG\"; //  'g'\n  const lowercaseH = 104; charCodes[charCodes[\"lowercaseH\"] = lowercaseH] = \"lowercaseH\"; //  'h'\n  const lowercaseI = 105; charCodes[charCodes[\"lowercaseI\"] = lowercaseI] = \"lowercaseI\"; //  'i'\n  const lowercaseJ = 106; charCodes[charCodes[\"lowercaseJ\"] = lowercaseJ] = \"lowercaseJ\"; //  'j'\n  const lowercaseK = 107; charCodes[charCodes[\"lowercaseK\"] = lowercaseK] = \"lowercaseK\"; //  'k'\n  const lowercaseL = 108; charCodes[charCodes[\"lowercaseL\"] = lowercaseL] = \"lowercaseL\"; //  'l'\n  const lowercaseM = 109; charCodes[charCodes[\"lowercaseM\"] = lowercaseM] = \"lowercaseM\"; //  'm'\n  const lowercaseN = 110; charCodes[charCodes[\"lowercaseN\"] = lowercaseN] = \"lowercaseN\"; //  'n'\n  const lowercaseO = 111; charCodes[charCodes[\"lowercaseO\"] = lowercaseO] = \"lowercaseO\"; //  'o'\n  const lowercaseP = 112; charCodes[charCodes[\"lowercaseP\"] = lowercaseP] = \"lowercaseP\"; //  'p'\n  const lowercaseQ = 113; charCodes[charCodes[\"lowercaseQ\"] = lowercaseQ] = \"lowercaseQ\"; //  'q'\n  const lowercaseR = 114; charCodes[charCodes[\"lowercaseR\"] = lowercaseR] = \"lowercaseR\"; //  'r'\n  const lowercaseS = 115; charCodes[charCodes[\"lowercaseS\"] = lowercaseS] = \"lowercaseS\"; //  's'\n  const lowercaseT = 116; charCodes[charCodes[\"lowercaseT\"] = lowercaseT] = \"lowercaseT\"; //  't'\n  const lowercaseU = 117; charCodes[charCodes[\"lowercaseU\"] = lowercaseU] = \"lowercaseU\"; //  'u'\n  const lowercaseV = 118; charCodes[charCodes[\"lowercaseV\"] = lowercaseV] = \"lowercaseV\"; //  'v'\n  const lowercaseW = 119; charCodes[charCodes[\"lowercaseW\"] = lowercaseW] = \"lowercaseW\"; //  'w'\n  const lowercaseX = 120; charCodes[charCodes[\"lowercaseX\"] = lowercaseX] = \"lowercaseX\"; //  'x'\n  const lowercaseY = 121; charCodes[charCodes[\"lowercaseY\"] = lowercaseY] = \"lowercaseY\"; //  'y'\n  const lowercaseZ = 122; charCodes[charCodes[\"lowercaseZ\"] = lowercaseZ] = \"lowercaseZ\"; //  'z'\n  const leftCurlyBrace = 123; charCodes[charCodes[\"leftCurlyBrace\"] = leftCurlyBrace] = \"leftCurlyBrace\"; //  '{'\n  const verticalBar = 124; charCodes[charCodes[\"verticalBar\"] = verticalBar] = \"verticalBar\"; //  '|'\n  const rightCurlyBrace = 125; charCodes[charCodes[\"rightCurlyBrace\"] = rightCurlyBrace] = \"rightCurlyBrace\"; //  '}'\n  const tilde = 126; charCodes[charCodes[\"tilde\"] = tilde] = \"tilde\"; //  '~'\n  const nonBreakingSpace = 160; charCodes[charCodes[\"nonBreakingSpace\"] = nonBreakingSpace] = \"nonBreakingSpace\";\n  // eslint-disable-next-line no-irregular-whitespace\n  const oghamSpaceMark = 5760; charCodes[charCodes[\"oghamSpaceMark\"] = oghamSpaceMark] = \"oghamSpaceMark\"; // ' '\n  const lineSeparator = 8232; charCodes[charCodes[\"lineSeparator\"] = lineSeparator] = \"lineSeparator\";\n  const paragraphSeparator = 8233; charCodes[charCodes[\"paragraphSeparator\"] = paragraphSeparator] = \"paragraphSeparator\";\n})(charCodes || (charCodes = {}));\n\nexport function isDigit(code) {\n  return (\n    (code >= charCodes.digit0 && code <= charCodes.digit9) ||\n    (code >= charCodes.lowercaseA && code <= charCodes.lowercaseF) ||\n    (code >= charCodes.uppercaseA && code <= charCodes.uppercaseF)\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 941, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/traverser/base.js"],"sourcesContent":["import State from \"../tokenizer/state\";\nimport {charCodes} from \"../util/charcodes\";\n\nexport let isJSXEnabled;\nexport let isTypeScriptEnabled;\nexport let isFlowEnabled;\nexport let state;\nexport let input;\nexport let nextContextId;\n\nexport function getNextContextId() {\n  return nextContextId++;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function augmentError(error) {\n  if (\"pos\" in error) {\n    const loc = locationForIndex(error.pos);\n    error.message += ` (${loc.line}:${loc.column})`;\n    error.loc = loc;\n  }\n  return error;\n}\n\nexport class Loc {\n  \n  \n  constructor(line, column) {\n    this.line = line;\n    this.column = column;\n  }\n}\n\nexport function locationForIndex(pos) {\n  let line = 1;\n  let column = 1;\n  for (let i = 0; i < pos; i++) {\n    if (input.charCodeAt(i) === charCodes.lineFeed) {\n      line++;\n      column = 1;\n    } else {\n      column++;\n    }\n  }\n  return new Loc(line, column);\n}\n\nexport function initParser(\n  inputCode,\n  isJSXEnabledArg,\n  isTypeScriptEnabledArg,\n  isFlowEnabledArg,\n) {\n  input = inputCode;\n  state = new State();\n  nextContextId = 1;\n  isJSXEnabled = isJSXEnabledArg;\n  isTypeScriptEnabled = isTypeScriptEnabledArg;\n  isFlowEnabled = isFlowEnabledArg;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAEO,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ,SAAS;IACd,OAAO;AACT;AAGO,SAAS,aAAa,KAAK;IAChC,IAAI,SAAS,OAAO;QAClB,MAAM,MAAM,iBAAiB,MAAM,GAAG;QACtC,MAAM,OAAO,IAAI,AAAC,KAAgB,OAAZ,IAAI,IAAI,EAAC,KAAc,OAAX,IAAI,MAAM,EAAC;QAC7C,MAAM,GAAG,GAAG;IACd;IACA,OAAO;AACT;AAEO,MAAM;IAGX,YAAY,IAAI,EAAE,MAAM,CAAE;QACxB,IAAI,CAAC,IAAI,GAAG;QACZ,IAAI,CAAC,MAAM,GAAG;IAChB;AACF;AAEO,SAAS,iBAAiB,GAAG;IAClC,IAAI,OAAO;IACX,IAAI,SAAS;IACb,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;QAC5B,IAAI,MAAM,UAAU,CAAC,OAAO,4MAAS,CAAC,QAAQ,EAAE;YAC9C;YACA,SAAS;QACX,OAAO;YACL;QACF;IACF;IACA,OAAO,IAAI,IAAI,MAAM;AACvB;AAEO,SAAS,WACd,SAAS,EACT,eAAe,EACf,sBAAsB,EACtB,gBAAgB;IAEhB,QAAQ;IACR,QAAQ,IAAI,2MAAK;IACjB,gBAAgB;IAChB,eAAe;IACf,sBAAsB;IACtB,gBAAgB;AAClB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1017, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/traverser/util.js"],"sourcesContent":["import {eat, finishToken, lookaheadTypeAndKeyword, match, nextTokenStart} from \"../tokenizer/index\";\n\nimport {formatTokenType, TokenType as tt} from \"../tokenizer/types\";\nimport {charCodes} from \"../util/charcodes\";\nimport {input, state} from \"./base\";\n\n// ## Parser utilities\n\n// Tests whether parsed token is a contextual keyword.\nexport function isContextual(contextualKeyword) {\n  return state.contextualKeyword === contextualKeyword;\n}\n\nexport function isLookaheadContextual(contextualKeyword) {\n  const l = lookaheadTypeAndKeyword();\n  return l.type === tt.name && l.contextualKeyword === contextualKeyword;\n}\n\n// Consumes contextual keyword if possible.\nexport function eatContextual(contextualKeyword) {\n  return state.contextualKeyword === contextualKeyword && eat(tt.name);\n}\n\n// Asserts that following token is given contextual keyword.\nexport function expectContextual(contextualKeyword) {\n  if (!eatContextual(contextualKeyword)) {\n    unexpected();\n  }\n}\n\n// Test whether a semicolon can be inserted at the current position.\nexport function canInsertSemicolon() {\n  return match(tt.eof) || match(tt.braceR) || hasPrecedingLineBreak();\n}\n\nexport function hasPrecedingLineBreak() {\n  const prevToken = state.tokens[state.tokens.length - 1];\n  const lastTokEnd = prevToken ? prevToken.end : 0;\n  for (let i = lastTokEnd; i < state.start; i++) {\n    const code = input.charCodeAt(i);\n    if (\n      code === charCodes.lineFeed ||\n      code === charCodes.carriageReturn ||\n      code === 0x2028 ||\n      code === 0x2029\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function hasFollowingLineBreak() {\n  const nextStart = nextTokenStart();\n  for (let i = state.end; i < nextStart; i++) {\n    const code = input.charCodeAt(i);\n    if (\n      code === charCodes.lineFeed ||\n      code === charCodes.carriageReturn ||\n      code === 0x2028 ||\n      code === 0x2029\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function isLineTerminator() {\n  return eat(tt.semi) || canInsertSemicolon();\n}\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\nexport function semicolon() {\n  if (!isLineTerminator()) {\n    unexpected('Unexpected token, expected \";\"');\n  }\n}\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error at given pos.\nexport function expect(type) {\n  const matched = eat(type);\n  if (!matched) {\n    unexpected(`Unexpected token, expected \"${formatTokenType(type)}\"`);\n  }\n}\n\n/**\n * Transition the parser to an error state. All code needs to be written to naturally unwind in this\n * state, which allows us to backtrack without exceptions and without error plumbing everywhere.\n */\nexport function unexpected(message = \"Unexpected token\", pos = state.start) {\n  if (state.error) {\n    return;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const err = new SyntaxError(message);\n  err.pos = pos;\n  state.error = err;\n  state.pos = input.length;\n  finishToken(tt.eof);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;;;;;AAKO,SAAS,aAAa,iBAAiB;IAC5C,OAAO,wMAAK,CAAC,iBAAiB,KAAK;AACrC;AAEO,SAAS,sBAAsB,iBAAiB;IACrD,MAAM,IAAI,IAAA,2NAAuB;IACjC,OAAO,EAAE,IAAI,KAAK,6MAAE,CAAC,IAAI,IAAI,EAAE,iBAAiB,KAAK;AACvD;AAGO,SAAS,cAAc,iBAAiB;IAC7C,OAAO,wMAAK,CAAC,iBAAiB,KAAK,qBAAqB,IAAA,uMAAG,EAAC,6MAAE,CAAC,IAAI;AACrE;AAGO,SAAS,iBAAiB,iBAAiB;IAChD,IAAI,CAAC,cAAc,oBAAoB;QACrC;IACF;AACF;AAGO,SAAS;IACd,OAAO,IAAA,yMAAK,EAAC,6MAAE,CAAC,GAAG,KAAK,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,KAAK;AAC9C;AAEO,SAAS;IACd,MAAM,YAAY,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE;IACvD,MAAM,aAAa,YAAY,UAAU,GAAG,GAAG;IAC/C,IAAK,IAAI,IAAI,YAAY,IAAI,wMAAK,CAAC,KAAK,EAAE,IAAK;QAC7C,MAAM,OAAO,wMAAK,CAAC,UAAU,CAAC;QAC9B,IACE,SAAS,4MAAS,CAAC,QAAQ,IAC3B,SAAS,4MAAS,CAAC,cAAc,IACjC,SAAS,UACT,SAAS,QACT;YACA,OAAO;QACT;IACF;IACA,OAAO;AACT;AAEO,SAAS;IACd,MAAM,YAAY,IAAA,kNAAc;IAChC,IAAK,IAAI,IAAI,wMAAK,CAAC,GAAG,EAAE,IAAI,WAAW,IAAK;QAC1C,MAAM,OAAO,wMAAK,CAAC,UAAU,CAAC;QAC9B,IACE,SAAS,4MAAS,CAAC,QAAQ,IAC3B,SAAS,4MAAS,CAAC,cAAc,IACjC,SAAS,UACT,SAAS,QACT;YACA,OAAO;QACT;IACF;IACA,OAAO;AACT;AAEO,SAAS;IACd,OAAO,IAAA,uMAAG,EAAC,6MAAE,CAAC,IAAI,KAAK;AACzB;AAIO,SAAS;IACd,IAAI,CAAC,oBAAoB;QACvB,WAAW;IACb;AACF;AAIO,SAAS,OAAO,IAAI;IACzB,MAAM,UAAU,IAAA,uMAAG,EAAC;IACpB,IAAI,CAAC,SAAS;QACZ,WAAW,AAAC,+BAAoD,OAAtB,IAAA,mNAAe,EAAC,OAAM;IAClE;AACF;AAMO,SAAS;QAAW,UAAA,iEAAU,oBAAoB,MAAA,iEAAM,wMAAK,CAAC,KAAK;IACxE,IAAI,wMAAK,CAAC,KAAK,EAAE;QACf;IACF;IACA,8DAA8D;IAC9D,MAAM,MAAM,IAAI,YAAY;IAC5B,IAAI,GAAG,GAAG;IACV,wMAAK,CAAC,KAAK,GAAG;IACd,wMAAK,CAAC,GAAG,GAAG,wMAAK,CAAC,MAAM;IACxB,IAAA,+MAAW,EAAC,6MAAE,CAAC,GAAG;AACpB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1118, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/util/whitespace.js"],"sourcesContent":["import {charCodes} from \"./charcodes\";\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport const WHITESPACE_CHARS = [\n  0x0009,\n  0x000b,\n  0x000c,\n  charCodes.space,\n  charCodes.nonBreakingSpace,\n  charCodes.oghamSpaceMark,\n  0x2000, // EN QUAD\n  0x2001, // EM QUAD\n  0x2002, // EN SPACE\n  0x2003, // EM SPACE\n  0x2004, // THREE-PER-EM SPACE\n  0x2005, // FOUR-PER-EM SPACE\n  0x2006, // SIX-PER-EM SPACE\n  0x2007, // FIGURE SPACE\n  0x2008, // PUNCTUATION SPACE\n  0x2009, // THIN SPACE\n  0x200a, // HAIR SPACE\n  0x202f, // NARROW NO-BREAK SPACE\n  0x205f, // MEDIUM MATHEMATICAL SPACE\n  0x3000, // IDEOGRAPHIC SPACE\n  0xfeff, // ZERO WIDTH NO-BREAK SPACE\n];\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const IS_WHITESPACE = new Uint8Array(65536);\nfor (const char of WHITESPACE_CHARS) {\n  IS_WHITESPACE[char] = 1;\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;;AAGO,MAAM,mBAAmB;IAC9B;IACA;IACA;IACA,4MAAS,CAAC,KAAK;IACf,4MAAS,CAAC,gBAAgB;IAC1B,4MAAS,CAAC,cAAc;IACxB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAEM,MAAM,iBAAiB;AAEvB,MAAM,gBAAgB,IAAI,WAAW;AAC5C,KAAK,MAAM,QAAQ,iBAAkB;IACnC,aAAa,CAAC,KAAK,GAAG;AACxB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1160, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/util/identifier.js"],"sourcesContent":["import {charCodes} from \"./charcodes\";\nimport {WHITESPACE_CHARS} from \"./whitespace\";\n\nfunction computeIsIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code < 91) return true;\n  if (code < 97) return code === 95;\n  if (code < 123) return true;\n  if (code < 128) return false;\n  throw new Error(\"Should not be called with non-ASCII char code.\");\n}\n\nexport const IS_IDENTIFIER_CHAR = new Uint8Array(65536);\nfor (let i = 0; i < 128; i++) {\n  IS_IDENTIFIER_CHAR[i] = computeIsIdentifierChar(i) ? 1 : 0;\n}\nfor (let i = 128; i < 65536; i++) {\n  IS_IDENTIFIER_CHAR[i] = 1;\n}\n// Aside from whitespace and newlines, all characters outside the ASCII space are either\n// identifier characters or invalid. Since we're not performing code validation, we can just\n// treat all invalid characters as identifier characters.\nfor (const whitespaceChar of WHITESPACE_CHARS) {\n  IS_IDENTIFIER_CHAR[whitespaceChar] = 0;\n}\nIS_IDENTIFIER_CHAR[0x2028] = 0;\nIS_IDENTIFIER_CHAR[0x2029] = 0;\n\nexport const IS_IDENTIFIER_START = IS_IDENTIFIER_CHAR.slice();\nfor (let numChar = charCodes.digit0; numChar <= charCodes.digit9; numChar++) {\n  IS_IDENTIFIER_START[numChar] = 0;\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,SAAS,wBAAwB,IAAI;IACnC,IAAI,OAAO,IAAI,OAAO,SAAS;IAC/B,IAAI,OAAO,IAAI,OAAO;IACtB,IAAI,OAAO,IAAI,OAAO;IACtB,IAAI,OAAO,IAAI,OAAO;IACtB,IAAI,OAAO,IAAI,OAAO,SAAS;IAC/B,IAAI,OAAO,KAAK,OAAO;IACvB,IAAI,OAAO,KAAK,OAAO;IACvB,MAAM,IAAI,MAAM;AAClB;AAEO,MAAM,qBAAqB,IAAI,WAAW;AACjD,IAAK,IAAI,IAAI,GAAG,IAAI,KAAK,IAAK;IAC5B,kBAAkB,CAAC,EAAE,GAAG,wBAAwB,KAAK,IAAI;AAC3D;AACA,IAAK,IAAI,IAAI,KAAK,IAAI,OAAO,IAAK;IAChC,kBAAkB,CAAC,EAAE,GAAG;AAC1B;AACA,wFAAwF;AACxF,4FAA4F;AAC5F,yDAAyD;AACzD,KAAK,MAAM,kBAAkB,oNAAgB,CAAE;IAC7C,kBAAkB,CAAC,eAAe,GAAG;AACvC;AACA,kBAAkB,CAAC,OAAO,GAAG;AAC7B,kBAAkB,CAAC,OAAO,GAAG;AAEtB,MAAM,sBAAsB,mBAAmB,KAAK;AAC3D,IAAK,IAAI,UAAU,4MAAS,CAAC,MAAM,EAAE,WAAW,4MAAS,CAAC,MAAM,EAAE,UAAW;IAC3E,mBAAmB,CAAC,QAAQ,GAAG;AACjC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1203, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/tokenizer/readWordTree.js"],"sourcesContent":["// Generated file, do not edit! Run \"yarn generate\" to re-generate this file.\nimport {ContextualKeyword} from \"./keywords\";\nimport {TokenType as tt} from \"./types\";\n\n// prettier-ignore\nexport const READ_WORD_TREE = new Int32Array([\n  // \"\"\n  -1, 27, 783, 918, 1755, 2376, 2862, 3483, -1, 3699, -1, 4617, 4752, 4833, 5130, 5508, 5940, -1, 6480, 6939, 7749, 8181, 8451, 8613, -1, 8829, -1,\n  // \"a\"\n  -1, -1, 54, 243, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 432, -1, -1, -1, 675, -1, -1, -1,\n  // \"ab\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 81, -1, -1, -1, -1, -1, -1, -1,\n  // \"abs\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1, -1,\n  // \"abst\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstr\"\n  -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstra\"\n  -1, -1, -1, 189, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"abstrac\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 216, -1, -1, -1, -1, -1, -1,\n  // \"abstract\"\n  ContextualKeyword._abstract << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ac\"\n  -1, -1, -1, 270, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"acc\"\n  -1, -1, -1, -1, -1, 297, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"acce\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, -1, -1,\n  // \"acces\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 351, -1, -1, -1, -1, -1, -1, -1,\n  // \"access\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 378, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"accesso\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 405, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"accessor\"\n  ContextualKeyword._accessor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"as\"\n  ContextualKeyword._as << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 459, -1, -1, -1, -1, -1, 594, -1,\n  // \"ass\"\n  -1, -1, -1, -1, -1, 486, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asse\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 513, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asser\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 540, -1, -1, -1, -1, -1, -1,\n  // \"assert\"\n  ContextualKeyword._assert << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 567, -1, -1, -1, -1, -1, -1, -1,\n  // \"asserts\"\n  ContextualKeyword._asserts << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asy\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 621, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"asyn\"\n  -1, -1, -1, 648, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"async\"\n  ContextualKeyword._async << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"aw\"\n  -1, 702, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"awa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 729, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"awai\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 756, -1, -1, -1, -1, -1, -1,\n  // \"await\"\n  ContextualKeyword._await << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"b\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 810, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"br\"\n  -1, -1, -1, -1, -1, 837, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"bre\"\n  -1, 864, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"brea\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 891, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"break\"\n  (tt._break << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"c\"\n  -1, 945, -1, -1, -1, -1, -1, -1, 1107, -1, -1, -1, 1242, -1, -1, 1350, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ca\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 972, 1026, -1, -1, -1, -1, -1, -1,\n  // \"cas\"\n  -1, -1, -1, -1, -1, 999, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"case\"\n  (tt._case << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cat\"\n  -1, -1, -1, 1053, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"catc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 1080, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"catch\"\n  (tt._catch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ch\"\n  -1, -1, -1, -1, -1, 1134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"che\"\n  -1, -1, -1, 1161, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"chec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1188, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"check\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1215, -1, -1, -1, -1, -1, -1, -1,\n  // \"checks\"\n  ContextualKeyword._checks << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cl\"\n  -1, 1269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cla\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1296, -1, -1, -1, -1, -1, -1, -1,\n  // \"clas\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1323, -1, -1, -1, -1, -1, -1, -1,\n  // \"class\"\n  (tt._class << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"co\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1377, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"con\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1404, 1620, -1, -1, -1, -1, -1, -1,\n  // \"cons\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1431, -1, -1, -1, -1, -1, -1,\n  // \"const\"\n  (tt._const << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1458, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1485, -1, -1, -1, -1, -1,\n  // \"constru\"\n  -1, -1, -1, 1512, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"construc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1539, -1, -1, -1, -1, -1, -1,\n  // \"construct\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1566, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constructo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1593, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"constructor\"\n  ContextualKeyword._constructor << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"cont\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 1647, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"conti\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1674, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"contin\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1701, -1, -1, -1, -1, -1,\n  // \"continu\"\n  -1, -1, -1, -1, -1, 1728, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"continue\"\n  (tt._continue << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"d\"\n  -1, -1, -1, -1, -1, 1782, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2349, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"de\"\n  -1, -1, 1809, 1971, -1, -1, 2106, -1, -1, -1, -1, -1, 2241, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"deb\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1836, -1, -1, -1, -1, -1,\n  // \"debu\"\n  -1, -1, -1, -1, -1, -1, -1, 1863, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debug\"\n  -1, -1, -1, -1, -1, -1, -1, 1890, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugg\"\n  -1, -1, -1, -1, -1, 1917, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugge\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1944, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"debugger\"\n  (tt._debugger << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"dec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1998, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"decl\"\n  -1, 2025, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"decla\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2052, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"declar\"\n  -1, -1, -1, -1, -1, 2079, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"declare\"\n  ContextualKeyword._declare << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"def\"\n  -1, 2133, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"defa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2160, -1, -1, -1, -1, -1,\n  // \"defau\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2187, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"defaul\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2214, -1, -1, -1, -1, -1, -1,\n  // \"default\"\n  (tt._default << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"del\"\n  -1, -1, -1, -1, -1, 2268, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"dele\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2295, -1, -1, -1, -1, -1, -1,\n  // \"delet\"\n  -1, -1, -1, -1, -1, 2322, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"delete\"\n  (tt._delete << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"do\"\n  (tt._do << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"e\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2403, -1, 2484, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2565, -1, -1,\n  // \"el\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2430, -1, -1, -1, -1, -1, -1, -1,\n  // \"els\"\n  -1, -1, -1, -1, -1, 2457, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"else\"\n  (tt._else << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"en\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2511, -1, -1, -1, -1, -1,\n  // \"enu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2538, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"enum\"\n  ContextualKeyword._enum << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ex\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2592, -1, -1, -1, 2727, -1, -1, -1, -1, -1, -1,\n  // \"exp\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2619, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"expo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2646, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"expor\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2673, -1, -1, -1, -1, -1, -1,\n  // \"export\"\n  (tt._export << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2700, -1, -1, -1, -1, -1, -1, -1,\n  // \"exports\"\n  ContextualKeyword._exports << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ext\"\n  -1, -1, -1, -1, -1, 2754, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"exte\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2781, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"exten\"\n  -1, -1, -1, -1, 2808, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"extend\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2835, -1, -1, -1, -1, -1, -1, -1,\n  // \"extends\"\n  (tt._extends << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"f\"\n  -1, 2889, -1, -1, -1, -1, -1, -1, -1, 2997, -1, -1, -1, -1, -1, 3159, -1, -1, 3213, -1, -1, 3294, -1, -1, -1, -1, -1,\n  // \"fa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2916, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fal\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2943, -1, -1, -1, -1, -1, -1, -1,\n  // \"fals\"\n  -1, -1, -1, -1, -1, 2970, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"false\"\n  (tt._false << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3024, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fin\"\n  -1, 3051, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fina\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3078, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"final\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3105, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"finall\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3132, -1,\n  // \"finally\"\n  (tt._finally << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3186, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"for\"\n  (tt._for << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3240, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"from\"\n  ContextualKeyword._from << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3321, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"fun\"\n  -1, -1, -1, 3348, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"func\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3375, -1, -1, -1, -1, -1, -1,\n  // \"funct\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 3402, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"functi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3429, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"functio\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3456, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"function\"\n  (tt._function << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"g\"\n  -1, -1, -1, -1, -1, 3510, -1, -1, -1, -1, -1, -1, 3564, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ge\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3537, -1, -1, -1, -1, -1, -1,\n  // \"get\"\n  ContextualKeyword._get << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"gl\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3591, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"glo\"\n  -1, -1, 3618, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"glob\"\n  -1, 3645, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"globa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3672, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"global\"\n  ContextualKeyword._global << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"i\"\n  -1, -1, -1, -1, -1, -1, 3726, -1, -1, -1, -1, -1, -1, 3753, 4077, -1, -1, -1, -1, 4590, -1, -1, -1, -1, -1, -1, -1,\n  // \"if\"\n  (tt._if << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"im\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3780, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"imp\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3807, -1, -1, 3996, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impl\"\n  -1, -1, -1, -1, -1, 3834, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"imple\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3861, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"implem\"\n  -1, -1, -1, -1, -1, 3888, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impleme\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3915, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"implemen\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3942, -1, -1, -1, -1, -1, -1,\n  // \"implement\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3969, -1, -1, -1, -1, -1, -1, -1,\n  // \"implements\"\n  ContextualKeyword._implements << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4023, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"impor\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4050, -1, -1, -1, -1, -1, -1,\n  // \"import\"\n  (tt._import << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"in\"\n  (tt._in << 1) + 1, -1, -1, -1, -1, -1, 4104, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4185, 4401, -1, -1, -1, -1, -1, -1,\n  // \"inf\"\n  -1, -1, -1, -1, -1, 4131, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"infe\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4158, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"infer\"\n  ContextualKeyword._infer << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ins\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4212, -1, -1, -1, -1, -1, -1,\n  // \"inst\"\n  -1, 4239, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"insta\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4266, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instan\"\n  -1, -1, -1, 4293, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanc\"\n  -1, -1, -1, -1, -1, 4320, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instance\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4347, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanceo\"\n  -1, -1, -1, -1, -1, -1, 4374, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"instanceof\"\n  (tt._instanceof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"int\"\n  -1, -1, -1, -1, -1, 4428, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"inte\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4455, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"inter\"\n  -1, -1, -1, -1, -1, -1, 4482, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interf\"\n  -1, 4509, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interfa\"\n  -1, -1, -1, 4536, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interfac\"\n  -1, -1, -1, -1, -1, 4563, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"interface\"\n  ContextualKeyword._interface << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"is\"\n  ContextualKeyword._is << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"k\"\n  -1, -1, -1, -1, -1, 4644, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ke\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4671, -1,\n  // \"key\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4698, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"keyo\"\n  -1, -1, -1, -1, -1, -1, 4725, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"keyof\"\n  ContextualKeyword._keyof << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"l\"\n  -1, -1, -1, -1, -1, 4779, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"le\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4806, -1, -1, -1, -1, -1, -1,\n  // \"let\"\n  (tt._let << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"m\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4860, -1, -1, -1, -1, -1, 4995, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4887, -1, -1,\n  // \"mix\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 4914, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4941, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixin\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4968, -1, -1, -1, -1, -1, -1, -1,\n  // \"mixins\"\n  ContextualKeyword._mixins << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mo\"\n  -1, -1, -1, -1, 5022, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"mod\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5049, -1, -1, -1, -1, -1,\n  // \"modu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5076, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"modul\"\n  -1, -1, -1, -1, -1, 5103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"module\"\n  ContextualKeyword._module << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"n\"\n  -1, 5157, -1, -1, -1, 5373, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5427, -1, -1, -1, -1, -1,\n  // \"na\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5184, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nam\"\n  -1, -1, -1, -1, -1, 5211, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"name\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5238, -1, -1, -1, -1, -1, -1, -1,\n  // \"names\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5265, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namesp\"\n  -1, 5292, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespa\"\n  -1, -1, -1, 5319, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespac\"\n  -1, -1, -1, -1, -1, 5346, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"namespace\"\n  ContextualKeyword._namespace << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ne\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5400, -1, -1, -1,\n  // \"new\"\n  (tt._new << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5454, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"nul\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5481, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"null\"\n  (tt._null << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"o\"\n  -1, -1, -1, -1, -1, -1, 5535, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5562, -1, -1, -1, -1, 5697, 5751, -1, -1, -1, -1,\n  // \"of\"\n  ContextualKeyword._of << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"op\"\n  -1, 5589, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5616, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opaq\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5643, -1, -1, -1, -1, -1,\n  // \"opaqu\"\n  -1, -1, -1, -1, -1, 5670, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"opaque\"\n  ContextualKeyword._opaque << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ou\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5724, -1, -1, -1, -1, -1, -1,\n  // \"out\"\n  ContextualKeyword._out << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ov\"\n  -1, -1, -1, -1, -1, 5778, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ove\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5805, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"over\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5832, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5859, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overri\"\n  -1, -1, -1, -1, 5886, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"overrid\"\n  -1, -1, -1, -1, -1, 5913, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"override\"\n  ContextualKeyword._override << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"p\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5967, -1, -1, 6345, -1, -1, -1, -1, -1,\n  // \"pr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 5994, -1, -1, -1, -1, -1, 6129, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pri\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6021, -1, -1, -1, -1,\n  // \"priv\"\n  -1, 6048, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"priva\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6075, -1, -1, -1, -1, -1, -1,\n  // \"privat\"\n  -1, -1, -1, -1, -1, 6102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"private\"\n  ContextualKeyword._private << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6156, -1, -1, -1, -1, -1, -1,\n  // \"prot\"\n  -1, -1, -1, -1, -1, 6183, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6318, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"prote\"\n  -1, -1, -1, 6210, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protec\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6237, -1, -1, -1, -1, -1, -1,\n  // \"protect\"\n  -1, -1, -1, -1, -1, 6264, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protecte\"\n  -1, -1, -1, -1, 6291, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"protected\"\n  ContextualKeyword._protected << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"proto\"\n  ContextualKeyword._proto << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pu\"\n  -1, -1, 6372, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"pub\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6399, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"publ\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6426, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"publi\"\n  -1, -1, -1, 6453, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"public\"\n  ContextualKeyword._public << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"r\"\n  -1, -1, -1, -1, -1, 6507, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"re\"\n  -1, 6534, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6696, -1, -1, 6831, -1, -1, -1, -1, -1, -1,\n  // \"rea\"\n  -1, -1, -1, -1, 6561, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"read\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6588, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"reado\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6615, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"readon\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6642, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"readonl\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6669, -1,\n  // \"readonly\"\n  ContextualKeyword._readonly << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"req\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6723, -1, -1, -1, -1, -1,\n  // \"requ\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 6750, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"requi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6777, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"requir\"\n  -1, -1, -1, -1, -1, 6804, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"require\"\n  ContextualKeyword._require << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ret\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6858, -1, -1, -1, -1, -1,\n  // \"retu\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6885, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"retur\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6912, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"return\"\n  (tt._return << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"s\"\n  -1, 6966, -1, -1, -1, 7182, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7236, 7371, -1, 7479, -1, 7614, -1,\n  // \"sa\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6993, -1, -1, -1, -1, -1, -1,\n  // \"sat\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7020, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sati\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7047, -1, -1, -1, -1, -1, -1, -1,\n  // \"satis\"\n  -1, -1, -1, -1, -1, -1, 7074, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"satisf\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7101, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"satisfi\"\n  -1, -1, -1, -1, -1, 7128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"satisfie\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7155, -1, -1, -1, -1, -1, -1, -1,\n  // \"satisfies\"\n  ContextualKeyword._satisfies << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"se\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7209, -1, -1, -1, -1, -1, -1,\n  // \"set\"\n  ContextualKeyword._set << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"st\"\n  -1, 7263, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sta\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7290, -1, -1, -1, -1, -1, -1,\n  // \"stat\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"stati\"\n  -1, -1, -1, 7344, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"static\"\n  ContextualKeyword._static << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"su\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7398, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sup\"\n  -1, -1, -1, -1, -1, 7425, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"supe\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7452, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"super\"\n  (tt._super << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sw\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7506, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"swi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7533, -1, -1, -1, -1, -1, -1,\n  // \"swit\"\n  -1, -1, -1, 7560, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"switc\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7587, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"switch\"\n  (tt._switch << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sy\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7641, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"sym\"\n  -1, -1, 7668, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"symb\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7695, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"symbo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7722, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"symbol\"\n  ContextualKeyword._symbol << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"t\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 7776, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7938, -1, -1, -1, -1, -1, -1, 8046, -1,\n  // \"th\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 7803, -1, -1, -1, -1, -1, -1, -1, -1, 7857, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7830, -1, -1, -1, -1, -1, -1, -1,\n  // \"this\"\n  (tt._this << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7884, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"thro\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7911, -1, -1, -1,\n  // \"throw\"\n  (tt._throw << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"tr\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7965, -1, -1, -1, 8019, -1,\n  // \"tru\"\n  -1, -1, -1, -1, -1, 7992, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"true\"\n  (tt._true << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"try\"\n  (tt._try << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"ty\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8073, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typ\"\n  -1, -1, -1, -1, -1, 8100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"type\"\n  ContextualKeyword._type << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8127, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typeo\"\n  -1, -1, -1, -1, -1, -1, 8154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"typeof\"\n  (tt._typeof << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"u\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8208, -1, -1, -1, -1, 8343, -1, -1, -1, -1, -1, -1, -1,\n  // \"un\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"uni\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8262, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"uniq\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8289, -1, -1, -1, -1, -1,\n  // \"uniqu\"\n  -1, -1, -1, -1, -1, 8316, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"unique\"\n  ContextualKeyword._unique << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"us\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8370, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"usi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8397, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"usin\"\n  -1, -1, -1, -1, -1, -1, -1, 8424, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"using\"\n  ContextualKeyword._using << 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"v\"\n  -1, 8478, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8532, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"va\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8505, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"var\"\n  (tt._var << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"vo\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8559, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"voi\"\n  -1, -1, -1, -1, 8586, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"void\"\n  (tt._void << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"w\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 8640, 8748, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"wh\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8667, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"whi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8694, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"whil\"\n  -1, -1, -1, -1, -1, 8721, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"while\"\n  (tt._while << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"wi\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8775, -1, -1, -1, -1, -1, -1,\n  // \"wit\"\n  -1, -1, -1, -1, -1, -1, -1, -1, 8802, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"with\"\n  (tt._with << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"y\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, 8856, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yi\"\n  -1, -1, -1, -1, -1, 8883, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yie\"\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8910, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yiel\"\n  -1, -1, -1, -1, 8937, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n  // \"yield\"\n  (tt._yield << 1) + 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n]);\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10514, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/tokenizer/readWord.js"],"sourcesContent":["import {input, state} from \"../traverser/base\";\nimport {charCodes} from \"../util/charcodes\";\nimport {IS_IDENTIFIER_CHAR} from \"../util/identifier\";\nimport {finishToken} from \"./index\";\nimport {READ_WORD_TREE} from \"./readWordTree\";\nimport {TokenType as tt} from \"./types\";\n\n/**\n * Read an identifier, producing either a name token or matching on one of the existing keywords.\n * For performance, we pre-generate big decision tree that we traverse. Each node represents a\n * prefix and has 27 values, where the first value is the token or contextual token, if any (-1 if\n * not), and the other 26 values are the transitions to other nodes, or -1 to stop.\n */\nexport default function readWord() {\n  let treePos = 0;\n  let code = 0;\n  let pos = state.pos;\n  while (pos < input.length) {\n    code = input.charCodeAt(pos);\n    if (code < charCodes.lowercaseA || code > charCodes.lowercaseZ) {\n      break;\n    }\n    const next = READ_WORD_TREE[treePos + (code - charCodes.lowercaseA) + 1];\n    if (next === -1) {\n      break;\n    } else {\n      treePos = next;\n      pos++;\n    }\n  }\n\n  const keywordValue = READ_WORD_TREE[treePos];\n  if (keywordValue > -1 && !IS_IDENTIFIER_CHAR[code]) {\n    state.pos = pos;\n    if (keywordValue & 1) {\n      finishToken(keywordValue >>> 1);\n    } else {\n      finishToken(tt.name, keywordValue >>> 1);\n    }\n    return;\n  }\n\n  while (pos < input.length) {\n    const ch = input.charCodeAt(pos);\n    if (IS_IDENTIFIER_CHAR[ch]) {\n      pos++;\n    } else if (ch === charCodes.backslash) {\n      // \\u\n      pos += 2;\n      if (input.charCodeAt(pos) === charCodes.leftCurlyBrace) {\n        while (pos < input.length && input.charCodeAt(pos) !== charCodes.rightCurlyBrace) {\n          pos++;\n        }\n        pos++;\n      }\n    } else if (ch === charCodes.atSign && input.charCodeAt(pos + 1) === charCodes.atSign) {\n      pos += 2;\n    } else {\n      break;\n    }\n  }\n  state.pos = pos;\n  finishToken(tt.name);\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQe,SAAS;IACtB,IAAI,UAAU;IACd,IAAI,OAAO;IACX,IAAI,MAAM,wMAAK,CAAC,GAAG;IACnB,MAAO,MAAM,wMAAK,CAAC,MAAM,CAAE;QACzB,OAAO,wMAAK,CAAC,UAAU,CAAC;QACxB,IAAI,OAAO,4MAAS,CAAC,UAAU,IAAI,OAAO,4MAAS,CAAC,UAAU,EAAE;YAC9D;QACF;QACA,MAAM,OAAO,yNAAc,CAAC,UAAU,CAAC,OAAO,4MAAS,CAAC,UAAU,IAAI,EAAE;QACxE,IAAI,SAAS,CAAC,GAAG;YACf;QACF,OAAO;YACL,UAAU;YACV;QACF;IACF;IAEA,MAAM,eAAe,yNAAc,CAAC,QAAQ;IAC5C,IAAI,eAAe,CAAC,KAAK,CAAC,sNAAkB,CAAC,KAAK,EAAE;QAClD,wMAAK,CAAC,GAAG,GAAG;QACZ,IAAI,eAAe,GAAG;YACpB,IAAA,+MAAW,EAAC,iBAAiB;QAC/B,OAAO;YACL,IAAA,+MAAW,EAAC,6MAAE,CAAC,IAAI,EAAE,iBAAiB;QACxC;QACA;IACF;IAEA,MAAO,MAAM,wMAAK,CAAC,MAAM,CAAE;QACzB,MAAM,KAAK,wMAAK,CAAC,UAAU,CAAC;QAC5B,IAAI,sNAAkB,CAAC,GAAG,EAAE;YAC1B;QACF,OAAO,IAAI,OAAO,4MAAS,CAAC,SAAS,EAAE;YACrC,KAAK;YACL,OAAO;YACP,IAAI,wMAAK,CAAC,UAAU,CAAC,SAAS,4MAAS,CAAC,cAAc,EAAE;gBACtD,MAAO,MAAM,wMAAK,CAAC,MAAM,IAAI,wMAAK,CAAC,UAAU,CAAC,SAAS,4MAAS,CAAC,eAAe,CAAE;oBAChF;gBACF;gBACA;YACF;QACF,OAAO,IAAI,OAAO,4MAAS,CAAC,MAAM,IAAI,wMAAK,CAAC,UAAU,CAAC,MAAM,OAAO,4MAAS,CAAC,MAAM,EAAE;YACpF,OAAO;QACT,OAAO;YACL;QACF;IACF;IACA,wMAAK,CAAC,GAAG,GAAG;IACZ,IAAA,+MAAW,EAAC,6MAAE,CAAC,IAAI;AACrB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 10583, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/tokenizer/index.js"],"sourcesContent":["/* eslint max-len: 0 */\n\nimport {input, isFlowEnabled, state} from \"../traverser/base\";\nimport {unexpected} from \"../traverser/util\";\nimport {charCodes} from \"../util/charcodes\";\nimport {IS_IDENTIFIER_CHAR, IS_IDENTIFIER_START} from \"../util/identifier\";\nimport {IS_WHITESPACE, skipWhiteSpace} from \"../util/whitespace\";\nimport {ContextualKeyword} from \"./keywords\";\nimport readWord from \"./readWord\";\nimport { TokenType as tt} from \"./types\";\n\nexport var IdentifierRole; (function (IdentifierRole) {\n  const Access = 0; IdentifierRole[IdentifierRole[\"Access\"] = Access] = \"Access\";\n  const ExportAccess = Access + 1; IdentifierRole[IdentifierRole[\"ExportAccess\"] = ExportAccess] = \"ExportAccess\";\n  const TopLevelDeclaration = ExportAccess + 1; IdentifierRole[IdentifierRole[\"TopLevelDeclaration\"] = TopLevelDeclaration] = \"TopLevelDeclaration\";\n  const FunctionScopedDeclaration = TopLevelDeclaration + 1; IdentifierRole[IdentifierRole[\"FunctionScopedDeclaration\"] = FunctionScopedDeclaration] = \"FunctionScopedDeclaration\";\n  const BlockScopedDeclaration = FunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"BlockScopedDeclaration\"] = BlockScopedDeclaration] = \"BlockScopedDeclaration\";\n  const ObjectShorthandTopLevelDeclaration = BlockScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandTopLevelDeclaration\"] = ObjectShorthandTopLevelDeclaration] = \"ObjectShorthandTopLevelDeclaration\";\n  const ObjectShorthandFunctionScopedDeclaration = ObjectShorthandTopLevelDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandFunctionScopedDeclaration\"] = ObjectShorthandFunctionScopedDeclaration] = \"ObjectShorthandFunctionScopedDeclaration\";\n  const ObjectShorthandBlockScopedDeclaration = ObjectShorthandFunctionScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthandBlockScopedDeclaration\"] = ObjectShorthandBlockScopedDeclaration] = \"ObjectShorthandBlockScopedDeclaration\";\n  const ObjectShorthand = ObjectShorthandBlockScopedDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectShorthand\"] = ObjectShorthand] = \"ObjectShorthand\";\n  // Any identifier bound in an import statement, e.g. both A and b from\n  // `import A, * as b from 'A';`\n  const ImportDeclaration = ObjectShorthand + 1; IdentifierRole[IdentifierRole[\"ImportDeclaration\"] = ImportDeclaration] = \"ImportDeclaration\";\n  const ObjectKey = ImportDeclaration + 1; IdentifierRole[IdentifierRole[\"ObjectKey\"] = ObjectKey] = \"ObjectKey\";\n  // The `foo` in `import {foo as bar} from \"./abc\";`.\n  const ImportAccess = ObjectKey + 1; IdentifierRole[IdentifierRole[\"ImportAccess\"] = ImportAccess] = \"ImportAccess\";\n})(IdentifierRole || (IdentifierRole = {}));\n\n/**\n * Extra information on jsxTagStart tokens, used to determine which of the three\n * jsx functions are called in the automatic transform.\n */\nexport var JSXRole; (function (JSXRole) {\n  // The element is self-closing or has a body that resolves to empty. We\n  // shouldn't emit children at all in this case.\n  const NoChildren = 0; JSXRole[JSXRole[\"NoChildren\"] = NoChildren] = \"NoChildren\";\n  // The element has a single explicit child, which might still be an arbitrary\n  // expression like an array. We should emit that expression as the children.\n  const OneChild = NoChildren + 1; JSXRole[JSXRole[\"OneChild\"] = OneChild] = \"OneChild\";\n  // The element has at least two explicitly-specified children or has spread\n  // children, so child positions are assumed to be \"static\". We should wrap\n  // these children in an array.\n  const StaticChildren = OneChild + 1; JSXRole[JSXRole[\"StaticChildren\"] = StaticChildren] = \"StaticChildren\";\n  // The element has a prop named \"key\" after a prop spread, so we should fall\n  // back to the createElement function.\n  const KeyAfterPropSpread = StaticChildren + 1; JSXRole[JSXRole[\"KeyAfterPropSpread\"] = KeyAfterPropSpread] = \"KeyAfterPropSpread\";\n})(JSXRole || (JSXRole = {}));\n\nexport function isDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n}\n\nexport function isNonTopLevelDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n}\n\nexport function isTopLevelDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ImportDeclaration\n  );\n}\n\nexport function isBlockScopedDeclaration(token) {\n  const role = token.identifierRole;\n  // Treat top-level declarations as block scope since the distinction doesn't matter here.\n  return (\n    role === IdentifierRole.TopLevelDeclaration ||\n    role === IdentifierRole.BlockScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    role === IdentifierRole.ObjectShorthandBlockScopedDeclaration\n  );\n}\n\nexport function isFunctionScopedDeclaration(token) {\n  const role = token.identifierRole;\n  return (\n    role === IdentifierRole.FunctionScopedDeclaration ||\n    role === IdentifierRole.ObjectShorthandFunctionScopedDeclaration\n  );\n}\n\nexport function isObjectShorthandDeclaration(token) {\n  return (\n    token.identifierRole === IdentifierRole.ObjectShorthandTopLevelDeclaration ||\n    token.identifierRole === IdentifierRole.ObjectShorthandBlockScopedDeclaration ||\n    token.identifierRole === IdentifierRole.ObjectShorthandFunctionScopedDeclaration\n  );\n}\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\nexport class Token {\n  constructor() {\n    this.type = state.type;\n    this.contextualKeyword = state.contextualKeyword;\n    this.start = state.start;\n    this.end = state.end;\n    this.scopeDepth = state.scopeDepth;\n    this.isType = state.isType;\n    this.identifierRole = null;\n    this.jsxRole = null;\n    this.shadowsGlobal = false;\n    this.isAsyncOperation = false;\n    this.contextId = null;\n    this.rhsEndIndex = null;\n    this.isExpression = false;\n    this.numNullishCoalesceStarts = 0;\n    this.numNullishCoalesceEnds = 0;\n    this.isOptionalChainStart = false;\n    this.isOptionalChainEnd = false;\n    this.subscriptStartIndex = null;\n    this.nullishStartIndex = null;\n  }\n\n  \n  \n  \n  \n  \n  \n  \n  \n  // Initially false for all tokens, then may be computed in a follow-up step that does scope\n  // analysis.\n  \n  // Initially false for all tokens, but may be set during transform to mark it as containing an\n  // await operation.\n  \n  \n  // For assignments, the index of the RHS. For export tokens, the end of the export.\n  \n  // For class tokens, records if the class is a class expression or a class statement.\n  \n  // Number of times to insert a `nullishCoalesce(` snippet before this token.\n  \n  // Number of times to insert a `)` snippet after this token.\n  \n  // If true, insert an `optionalChain([` snippet before this token.\n  \n  // If true, insert a `])` snippet after this token.\n  \n  // Tag for `.`, `?.`, `[`, `?.[`, `(`, and `?.(` to denote the \"root\" token for this\n  // subscript chain. This can be used to determine if this chain is an optional chain.\n  \n  // Tag for `??` operators to denote the root token for this nullish coalescing call.\n  \n}\n\n// ## Tokenizer\n\n// Move to the next token\nexport function next() {\n  state.tokens.push(new Token());\n  nextToken();\n}\n\n// Call instead of next when inside a template, since that needs to be handled differently.\nexport function nextTemplateToken() {\n  state.tokens.push(new Token());\n  state.start = state.pos;\n  readTmplToken();\n}\n\n// The tokenizer never parses regexes by default. Instead, the parser is responsible for\n// instructing it to parse a regex when we see a slash at the start of an expression.\nexport function retokenizeSlashAsRegex() {\n  if (state.type === tt.assign) {\n    --state.pos;\n  }\n  readRegexp();\n}\n\nexport function pushTypeContext(existingTokensInType) {\n  for (let i = state.tokens.length - existingTokensInType; i < state.tokens.length; i++) {\n    state.tokens[i].isType = true;\n  }\n  const oldIsType = state.isType;\n  state.isType = true;\n  return oldIsType;\n}\n\nexport function popTypeContext(oldIsType) {\n  state.isType = oldIsType;\n}\n\nexport function eat(type) {\n  if (match(type)) {\n    next();\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function eatTypeToken(tokenType) {\n  const oldIsType = state.isType;\n  state.isType = true;\n  eat(tokenType);\n  state.isType = oldIsType;\n}\n\nexport function match(type) {\n  return state.type === type;\n}\n\nexport function lookaheadType() {\n  const snapshot = state.snapshot();\n  next();\n  const type = state.type;\n  state.restoreFromSnapshot(snapshot);\n  return type;\n}\n\nexport class TypeAndKeyword {\n  \n  \n  constructor(type, contextualKeyword) {\n    this.type = type;\n    this.contextualKeyword = contextualKeyword;\n  }\n}\n\nexport function lookaheadTypeAndKeyword() {\n  const snapshot = state.snapshot();\n  next();\n  const type = state.type;\n  const contextualKeyword = state.contextualKeyword;\n  state.restoreFromSnapshot(snapshot);\n  return new TypeAndKeyword(type, contextualKeyword);\n}\n\nexport function nextTokenStart() {\n  return nextTokenStartSince(state.pos);\n}\n\nexport function nextTokenStartSince(pos) {\n  skipWhiteSpace.lastIndex = pos;\n  const skip = skipWhiteSpace.exec(input);\n  return pos + skip[0].length;\n}\n\nexport function lookaheadCharCode() {\n  return input.charCodeAt(nextTokenStart());\n}\n\n// Read a single token, updating the parser object's token-related\n// properties.\nexport function nextToken() {\n  skipSpace();\n  state.start = state.pos;\n  if (state.pos >= input.length) {\n    const tokens = state.tokens;\n    // We normally run past the end a bit, but if we're way past the end, avoid an infinite loop.\n    // Also check the token positions rather than the types since sometimes we rewrite the token\n    // type to something else.\n    if (\n      tokens.length >= 2 &&\n      tokens[tokens.length - 1].start >= input.length &&\n      tokens[tokens.length - 2].start >= input.length\n    ) {\n      unexpected(\"Unexpectedly reached the end of input.\");\n    }\n    finishToken(tt.eof);\n    return;\n  }\n  readToken(input.charCodeAt(state.pos));\n}\n\nfunction readToken(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (\n    IS_IDENTIFIER_START[code] ||\n    code === charCodes.backslash ||\n    (code === charCodes.atSign && input.charCodeAt(state.pos + 1) === charCodes.atSign)\n  ) {\n    readWord();\n  } else {\n    getTokenFromCode(code);\n  }\n}\n\nfunction skipBlockComment() {\n  while (\n    input.charCodeAt(state.pos) !== charCodes.asterisk ||\n    input.charCodeAt(state.pos + 1) !== charCodes.slash\n  ) {\n    state.pos++;\n    if (state.pos > input.length) {\n      unexpected(\"Unterminated comment\", state.pos - 2);\n      return;\n    }\n  }\n  state.pos += 2;\n}\n\nexport function skipLineComment(startSkip) {\n  let ch = input.charCodeAt((state.pos += startSkip));\n  if (state.pos < input.length) {\n    while (\n      ch !== charCodes.lineFeed &&\n      ch !== charCodes.carriageReturn &&\n      ch !== charCodes.lineSeparator &&\n      ch !== charCodes.paragraphSeparator &&\n      ++state.pos < input.length\n    ) {\n      ch = input.charCodeAt(state.pos);\n    }\n  }\n}\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments.\nexport function skipSpace() {\n  while (state.pos < input.length) {\n    const ch = input.charCodeAt(state.pos);\n    switch (ch) {\n      case charCodes.carriageReturn:\n        if (input.charCodeAt(state.pos + 1) === charCodes.lineFeed) {\n          ++state.pos;\n        }\n\n      case charCodes.lineFeed:\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        ++state.pos;\n        break;\n\n      case charCodes.slash:\n        switch (input.charCodeAt(state.pos + 1)) {\n          case charCodes.asterisk:\n            state.pos += 2;\n            skipBlockComment();\n            break;\n\n          case charCodes.slash:\n            skipLineComment(2);\n            break;\n\n          default:\n            return;\n        }\n        break;\n\n      default:\n        if (IS_WHITESPACE[ch]) {\n          ++state.pos;\n        } else {\n          return;\n        }\n    }\n  }\n}\n\n// Called at the end of every token. Sets various fields, and skips the space after the token, so\n// that the next one's `start` will point at the right position.\nexport function finishToken(\n  type,\n  contextualKeyword = ContextualKeyword.NONE,\n) {\n  state.end = state.pos;\n  state.type = type;\n  state.contextualKeyword = contextualKeyword;\n}\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\nfunction readToken_dot() {\n  const nextChar = input.charCodeAt(state.pos + 1);\n  if (nextChar >= charCodes.digit0 && nextChar <= charCodes.digit9) {\n    readNumber(true);\n    return;\n  }\n\n  if (nextChar === charCodes.dot && input.charCodeAt(state.pos + 2) === charCodes.dot) {\n    state.pos += 3;\n    finishToken(tt.ellipsis);\n  } else {\n    ++state.pos;\n    finishToken(tt.dot);\n  }\n}\n\nfunction readToken_slash() {\n  const nextChar = input.charCodeAt(state.pos + 1);\n  if (nextChar === charCodes.equalsTo) {\n    finishOp(tt.assign, 2);\n  } else {\n    finishOp(tt.slash, 1);\n  }\n}\n\nfunction readToken_mult_modulo(code) {\n  // '%*'\n  let tokenType = code === charCodes.asterisk ? tt.star : tt.modulo;\n  let width = 1;\n  let nextChar = input.charCodeAt(state.pos + 1);\n\n  // Exponentiation operator **\n  if (code === charCodes.asterisk && nextChar === charCodes.asterisk) {\n    width++;\n    nextChar = input.charCodeAt(state.pos + 2);\n    tokenType = tt.exponent;\n  }\n\n  // Match *= or %=, disallowing *=> which can be valid in flow.\n  if (\n    nextChar === charCodes.equalsTo &&\n    input.charCodeAt(state.pos + 2) !== charCodes.greaterThan\n  ) {\n    width++;\n    tokenType = tt.assign;\n  }\n\n  finishOp(tokenType, width);\n}\n\nfunction readToken_pipe_amp(code) {\n  // '|&'\n  const nextChar = input.charCodeAt(state.pos + 1);\n\n  if (nextChar === code) {\n    if (input.charCodeAt(state.pos + 2) === charCodes.equalsTo) {\n      // ||= or &&=\n      finishOp(tt.assign, 3);\n    } else {\n      // || or &&\n      finishOp(code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND, 2);\n    }\n    return;\n  }\n\n  if (code === charCodes.verticalBar) {\n    // '|>'\n    if (nextChar === charCodes.greaterThan) {\n      finishOp(tt.pipeline, 2);\n      return;\n    } else if (nextChar === charCodes.rightCurlyBrace && isFlowEnabled) {\n      // '|}'\n      finishOp(tt.braceBarR, 2);\n      return;\n    }\n  }\n\n  if (nextChar === charCodes.equalsTo) {\n    finishOp(tt.assign, 2);\n    return;\n  }\n\n  finishOp(code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND, 1);\n}\n\nfunction readToken_caret() {\n  // '^'\n  const nextChar = input.charCodeAt(state.pos + 1);\n  if (nextChar === charCodes.equalsTo) {\n    finishOp(tt.assign, 2);\n  } else {\n    finishOp(tt.bitwiseXOR, 1);\n  }\n}\n\nfunction readToken_plus_min(code) {\n  // '+-'\n  const nextChar = input.charCodeAt(state.pos + 1);\n\n  if (nextChar === code) {\n    // Tentatively call this a prefix operator, but it might be changed to postfix later.\n    finishOp(tt.preIncDec, 2);\n    return;\n  }\n\n  if (nextChar === charCodes.equalsTo) {\n    finishOp(tt.assign, 2);\n  } else if (code === charCodes.plusSign) {\n    finishOp(tt.plus, 1);\n  } else {\n    finishOp(tt.minus, 1);\n  }\n}\n\nfunction readToken_lt() {\n  const nextChar = input.charCodeAt(state.pos + 1);\n\n  if (nextChar === charCodes.lessThan) {\n    if (input.charCodeAt(state.pos + 2) === charCodes.equalsTo) {\n      finishOp(tt.assign, 3);\n      return;\n    }\n    // We see <<, but need to be really careful about whether to treat it as a\n    // true left-shift or as two < tokens.\n    if (state.isType) {\n      // Within a type, << might come up in a snippet like `Array<<T>() => void>`,\n      // so treat it as two < tokens. Importantly, this should only override <<\n      // rather than other tokens like <= . If we treated <= as < in a type\n      // context, then the snippet `a as T <= 1` would incorrectly start parsing\n      // a type argument on T. We don't need to worry about `a as T << 1`\n      // because TypeScript disallows that syntax.\n      finishOp(tt.lessThan, 1);\n    } else {\n      // Outside a type, this might be a true left-shift operator, or it might\n      // still be two open-type-arg tokens, such as in `f<<T>() => void>()`. We\n      // look at the token while considering the `f`, so we don't yet know that\n      // we're in a type context. In this case, we initially tokenize as a\n      // left-shift and correct after-the-fact as necessary in\n      // tsParseTypeArgumentsWithPossibleBitshift .\n      finishOp(tt.bitShiftL, 2);\n    }\n    return;\n  }\n\n  if (nextChar === charCodes.equalsTo) {\n    // <=\n    finishOp(tt.relationalOrEqual, 2);\n  } else {\n    finishOp(tt.lessThan, 1);\n  }\n}\n\nfunction readToken_gt() {\n  if (state.isType) {\n    // Avoid right-shift for things like `Array<Array<string>>` and\n    // greater-than-or-equal for things like `const a: Array<number>=[];`.\n    finishOp(tt.greaterThan, 1);\n    return;\n  }\n\n  const nextChar = input.charCodeAt(state.pos + 1);\n\n  if (nextChar === charCodes.greaterThan) {\n    const size = input.charCodeAt(state.pos + 2) === charCodes.greaterThan ? 3 : 2;\n    if (input.charCodeAt(state.pos + size) === charCodes.equalsTo) {\n      finishOp(tt.assign, size + 1);\n      return;\n    }\n    finishOp(tt.bitShiftR, size);\n    return;\n  }\n\n  if (nextChar === charCodes.equalsTo) {\n    // >=\n    finishOp(tt.relationalOrEqual, 2);\n  } else {\n    finishOp(tt.greaterThan, 1);\n  }\n}\n\n/**\n * Reinterpret a possible > token when transitioning from a type to a non-type\n * context.\n *\n * This comes up in two situations where >= needs to be treated as one token:\n * - After an `as` expression, like in the code `a as T >= 1`.\n * - In a type argument in an expression context, e.g. `f(a < b, c >= d)`, we\n *   need to see the token as >= so that we get an error and backtrack to\n *   normal expression parsing.\n *\n * Other situations require >= to be seen as two tokens, e.g.\n * `const x: Array<T>=[];`, so it's important to treat > as its own token in\n * typical type parsing situations.\n */\nexport function rescan_gt() {\n  if (state.type === tt.greaterThan) {\n    state.pos -= 1;\n    readToken_gt();\n  }\n}\n\nfunction readToken_eq_excl(code) {\n  // '=!'\n  const nextChar = input.charCodeAt(state.pos + 1);\n  if (nextChar === charCodes.equalsTo) {\n    finishOp(tt.equality, input.charCodeAt(state.pos + 2) === charCodes.equalsTo ? 3 : 2);\n    return;\n  }\n  if (code === charCodes.equalsTo && nextChar === charCodes.greaterThan) {\n    // '=>'\n    state.pos += 2;\n    finishToken(tt.arrow);\n    return;\n  }\n  finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n}\n\nfunction readToken_question() {\n  // '?'\n  const nextChar = input.charCodeAt(state.pos + 1);\n  const nextChar2 = input.charCodeAt(state.pos + 2);\n  if (\n    nextChar === charCodes.questionMark &&\n    // In Flow (but not TypeScript), ??string is a valid type that should be\n    // tokenized as two individual ? tokens.\n    !(isFlowEnabled && state.isType)\n  ) {\n    if (nextChar2 === charCodes.equalsTo) {\n      // '??='\n      finishOp(tt.assign, 3);\n    } else {\n      // '??'\n      finishOp(tt.nullishCoalescing, 2);\n    }\n  } else if (\n    nextChar === charCodes.dot &&\n    !(nextChar2 >= charCodes.digit0 && nextChar2 <= charCodes.digit9)\n  ) {\n    // '.' not followed by a number\n    state.pos += 2;\n    finishToken(tt.questionDot);\n  } else {\n    ++state.pos;\n    finishToken(tt.question);\n  }\n}\n\nexport function getTokenFromCode(code) {\n  switch (code) {\n    case charCodes.numberSign:\n      ++state.pos;\n      finishToken(tt.hash);\n      return;\n\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n\n    case charCodes.dot:\n      readToken_dot();\n      return;\n\n    // Punctuation tokens.\n    case charCodes.leftParenthesis:\n      ++state.pos;\n      finishToken(tt.parenL);\n      return;\n    case charCodes.rightParenthesis:\n      ++state.pos;\n      finishToken(tt.parenR);\n      return;\n    case charCodes.semicolon:\n      ++state.pos;\n      finishToken(tt.semi);\n      return;\n    case charCodes.comma:\n      ++state.pos;\n      finishToken(tt.comma);\n      return;\n    case charCodes.leftSquareBracket:\n      ++state.pos;\n      finishToken(tt.bracketL);\n      return;\n    case charCodes.rightSquareBracket:\n      ++state.pos;\n      finishToken(tt.bracketR);\n      return;\n\n    case charCodes.leftCurlyBrace:\n      if (isFlowEnabled && input.charCodeAt(state.pos + 1) === charCodes.verticalBar) {\n        finishOp(tt.braceBarL, 2);\n      } else {\n        ++state.pos;\n        finishToken(tt.braceL);\n      }\n      return;\n\n    case charCodes.rightCurlyBrace:\n      ++state.pos;\n      finishToken(tt.braceR);\n      return;\n\n    case charCodes.colon:\n      if (input.charCodeAt(state.pos + 1) === charCodes.colon) {\n        finishOp(tt.doubleColon, 2);\n      } else {\n        ++state.pos;\n        finishToken(tt.colon);\n      }\n      return;\n\n    case charCodes.questionMark:\n      readToken_question();\n      return;\n    case charCodes.atSign:\n      ++state.pos;\n      finishToken(tt.at);\n      return;\n\n    case charCodes.graveAccent:\n      ++state.pos;\n      finishToken(tt.backQuote);\n      return;\n\n    case charCodes.digit0: {\n      const nextChar = input.charCodeAt(state.pos + 1);\n      // '0x', '0X', '0o', '0O', '0b', '0B'\n      if (\n        nextChar === charCodes.lowercaseX ||\n        nextChar === charCodes.uppercaseX ||\n        nextChar === charCodes.lowercaseO ||\n        nextChar === charCodes.uppercaseO ||\n        nextChar === charCodes.lowercaseB ||\n        nextChar === charCodes.uppercaseB\n      ) {\n        readRadixNumber();\n        return;\n      }\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n    case charCodes.digit1:\n    case charCodes.digit2:\n    case charCodes.digit3:\n    case charCodes.digit4:\n    case charCodes.digit5:\n    case charCodes.digit6:\n    case charCodes.digit7:\n    case charCodes.digit8:\n    case charCodes.digit9:\n      readNumber(false);\n      return;\n\n    // Quotes produce strings.\n    case charCodes.quotationMark:\n    case charCodes.apostrophe:\n      readString(code);\n      return;\n\n    // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n    case charCodes.slash:\n      readToken_slash();\n      return;\n\n    case charCodes.percentSign:\n    case charCodes.asterisk:\n      readToken_mult_modulo(code);\n      return;\n\n    case charCodes.verticalBar:\n    case charCodes.ampersand:\n      readToken_pipe_amp(code);\n      return;\n\n    case charCodes.caret:\n      readToken_caret();\n      return;\n\n    case charCodes.plusSign:\n    case charCodes.dash:\n      readToken_plus_min(code);\n      return;\n\n    case charCodes.lessThan:\n      readToken_lt();\n      return;\n\n    case charCodes.greaterThan:\n      readToken_gt();\n      return;\n\n    case charCodes.equalsTo:\n    case charCodes.exclamationMark:\n      readToken_eq_excl(code);\n      return;\n\n    case charCodes.tilde:\n      finishOp(tt.tilde, 1);\n      return;\n\n    default:\n      break;\n  }\n\n  unexpected(`Unexpected character '${String.fromCharCode(code)}'`, state.pos);\n}\n\nfunction finishOp(type, size) {\n  state.pos += size;\n  finishToken(type);\n}\n\nfunction readRegexp() {\n  const start = state.pos;\n  let escaped = false;\n  let inClass = false;\n  for (;;) {\n    if (state.pos >= input.length) {\n      unexpected(\"Unterminated regular expression\", start);\n      return;\n    }\n    const code = input.charCodeAt(state.pos);\n    if (escaped) {\n      escaped = false;\n    } else {\n      if (code === charCodes.leftSquareBracket) {\n        inClass = true;\n      } else if (code === charCodes.rightSquareBracket && inClass) {\n        inClass = false;\n      } else if (code === charCodes.slash && !inClass) {\n        break;\n      }\n      escaped = code === charCodes.backslash;\n    }\n    ++state.pos;\n  }\n  ++state.pos;\n  // Need to use `skipWord` because '\\uXXXX' sequences are allowed here (don't ask).\n  skipWord();\n\n  finishToken(tt.regexp);\n}\n\n/**\n * Read a decimal integer. Note that this can't be unified with the similar code\n * in readRadixNumber (which also handles hex digits) because \"e\" needs to be\n * the end of the integer so that we can properly handle scientific notation.\n */\nfunction readInt() {\n  while (true) {\n    const code = input.charCodeAt(state.pos);\n    if ((code >= charCodes.digit0 && code <= charCodes.digit9) || code === charCodes.underscore) {\n      state.pos++;\n    } else {\n      break;\n    }\n  }\n}\n\nfunction readRadixNumber() {\n  state.pos += 2; // 0x\n\n  // Walk to the end of the number, allowing hex digits.\n  while (true) {\n    const code = input.charCodeAt(state.pos);\n    if (\n      (code >= charCodes.digit0 && code <= charCodes.digit9) ||\n      (code >= charCodes.lowercaseA && code <= charCodes.lowercaseF) ||\n      (code >= charCodes.uppercaseA && code <= charCodes.uppercaseF) ||\n      code === charCodes.underscore\n    ) {\n      state.pos++;\n    } else {\n      break;\n    }\n  }\n\n  const nextChar = input.charCodeAt(state.pos);\n  if (nextChar === charCodes.lowercaseN) {\n    ++state.pos;\n    finishToken(tt.bigint);\n  } else {\n    finishToken(tt.num);\n  }\n}\n\n// Read an integer, octal integer, or floating-point number.\nfunction readNumber(startsWithDot) {\n  let isBigInt = false;\n  let isDecimal = false;\n\n  if (!startsWithDot) {\n    readInt();\n  }\n\n  let nextChar = input.charCodeAt(state.pos);\n  if (nextChar === charCodes.dot) {\n    ++state.pos;\n    readInt();\n    nextChar = input.charCodeAt(state.pos);\n  }\n\n  if (nextChar === charCodes.uppercaseE || nextChar === charCodes.lowercaseE) {\n    nextChar = input.charCodeAt(++state.pos);\n    if (nextChar === charCodes.plusSign || nextChar === charCodes.dash) {\n      ++state.pos;\n    }\n    readInt();\n    nextChar = input.charCodeAt(state.pos);\n  }\n\n  if (nextChar === charCodes.lowercaseN) {\n    ++state.pos;\n    isBigInt = true;\n  } else if (nextChar === charCodes.lowercaseM) {\n    ++state.pos;\n    isDecimal = true;\n  }\n\n  if (isBigInt) {\n    finishToken(tt.bigint);\n    return;\n  }\n\n  if (isDecimal) {\n    finishToken(tt.decimal);\n    return;\n  }\n\n  finishToken(tt.num);\n}\n\nfunction readString(quote) {\n  state.pos++;\n  for (;;) {\n    if (state.pos >= input.length) {\n      unexpected(\"Unterminated string constant\");\n      return;\n    }\n    const ch = input.charCodeAt(state.pos);\n    if (ch === charCodes.backslash) {\n      state.pos++;\n    } else if (ch === quote) {\n      break;\n    }\n    state.pos++;\n  }\n  state.pos++;\n  finishToken(tt.string);\n}\n\n// Reads template string tokens.\nfunction readTmplToken() {\n  for (;;) {\n    if (state.pos >= input.length) {\n      unexpected(\"Unterminated template\");\n      return;\n    }\n    const ch = input.charCodeAt(state.pos);\n    if (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign && input.charCodeAt(state.pos + 1) === charCodes.leftCurlyBrace)\n    ) {\n      if (state.pos === state.start && match(tt.template)) {\n        if (ch === charCodes.dollarSign) {\n          state.pos += 2;\n          finishToken(tt.dollarBraceL);\n          return;\n        } else {\n          ++state.pos;\n          finishToken(tt.backQuote);\n          return;\n        }\n      }\n      finishToken(tt.template);\n      return;\n    }\n    if (ch === charCodes.backslash) {\n      state.pos++;\n    }\n    state.pos++;\n  }\n}\n\n// Skip to the end of the current word. Note that this is the same as the snippet at the end of\n// readWord, but calling skipWord from readWord seems to slightly hurt performance from some rough\n// measurements.\nexport function skipWord() {\n  while (state.pos < input.length) {\n    const ch = input.charCodeAt(state.pos);\n    if (IS_IDENTIFIER_CHAR[ch]) {\n      state.pos++;\n    } else if (ch === charCodes.backslash) {\n      // \\u\n      state.pos += 2;\n      if (input.charCodeAt(state.pos) === charCodes.leftCurlyBrace) {\n        while (\n          state.pos < input.length &&\n          input.charCodeAt(state.pos) !== charCodes.rightCurlyBrace\n        ) {\n          state.pos++;\n        }\n        state.pos++;\n      }\n    } else {\n      break;\n    }\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 11430, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/plugins/jsx/xhtml.js"],"sourcesContent":["// Use a Map rather than object to avoid unexpected __proto__ access.\nexport default new Map([\n  [\"quot\", \"\\u0022\"],\n  [\"amp\", \"&\"],\n  [\"apos\", \"\\u0027\"],\n  [\"lt\", \"<\"],\n  [\"gt\", \">\"],\n  [\"nbsp\", \"\\u00A0\"],\n  [\"iexcl\", \"\\u00A1\"],\n  [\"cent\", \"\\u00A2\"],\n  [\"pound\", \"\\u00A3\"],\n  [\"curren\", \"\\u00A4\"],\n  [\"yen\", \"\\u00A5\"],\n  [\"brvbar\", \"\\u00A6\"],\n  [\"sect\", \"\\u00A7\"],\n  [\"uml\", \"\\u00A8\"],\n  [\"copy\", \"\\u00A9\"],\n  [\"ordf\", \"\\u00AA\"],\n  [\"laquo\", \"\\u00AB\"],\n  [\"not\", \"\\u00AC\"],\n  [\"shy\", \"\\u00AD\"],\n  [\"reg\", \"\\u00AE\"],\n  [\"macr\", \"\\u00AF\"],\n  [\"deg\", \"\\u00B0\"],\n  [\"plusmn\", \"\\u00B1\"],\n  [\"sup2\", \"\\u00B2\"],\n  [\"sup3\", \"\\u00B3\"],\n  [\"acute\", \"\\u00B4\"],\n  [\"micro\", \"\\u00B5\"],\n  [\"para\", \"\\u00B6\"],\n  [\"middot\", \"\\u00B7\"],\n  [\"cedil\", \"\\u00B8\"],\n  [\"sup1\", \"\\u00B9\"],\n  [\"ordm\", \"\\u00BA\"],\n  [\"raquo\", \"\\u00BB\"],\n  [\"frac14\", \"\\u00BC\"],\n  [\"frac12\", \"\\u00BD\"],\n  [\"frac34\", \"\\u00BE\"],\n  [\"iquest\", \"\\u00BF\"],\n  [\"Agrave\", \"\\u00C0\"],\n  [\"Aacute\", \"\\u00C1\"],\n  [\"Acirc\", \"\\u00C2\"],\n  [\"Atilde\", \"\\u00C3\"],\n  [\"Auml\", \"\\u00C4\"],\n  [\"Aring\", \"\\u00C5\"],\n  [\"AElig\", \"\\u00C6\"],\n  [\"Ccedil\", \"\\u00C7\"],\n  [\"Egrave\", \"\\u00C8\"],\n  [\"Eacute\", \"\\u00C9\"],\n  [\"Ecirc\", \"\\u00CA\"],\n  [\"Euml\", \"\\u00CB\"],\n  [\"Igrave\", \"\\u00CC\"],\n  [\"Iacute\", \"\\u00CD\"],\n  [\"Icirc\", \"\\u00CE\"],\n  [\"Iuml\", \"\\u00CF\"],\n  [\"ETH\", \"\\u00D0\"],\n  [\"Ntilde\", \"\\u00D1\"],\n  [\"Ograve\", \"\\u00D2\"],\n  [\"Oacute\", \"\\u00D3\"],\n  [\"Ocirc\", \"\\u00D4\"],\n  [\"Otilde\", \"\\u00D5\"],\n  [\"Ouml\", \"\\u00D6\"],\n  [\"times\", \"\\u00D7\"],\n  [\"Oslash\", \"\\u00D8\"],\n  [\"Ugrave\", \"\\u00D9\"],\n  [\"Uacute\", \"\\u00DA\"],\n  [\"Ucirc\", \"\\u00DB\"],\n  [\"Uuml\", \"\\u00DC\"],\n  [\"Yacute\", \"\\u00DD\"],\n  [\"THORN\", \"\\u00DE\"],\n  [\"szlig\", \"\\u00DF\"],\n  [\"agrave\", \"\\u00E0\"],\n  [\"aacute\", \"\\u00E1\"],\n  [\"acirc\", \"\\u00E2\"],\n  [\"atilde\", \"\\u00E3\"],\n  [\"auml\", \"\\u00E4\"],\n  [\"aring\", \"\\u00E5\"],\n  [\"aelig\", \"\\u00E6\"],\n  [\"ccedil\", \"\\u00E7\"],\n  [\"egrave\", \"\\u00E8\"],\n  [\"eacute\", \"\\u00E9\"],\n  [\"ecirc\", \"\\u00EA\"],\n  [\"euml\", \"\\u00EB\"],\n  [\"igrave\", \"\\u00EC\"],\n  [\"iacute\", \"\\u00ED\"],\n  [\"icirc\", \"\\u00EE\"],\n  [\"iuml\", \"\\u00EF\"],\n  [\"eth\", \"\\u00F0\"],\n  [\"ntilde\", \"\\u00F1\"],\n  [\"ograve\", \"\\u00F2\"],\n  [\"oacute\", \"\\u00F3\"],\n  [\"ocirc\", \"\\u00F4\"],\n  [\"otilde\", \"\\u00F5\"],\n  [\"ouml\", \"\\u00F6\"],\n  [\"divide\", \"\\u00F7\"],\n  [\"oslash\", \"\\u00F8\"],\n  [\"ugrave\", \"\\u00F9\"],\n  [\"uacute\", \"\\u00FA\"],\n  [\"ucirc\", \"\\u00FB\"],\n  [\"uuml\", \"\\u00FC\"],\n  [\"yacute\", \"\\u00FD\"],\n  [\"thorn\", \"\\u00FE\"],\n  [\"yuml\", \"\\u00FF\"],\n  [\"OElig\", \"\\u0152\"],\n  [\"oelig\", \"\\u0153\"],\n  [\"Scaron\", \"\\u0160\"],\n  [\"scaron\", \"\\u0161\"],\n  [\"Yuml\", \"\\u0178\"],\n  [\"fnof\", \"\\u0192\"],\n  [\"circ\", \"\\u02C6\"],\n  [\"tilde\", \"\\u02DC\"],\n  [\"Alpha\", \"\\u0391\"],\n  [\"Beta\", \"\\u0392\"],\n  [\"Gamma\", \"\\u0393\"],\n  [\"Delta\", \"\\u0394\"],\n  [\"Epsilon\", \"\\u0395\"],\n  [\"Zeta\", \"\\u0396\"],\n  [\"Eta\", \"\\u0397\"],\n  [\"Theta\", \"\\u0398\"],\n  [\"Iota\", \"\\u0399\"],\n  [\"Kappa\", \"\\u039A\"],\n  [\"Lambda\", \"\\u039B\"],\n  [\"Mu\", \"\\u039C\"],\n  [\"Nu\", \"\\u039D\"],\n  [\"Xi\", \"\\u039E\"],\n  [\"Omicron\", \"\\u039F\"],\n  [\"Pi\", \"\\u03A0\"],\n  [\"Rho\", \"\\u03A1\"],\n  [\"Sigma\", \"\\u03A3\"],\n  [\"Tau\", \"\\u03A4\"],\n  [\"Upsilon\", \"\\u03A5\"],\n  [\"Phi\", \"\\u03A6\"],\n  [\"Chi\", \"\\u03A7\"],\n  [\"Psi\", \"\\u03A8\"],\n  [\"Omega\", \"\\u03A9\"],\n  [\"alpha\", \"\\u03B1\"],\n  [\"beta\", \"\\u03B2\"],\n  [\"gamma\", \"\\u03B3\"],\n  [\"delta\", \"\\u03B4\"],\n  [\"epsilon\", \"\\u03B5\"],\n  [\"zeta\", \"\\u03B6\"],\n  [\"eta\", \"\\u03B7\"],\n  [\"theta\", \"\\u03B8\"],\n  [\"iota\", \"\\u03B9\"],\n  [\"kappa\", \"\\u03BA\"],\n  [\"lambda\", \"\\u03BB\"],\n  [\"mu\", \"\\u03BC\"],\n  [\"nu\", \"\\u03BD\"],\n  [\"xi\", \"\\u03BE\"],\n  [\"omicron\", \"\\u03BF\"],\n  [\"pi\", \"\\u03C0\"],\n  [\"rho\", \"\\u03C1\"],\n  [\"sigmaf\", \"\\u03C2\"],\n  [\"sigma\", \"\\u03C3\"],\n  [\"tau\", \"\\u03C4\"],\n  [\"upsilon\", \"\\u03C5\"],\n  [\"phi\", \"\\u03C6\"],\n  [\"chi\", \"\\u03C7\"],\n  [\"psi\", \"\\u03C8\"],\n  [\"omega\", \"\\u03C9\"],\n  [\"thetasym\", \"\\u03D1\"],\n  [\"upsih\", \"\\u03D2\"],\n  [\"piv\", \"\\u03D6\"],\n  [\"ensp\", \"\\u2002\"],\n  [\"emsp\", \"\\u2003\"],\n  [\"thinsp\", \"\\u2009\"],\n  [\"zwnj\", \"\\u200C\"],\n  [\"zwj\", \"\\u200D\"],\n  [\"lrm\", \"\\u200E\"],\n  [\"rlm\", \"\\u200F\"],\n  [\"ndash\", \"\\u2013\"],\n  [\"mdash\", \"\\u2014\"],\n  [\"lsquo\", \"\\u2018\"],\n  [\"rsquo\", \"\\u2019\"],\n  [\"sbquo\", \"\\u201A\"],\n  [\"ldquo\", \"\\u201C\"],\n  [\"rdquo\", \"\\u201D\"],\n  [\"bdquo\", \"\\u201E\"],\n  [\"dagger\", \"\\u2020\"],\n  [\"Dagger\", \"\\u2021\"],\n  [\"bull\", \"\\u2022\"],\n  [\"hellip\", \"\\u2026\"],\n  [\"permil\", \"\\u2030\"],\n  [\"prime\", \"\\u2032\"],\n  [\"Prime\", \"\\u2033\"],\n  [\"lsaquo\", \"\\u2039\"],\n  [\"rsaquo\", \"\\u203A\"],\n  [\"oline\", \"\\u203E\"],\n  [\"frasl\", \"\\u2044\"],\n  [\"euro\", \"\\u20AC\"],\n  [\"image\", \"\\u2111\"],\n  [\"weierp\", \"\\u2118\"],\n  [\"real\", \"\\u211C\"],\n  [\"trade\", \"\\u2122\"],\n  [\"alefsym\", \"\\u2135\"],\n  [\"larr\", \"\\u2190\"],\n  [\"uarr\", \"\\u2191\"],\n  [\"rarr\", \"\\u2192\"],\n  [\"darr\", \"\\u2193\"],\n  [\"harr\", \"\\u2194\"],\n  [\"crarr\", \"\\u21B5\"],\n  [\"lArr\", \"\\u21D0\"],\n  [\"uArr\", \"\\u21D1\"],\n  [\"rArr\", \"\\u21D2\"],\n  [\"dArr\", \"\\u21D3\"],\n  [\"hArr\", \"\\u21D4\"],\n  [\"forall\", \"\\u2200\"],\n  [\"part\", \"\\u2202\"],\n  [\"exist\", \"\\u2203\"],\n  [\"empty\", \"\\u2205\"],\n  [\"nabla\", \"\\u2207\"],\n  [\"isin\", \"\\u2208\"],\n  [\"notin\", \"\\u2209\"],\n  [\"ni\", \"\\u220B\"],\n  [\"prod\", \"\\u220F\"],\n  [\"sum\", \"\\u2211\"],\n  [\"minus\", \"\\u2212\"],\n  [\"lowast\", \"\\u2217\"],\n  [\"radic\", \"\\u221A\"],\n  [\"prop\", \"\\u221D\"],\n  [\"infin\", \"\\u221E\"],\n  [\"ang\", \"\\u2220\"],\n  [\"and\", \"\\u2227\"],\n  [\"or\", \"\\u2228\"],\n  [\"cap\", \"\\u2229\"],\n  [\"cup\", \"\\u222A\"],\n  [\"int\", \"\\u222B\"],\n  [\"there4\", \"\\u2234\"],\n  [\"sim\", \"\\u223C\"],\n  [\"cong\", \"\\u2245\"],\n  [\"asymp\", \"\\u2248\"],\n  [\"ne\", \"\\u2260\"],\n  [\"equiv\", \"\\u2261\"],\n  [\"le\", \"\\u2264\"],\n  [\"ge\", \"\\u2265\"],\n  [\"sub\", \"\\u2282\"],\n  [\"sup\", \"\\u2283\"],\n  [\"nsub\", \"\\u2284\"],\n  [\"sube\", \"\\u2286\"],\n  [\"supe\", \"\\u2287\"],\n  [\"oplus\", \"\\u2295\"],\n  [\"otimes\", \"\\u2297\"],\n  [\"perp\", \"\\u22A5\"],\n  [\"sdot\", \"\\u22C5\"],\n  [\"lceil\", \"\\u2308\"],\n  [\"rceil\", \"\\u2309\"],\n  [\"lfloor\", \"\\u230A\"],\n  [\"rfloor\", \"\\u230B\"],\n  [\"lang\", \"\\u2329\"],\n  [\"rang\", \"\\u232A\"],\n  [\"loz\", \"\\u25CA\"],\n  [\"spades\", \"\\u2660\"],\n  [\"clubs\", \"\\u2663\"],\n  [\"hearts\", \"\\u2665\"],\n  [\"diams\", \"\\u2666\"],\n]);\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12453, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/traverser/lval.js"],"sourcesContent":["import {flowParseAssignableListItemTypes} from \"../plugins/flow\";\nimport {tsParseAssignableListItemTypes, tsParseModifiers} from \"../plugins/typescript\";\nimport {\n  eat,\n  IdentifierRole,\n  match,\n  next,\n  popTypeContext,\n  pushTypeContext,\n} from \"../tokenizer/index\";\nimport {ContextualKeyword} from \"../tokenizer/keywords\";\nimport {TokenType, TokenType as tt} from \"../tokenizer/types\";\nimport {isFlowEnabled, isTypeScriptEnabled, state} from \"./base\";\nimport {parseIdentifier, parseMaybeAssign, parseObj} from \"./expression\";\nimport {expect, unexpected} from \"./util\";\n\nexport function parseSpread() {\n  next();\n  parseMaybeAssign(false);\n}\n\nexport function parseRest(isBlockScope) {\n  next();\n  parseBindingAtom(isBlockScope);\n}\n\nexport function parseBindingIdentifier(isBlockScope) {\n  parseIdentifier();\n  markPriorBindingIdentifier(isBlockScope);\n}\n\nexport function parseImportedIdentifier() {\n  parseIdentifier();\n  state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;\n}\n\nexport function markPriorBindingIdentifier(isBlockScope) {\n  let identifierRole;\n  if (state.scopeDepth === 0) {\n    identifierRole = IdentifierRole.TopLevelDeclaration;\n  } else if (isBlockScope) {\n    identifierRole = IdentifierRole.BlockScopedDeclaration;\n  } else {\n    identifierRole = IdentifierRole.FunctionScopedDeclaration;\n  }\n  state.tokens[state.tokens.length - 1].identifierRole = identifierRole;\n}\n\n// Parses lvalue (assignable) atom.\nexport function parseBindingAtom(isBlockScope) {\n  switch (state.type) {\n    case tt._this: {\n      // In TypeScript, \"this\" may be the name of a parameter, so allow it.\n      const oldIsType = pushTypeContext(0);\n      next();\n      popTypeContext(oldIsType);\n      return;\n    }\n\n    case tt._yield:\n    case tt.name: {\n      state.type = tt.name;\n      parseBindingIdentifier(isBlockScope);\n      return;\n    }\n\n    case tt.bracketL: {\n      next();\n      parseBindingList(tt.bracketR, isBlockScope, true /* allowEmpty */);\n      return;\n    }\n\n    case tt.braceL:\n      parseObj(true, isBlockScope);\n      return;\n\n    default:\n      unexpected();\n  }\n}\n\nexport function parseBindingList(\n  close,\n  isBlockScope,\n  allowEmpty = false,\n  allowModifiers = false,\n  contextId = 0,\n) {\n  let first = true;\n\n  let hasRemovedComma = false;\n  const firstItemTokenIndex = state.tokens.length;\n\n  while (!eat(close) && !state.error) {\n    if (first) {\n      first = false;\n    } else {\n      expect(tt.comma);\n      state.tokens[state.tokens.length - 1].contextId = contextId;\n      // After a \"this\" type in TypeScript, we need to set the following comma (if any) to also be\n      // a type token so that it will be removed.\n      if (!hasRemovedComma && state.tokens[firstItemTokenIndex].isType) {\n        state.tokens[state.tokens.length - 1].isType = true;\n        hasRemovedComma = true;\n      }\n    }\n    if (allowEmpty && match(tt.comma)) {\n      // Empty item; nothing further to parse for this item.\n    } else if (eat(close)) {\n      break;\n    } else if (match(tt.ellipsis)) {\n      parseRest(isBlockScope);\n      parseAssignableListItemTypes();\n      // Support rest element trailing commas allowed by TypeScript <2.9.\n      eat(TokenType.comma);\n      expect(close);\n      break;\n    } else {\n      parseAssignableListItem(allowModifiers, isBlockScope);\n    }\n  }\n}\n\nfunction parseAssignableListItem(allowModifiers, isBlockScope) {\n  if (allowModifiers) {\n    tsParseModifiers([\n      ContextualKeyword._public,\n      ContextualKeyword._protected,\n      ContextualKeyword._private,\n      ContextualKeyword._readonly,\n      ContextualKeyword._override,\n    ]);\n  }\n\n  parseMaybeDefault(isBlockScope);\n  parseAssignableListItemTypes();\n  parseMaybeDefault(isBlockScope, true /* leftAlreadyParsed */);\n}\n\nfunction parseAssignableListItemTypes() {\n  if (isFlowEnabled) {\n    flowParseAssignableListItemTypes();\n  } else if (isTypeScriptEnabled) {\n    tsParseAssignableListItemTypes();\n  }\n}\n\n// Parses assignment pattern around given atom if possible.\nexport function parseMaybeDefault(isBlockScope, leftAlreadyParsed = false) {\n  if (!leftAlreadyParsed) {\n    parseBindingAtom(isBlockScope);\n  }\n  if (!eat(tt.eq)) {\n    return;\n  }\n  const eqIndex = state.tokens.length - 1;\n  parseMaybeAssign();\n  state.tokens[eqIndex].rhsEndIndex = state.tokens.length;\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 12615, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/plugins/typescript.js"],"sourcesContent":["import {\n  eat,\n  finishToken,\n  IdentifierRole,\n  lookaheadType,\n  lookaheadTypeAndKeyword,\n  match,\n  next,\n  nextTemplateToken,\n  popTypeContext,\n  pushTypeContext,\n  rescan_gt,\n} from \"../tokenizer/index\";\nimport {ContextualKeyword} from \"../tokenizer/keywords\";\nimport {TokenType, TokenType as tt} from \"../tokenizer/types\";\nimport {isJSXEnabled, state} from \"../traverser/base\";\nimport {\n  atPossibleAsync,\n  baseParseMaybeAssign,\n  baseParseSubscript,\n  parseCallExpressionArguments,\n  parseExprAtom,\n  parseExpression,\n  parseFunctionBody,\n  parseIdentifier,\n  parseLiteral,\n  parseMaybeAssign,\n  parseMaybeUnary,\n  parsePropertyName,\n  parseTemplate,\n\n} from \"../traverser/expression\";\nimport {parseBindingIdentifier, parseBindingList, parseImportedIdentifier} from \"../traverser/lval\";\nimport {\n  baseParseMaybeDecoratorArguments,\n  parseBlockBody,\n  parseClass,\n  parseFunction,\n  parseFunctionParams,\n  parseStatement,\n  parseVarStatement,\n} from \"../traverser/statement\";\nimport {\n  canInsertSemicolon,\n  eatContextual,\n  expect,\n  expectContextual,\n  hasPrecedingLineBreak,\n  isContextual,\n  isLineTerminator,\n  isLookaheadContextual,\n  semicolon,\n  unexpected,\n} from \"../traverser/util\";\nimport {nextJSXTagToken} from \"./jsx\";\n\nfunction tsIsIdentifier() {\n  // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n  // See https://github.com/Microsoft/TypeScript/issues/15008\n  return match(tt.name);\n}\n\nfunction isLiteralPropertyName() {\n  return (\n    match(tt.name) ||\n    Boolean(state.type & TokenType.IS_KEYWORD) ||\n    match(tt.string) ||\n    match(tt.num) ||\n    match(tt.bigint) ||\n    match(tt.decimal)\n  );\n}\n\nfunction tsNextTokenCanFollowModifier() {\n  // Note: TypeScript's implementation is much more complicated because\n  // more things are considered modifiers there.\n  // This implementation only handles modifiers not handled by babylon itself. And \"static\".\n  // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n  const snapshot = state.snapshot();\n\n  next();\n  const canFollowModifier =\n    (match(tt.bracketL) ||\n      match(tt.braceL) ||\n      match(tt.star) ||\n      match(tt.ellipsis) ||\n      match(tt.hash) ||\n      isLiteralPropertyName()) &&\n    !hasPrecedingLineBreak();\n\n  if (canFollowModifier) {\n    return true;\n  } else {\n    state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n}\n\nexport function tsParseModifiers(allowedModifiers) {\n  while (true) {\n    const modifier = tsParseModifier(allowedModifiers);\n    if (modifier === null) {\n      break;\n    }\n  }\n}\n\n/** Parses a modifier matching one the given modifier names. */\nexport function tsParseModifier(\n  allowedModifiers,\n) {\n  if (!match(tt.name)) {\n    return null;\n  }\n\n  const modifier = state.contextualKeyword;\n  if (allowedModifiers.indexOf(modifier) !== -1 && tsNextTokenCanFollowModifier()) {\n    switch (modifier) {\n      case ContextualKeyword._readonly:\n        state.tokens[state.tokens.length - 1].type = tt._readonly;\n        break;\n      case ContextualKeyword._abstract:\n        state.tokens[state.tokens.length - 1].type = tt._abstract;\n        break;\n      case ContextualKeyword._static:\n        state.tokens[state.tokens.length - 1].type = tt._static;\n        break;\n      case ContextualKeyword._public:\n        state.tokens[state.tokens.length - 1].type = tt._public;\n        break;\n      case ContextualKeyword._private:\n        state.tokens[state.tokens.length - 1].type = tt._private;\n        break;\n      case ContextualKeyword._protected:\n        state.tokens[state.tokens.length - 1].type = tt._protected;\n        break;\n      case ContextualKeyword._override:\n        state.tokens[state.tokens.length - 1].type = tt._override;\n        break;\n      case ContextualKeyword._declare:\n        state.tokens[state.tokens.length - 1].type = tt._declare;\n        break;\n      default:\n        break;\n    }\n    return modifier;\n  }\n  return null;\n}\n\nfunction tsParseEntityName() {\n  parseIdentifier();\n  while (eat(tt.dot)) {\n    parseIdentifier();\n  }\n}\n\nfunction tsParseTypeReference() {\n  tsParseEntityName();\n  if (!hasPrecedingLineBreak() && match(tt.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseThisTypePredicate() {\n  next();\n  tsParseTypeAnnotation();\n}\n\nfunction tsParseThisTypeNode() {\n  next();\n}\n\nfunction tsParseTypeQuery() {\n  expect(tt._typeof);\n  if (match(tt._import)) {\n    tsParseImportType();\n  } else {\n    tsParseEntityName();\n  }\n  if (!hasPrecedingLineBreak() && match(tt.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseImportType() {\n  expect(tt._import);\n  expect(tt.parenL);\n  expect(tt.string);\n  expect(tt.parenR);\n  if (eat(tt.dot)) {\n    tsParseEntityName();\n  }\n  if (match(tt.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseTypeParameter() {\n  eat(tt._const);\n  const hadIn = eat(tt._in);\n  const hadOut = eatContextual(ContextualKeyword._out);\n  eat(tt._const);\n  if ((hadIn || hadOut) && !match(tt.name)) {\n    // The \"in\" or \"out\" keyword must have actually been the type parameter\n    // name, so set it as the name.\n    state.tokens[state.tokens.length - 1].type = tt.name;\n  } else {\n    parseIdentifier();\n  }\n\n  if (eat(tt._extends)) {\n    tsParseType();\n  }\n  if (eat(tt.eq)) {\n    tsParseType();\n  }\n}\n\nexport function tsTryParseTypeParameters() {\n  if (match(tt.lessThan)) {\n    tsParseTypeParameters();\n  }\n}\n\nfunction tsParseTypeParameters() {\n  const oldIsType = pushTypeContext(0);\n  if (match(tt.lessThan) || match(tt.typeParameterStart)) {\n    next();\n  } else {\n    unexpected();\n  }\n\n  while (!eat(tt.greaterThan) && !state.error) {\n    tsParseTypeParameter();\n    eat(tt.comma);\n  }\n  popTypeContext(oldIsType);\n}\n\n// Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n// but here it's always false, because this is only used for types.\nfunction tsFillSignature(returnToken) {\n  // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n  const returnTokenRequired = returnToken === tt.arrow;\n  tsTryParseTypeParameters();\n  expect(tt.parenL);\n  // Create a scope even though we're doing type parsing so we don't accidentally\n  // treat params as top-level bindings.\n  state.scopeDepth++;\n  tsParseBindingListForSignature(false /* isBlockScope */);\n  state.scopeDepth--;\n  if (returnTokenRequired) {\n    tsParseTypeOrTypePredicateAnnotation(returnToken);\n  } else if (match(returnToken)) {\n    tsParseTypeOrTypePredicateAnnotation(returnToken);\n  }\n}\n\nfunction tsParseBindingListForSignature(isBlockScope) {\n  parseBindingList(tt.parenR, isBlockScope);\n}\n\nfunction tsParseTypeMemberSemicolon() {\n  if (!eat(tt.comma)) {\n    semicolon();\n  }\n}\n\nfunction tsParseSignatureMember() {\n  tsFillSignature(tt.colon);\n  tsParseTypeMemberSemicolon();\n}\n\nfunction tsIsUnambiguouslyIndexSignature() {\n  const snapshot = state.snapshot();\n  next(); // Skip '{'\n  const isIndexSignature = eat(tt.name) && match(tt.colon);\n  state.restoreFromSnapshot(snapshot);\n  return isIndexSignature;\n}\n\nfunction tsTryParseIndexSignature() {\n  if (!(match(tt.bracketL) && tsIsUnambiguouslyIndexSignature())) {\n    return false;\n  }\n\n  const oldIsType = pushTypeContext(0);\n\n  expect(tt.bracketL);\n  parseIdentifier();\n  tsParseTypeAnnotation();\n  expect(tt.bracketR);\n\n  tsTryParseTypeAnnotation();\n  tsParseTypeMemberSemicolon();\n\n  popTypeContext(oldIsType);\n  return true;\n}\n\nfunction tsParsePropertyOrMethodSignature(isReadonly) {\n  eat(tt.question);\n\n  if (!isReadonly && (match(tt.parenL) || match(tt.lessThan))) {\n    tsFillSignature(tt.colon);\n    tsParseTypeMemberSemicolon();\n  } else {\n    tsTryParseTypeAnnotation();\n    tsParseTypeMemberSemicolon();\n  }\n}\n\nfunction tsParseTypeMember() {\n  if (match(tt.parenL) || match(tt.lessThan)) {\n    // call signature\n    tsParseSignatureMember();\n    return;\n  }\n  if (match(tt._new)) {\n    next();\n    if (match(tt.parenL) || match(tt.lessThan)) {\n      // constructor signature\n      tsParseSignatureMember();\n    } else {\n      tsParsePropertyOrMethodSignature(false);\n    }\n    return;\n  }\n  const readonly = !!tsParseModifier([ContextualKeyword._readonly]);\n\n  const found = tsTryParseIndexSignature();\n  if (found) {\n    return;\n  }\n  if (\n    (isContextual(ContextualKeyword._get) || isContextual(ContextualKeyword._set)) &&\n    tsNextTokenCanFollowModifier()\n  ) {\n    // This is a getter/setter on a type. The tsNextTokenCanFollowModifier\n    // function already called next() for us, so continue parsing the name.\n  }\n  parsePropertyName(-1 /* Types don't need context IDs. */);\n  tsParsePropertyOrMethodSignature(readonly);\n}\n\nfunction tsParseTypeLiteral() {\n  tsParseObjectTypeMembers();\n}\n\nfunction tsParseObjectTypeMembers() {\n  expect(tt.braceL);\n  while (!eat(tt.braceR) && !state.error) {\n    tsParseTypeMember();\n  }\n}\n\nfunction tsLookaheadIsStartOfMappedType() {\n  const snapshot = state.snapshot();\n  const isStartOfMappedType = tsIsStartOfMappedType();\n  state.restoreFromSnapshot(snapshot);\n  return isStartOfMappedType;\n}\n\nfunction tsIsStartOfMappedType() {\n  next();\n  if (eat(tt.plus) || eat(tt.minus)) {\n    return isContextual(ContextualKeyword._readonly);\n  }\n  if (isContextual(ContextualKeyword._readonly)) {\n    next();\n  }\n  if (!match(tt.bracketL)) {\n    return false;\n  }\n  next();\n  if (!tsIsIdentifier()) {\n    return false;\n  }\n  next();\n  return match(tt._in);\n}\n\nfunction tsParseMappedTypeParameter() {\n  parseIdentifier();\n  expect(tt._in);\n  tsParseType();\n}\n\nfunction tsParseMappedType() {\n  expect(tt.braceL);\n  if (match(tt.plus) || match(tt.minus)) {\n    next();\n    expectContextual(ContextualKeyword._readonly);\n  } else {\n    eatContextual(ContextualKeyword._readonly);\n  }\n  expect(tt.bracketL);\n  tsParseMappedTypeParameter();\n  if (eatContextual(ContextualKeyword._as)) {\n    tsParseType();\n  }\n  expect(tt.bracketR);\n  if (match(tt.plus) || match(tt.minus)) {\n    next();\n    expect(tt.question);\n  } else {\n    eat(tt.question);\n  }\n  tsTryParseType();\n  semicolon();\n  expect(tt.braceR);\n}\n\nfunction tsParseTupleType() {\n  expect(tt.bracketL);\n  while (!eat(tt.bracketR) && !state.error) {\n    // Do not validate presence of either none or only labeled elements\n    tsParseTupleElementType();\n    eat(tt.comma);\n  }\n}\n\nfunction tsParseTupleElementType() {\n  // parses `...TsType[]`\n  if (eat(tt.ellipsis)) {\n    tsParseType();\n  } else {\n    // parses `TsType?`\n    tsParseType();\n    eat(tt.question);\n  }\n\n  // The type we parsed above was actually a label\n  if (eat(tt.colon)) {\n    // Labeled tuple types must affix the label with `...` or `?`, so no need to handle those here\n    tsParseType();\n  }\n}\n\nfunction tsParseParenthesizedType() {\n  expect(tt.parenL);\n  tsParseType();\n  expect(tt.parenR);\n}\n\nfunction tsParseTemplateLiteralType() {\n  // Finish `, read quasi\n  nextTemplateToken();\n  // Finish quasi, read ${\n  nextTemplateToken();\n  while (!match(tt.backQuote) && !state.error) {\n    expect(tt.dollarBraceL);\n    tsParseType();\n    // Finish }, read quasi\n    nextTemplateToken();\n    // Finish quasi, read either ${ or `\n    nextTemplateToken();\n  }\n  next();\n}\n\nvar FunctionType; (function (FunctionType) {\n  const TSFunctionType = 0; FunctionType[FunctionType[\"TSFunctionType\"] = TSFunctionType] = \"TSFunctionType\";\n  const TSConstructorType = TSFunctionType + 1; FunctionType[FunctionType[\"TSConstructorType\"] = TSConstructorType] = \"TSConstructorType\";\n  const TSAbstractConstructorType = TSConstructorType + 1; FunctionType[FunctionType[\"TSAbstractConstructorType\"] = TSAbstractConstructorType] = \"TSAbstractConstructorType\";\n})(FunctionType || (FunctionType = {}));\n\nfunction tsParseFunctionOrConstructorType(type) {\n  if (type === FunctionType.TSAbstractConstructorType) {\n    expectContextual(ContextualKeyword._abstract);\n  }\n  if (type === FunctionType.TSConstructorType || type === FunctionType.TSAbstractConstructorType) {\n    expect(tt._new);\n  }\n  const oldInDisallowConditionalTypesContext = state.inDisallowConditionalTypesContext;\n  state.inDisallowConditionalTypesContext = false;\n  tsFillSignature(tt.arrow);\n  state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n}\n\nfunction tsParseNonArrayType() {\n  switch (state.type) {\n    case tt.name:\n      tsParseTypeReference();\n      return;\n    case tt._void:\n    case tt._null:\n      next();\n      return;\n    case tt.string:\n    case tt.num:\n    case tt.bigint:\n    case tt.decimal:\n    case tt._true:\n    case tt._false:\n      parseLiteral();\n      return;\n    case tt.minus:\n      next();\n      parseLiteral();\n      return;\n    case tt._this: {\n      tsParseThisTypeNode();\n      if (isContextual(ContextualKeyword._is) && !hasPrecedingLineBreak()) {\n        tsParseThisTypePredicate();\n      }\n      return;\n    }\n    case tt._typeof:\n      tsParseTypeQuery();\n      return;\n    case tt._import:\n      tsParseImportType();\n      return;\n    case tt.braceL:\n      if (tsLookaheadIsStartOfMappedType()) {\n        tsParseMappedType();\n      } else {\n        tsParseTypeLiteral();\n      }\n      return;\n    case tt.bracketL:\n      tsParseTupleType();\n      return;\n    case tt.parenL:\n      tsParseParenthesizedType();\n      return;\n    case tt.backQuote:\n      tsParseTemplateLiteralType();\n      return;\n    default:\n      if (state.type & TokenType.IS_KEYWORD) {\n        next();\n        state.tokens[state.tokens.length - 1].type = tt.name;\n        return;\n      }\n      break;\n  }\n\n  unexpected();\n}\n\nfunction tsParseArrayTypeOrHigher() {\n  tsParseNonArrayType();\n  while (!hasPrecedingLineBreak() && eat(tt.bracketL)) {\n    if (!eat(tt.bracketR)) {\n      // If we hit ] immediately, this is an array type, otherwise it's an indexed access type.\n      tsParseType();\n      expect(tt.bracketR);\n    }\n  }\n}\n\nfunction tsParseInferType() {\n  expectContextual(ContextualKeyword._infer);\n  parseIdentifier();\n  if (match(tt._extends)) {\n    // Infer type constraints introduce an ambiguity about whether the \"extends\"\n    // is a constraint for this infer type or is another conditional type.\n    const snapshot = state.snapshot();\n    expect(tt._extends);\n    const oldInDisallowConditionalTypesContext = state.inDisallowConditionalTypesContext;\n    state.inDisallowConditionalTypesContext = true;\n    tsParseType();\n    state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    if (state.error || (!state.inDisallowConditionalTypesContext && match(tt.question))) {\n      state.restoreFromSnapshot(snapshot);\n    }\n  }\n}\n\nfunction tsParseTypeOperatorOrHigher() {\n  if (\n    isContextual(ContextualKeyword._keyof) ||\n    isContextual(ContextualKeyword._unique) ||\n    isContextual(ContextualKeyword._readonly)\n  ) {\n    next();\n    tsParseTypeOperatorOrHigher();\n  } else if (isContextual(ContextualKeyword._infer)) {\n    tsParseInferType();\n  } else {\n    const oldInDisallowConditionalTypesContext = state.inDisallowConditionalTypesContext;\n    state.inDisallowConditionalTypesContext = false;\n    tsParseArrayTypeOrHigher();\n    state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n  }\n}\n\nfunction tsParseIntersectionTypeOrHigher() {\n  eat(tt.bitwiseAND);\n  tsParseTypeOperatorOrHigher();\n  if (match(tt.bitwiseAND)) {\n    while (eat(tt.bitwiseAND)) {\n      tsParseTypeOperatorOrHigher();\n    }\n  }\n}\n\nfunction tsParseUnionTypeOrHigher() {\n  eat(tt.bitwiseOR);\n  tsParseIntersectionTypeOrHigher();\n  if (match(tt.bitwiseOR)) {\n    while (eat(tt.bitwiseOR)) {\n      tsParseIntersectionTypeOrHigher();\n    }\n  }\n}\n\nfunction tsIsStartOfFunctionType() {\n  if (match(tt.lessThan)) {\n    return true;\n  }\n  return match(tt.parenL) && tsLookaheadIsUnambiguouslyStartOfFunctionType();\n}\n\nfunction tsSkipParameterStart() {\n  if (match(tt.name) || match(tt._this)) {\n    next();\n    return true;\n  }\n  // If this is a possible array/object destructure, walk to the matching bracket/brace.\n  // The next token after will tell us definitively whether this is a function param.\n  if (match(tt.braceL) || match(tt.bracketL)) {\n    let depth = 1;\n    next();\n    while (depth > 0 && !state.error) {\n      if (match(tt.braceL) || match(tt.bracketL)) {\n        depth++;\n      } else if (match(tt.braceR) || match(tt.bracketR)) {\n        depth--;\n      }\n      next();\n    }\n    return true;\n  }\n  return false;\n}\n\nfunction tsLookaheadIsUnambiguouslyStartOfFunctionType() {\n  const snapshot = state.snapshot();\n  const isUnambiguouslyStartOfFunctionType = tsIsUnambiguouslyStartOfFunctionType();\n  state.restoreFromSnapshot(snapshot);\n  return isUnambiguouslyStartOfFunctionType;\n}\n\nfunction tsIsUnambiguouslyStartOfFunctionType() {\n  next();\n  if (match(tt.parenR) || match(tt.ellipsis)) {\n    // ( )\n    // ( ...\n    return true;\n  }\n  if (tsSkipParameterStart()) {\n    if (match(tt.colon) || match(tt.comma) || match(tt.question) || match(tt.eq)) {\n      // ( xxx :\n      // ( xxx ,\n      // ( xxx ?\n      // ( xxx =\n      return true;\n    }\n    if (match(tt.parenR)) {\n      next();\n      if (match(tt.arrow)) {\n        // ( xxx ) =>\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction tsParseTypeOrTypePredicateAnnotation(returnToken) {\n  const oldIsType = pushTypeContext(0);\n  expect(returnToken);\n  const finishedReturn = tsParseTypePredicateOrAssertsPrefix();\n  if (!finishedReturn) {\n    tsParseType();\n  }\n  popTypeContext(oldIsType);\n}\n\nfunction tsTryParseTypeOrTypePredicateAnnotation() {\n  if (match(tt.colon)) {\n    tsParseTypeOrTypePredicateAnnotation(tt.colon);\n  }\n}\n\nexport function tsTryParseTypeAnnotation() {\n  if (match(tt.colon)) {\n    tsParseTypeAnnotation();\n  }\n}\n\nfunction tsTryParseType() {\n  if (eat(tt.colon)) {\n    tsParseType();\n  }\n}\n\n/**\n * Detect a few special return syntax cases: `x is T`, `asserts x`, `asserts x is T`,\n * `asserts this is T`.\n *\n * Returns true if we parsed the return type, false if there's still a type to be parsed.\n */\nfunction tsParseTypePredicateOrAssertsPrefix() {\n  const snapshot = state.snapshot();\n  if (isContextual(ContextualKeyword._asserts)) {\n    // Normally this is `asserts x is T`, but at this point, it might be `asserts is T` (a user-\n    // defined type guard on the `asserts` variable) or just a type called `asserts`.\n    next();\n    if (eatContextual(ContextualKeyword._is)) {\n      // If we see `asserts is`, then this must be of the form `asserts is T`, since\n      // `asserts is is T` isn't valid.\n      tsParseType();\n      return true;\n    } else if (tsIsIdentifier() || match(tt._this)) {\n      next();\n      if (eatContextual(ContextualKeyword._is)) {\n        // If we see `is`, then this is `asserts x is T`. Otherwise, it's `asserts x`.\n        tsParseType();\n      }\n      return true;\n    } else {\n      // Regular type, so bail out and start type parsing from scratch.\n      state.restoreFromSnapshot(snapshot);\n      return false;\n    }\n  } else if (tsIsIdentifier() || match(tt._this)) {\n    // This is a regular identifier, which may or may not have \"is\" after it.\n    next();\n    if (isContextual(ContextualKeyword._is) && !hasPrecedingLineBreak()) {\n      next();\n      tsParseType();\n      return true;\n    } else {\n      // Regular type, so bail out and start type parsing from scratch.\n      state.restoreFromSnapshot(snapshot);\n      return false;\n    }\n  }\n  return false;\n}\n\nexport function tsParseTypeAnnotation() {\n  const oldIsType = pushTypeContext(0);\n  expect(tt.colon);\n  tsParseType();\n  popTypeContext(oldIsType);\n}\n\nexport function tsParseType() {\n  tsParseNonConditionalType();\n  if (state.inDisallowConditionalTypesContext || hasPrecedingLineBreak() || !eat(tt._extends)) {\n    return;\n  }\n  // extends type\n  const oldInDisallowConditionalTypesContext = state.inDisallowConditionalTypesContext;\n  state.inDisallowConditionalTypesContext = true;\n  tsParseNonConditionalType();\n  state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n\n  expect(tt.question);\n  // true type\n  tsParseType();\n  expect(tt.colon);\n  // false type\n  tsParseType();\n}\n\nfunction isAbstractConstructorSignature() {\n  return isContextual(ContextualKeyword._abstract) && lookaheadType() === tt._new;\n}\n\nexport function tsParseNonConditionalType() {\n  if (tsIsStartOfFunctionType()) {\n    tsParseFunctionOrConstructorType(FunctionType.TSFunctionType);\n    return;\n  }\n  if (match(tt._new)) {\n    // As in `new () => Date`\n    tsParseFunctionOrConstructorType(FunctionType.TSConstructorType);\n    return;\n  } else if (isAbstractConstructorSignature()) {\n    // As in `abstract new () => Date`\n    tsParseFunctionOrConstructorType(FunctionType.TSAbstractConstructorType);\n    return;\n  }\n  tsParseUnionTypeOrHigher();\n}\n\nexport function tsParseTypeAssertion() {\n  const oldIsType = pushTypeContext(1);\n  tsParseType();\n  expect(tt.greaterThan);\n  popTypeContext(oldIsType);\n  parseMaybeUnary();\n}\n\nexport function tsTryParseJSXTypeArgument() {\n  if (eat(tt.jsxTagStart)) {\n    state.tokens[state.tokens.length - 1].type = tt.typeParameterStart;\n    const oldIsType = pushTypeContext(1);\n    while (!match(tt.greaterThan) && !state.error) {\n      tsParseType();\n      eat(tt.comma);\n    }\n    // Process >, but the one after needs to be parsed JSX-style.\n    nextJSXTagToken();\n    popTypeContext(oldIsType);\n  }\n}\n\nfunction tsParseHeritageClause() {\n  while (!match(tt.braceL) && !state.error) {\n    tsParseExpressionWithTypeArguments();\n    eat(tt.comma);\n  }\n}\n\nfunction tsParseExpressionWithTypeArguments() {\n  // Note: TS uses parseLeftHandSideExpressionOrHigher,\n  // then has grammar errors later if it's not an EntityName.\n  tsParseEntityName();\n  if (match(tt.lessThan)) {\n    tsParseTypeArguments();\n  }\n}\n\nfunction tsParseInterfaceDeclaration() {\n  parseBindingIdentifier(false);\n  tsTryParseTypeParameters();\n  if (eat(tt._extends)) {\n    tsParseHeritageClause();\n  }\n  tsParseObjectTypeMembers();\n}\n\nfunction tsParseTypeAliasDeclaration() {\n  parseBindingIdentifier(false);\n  tsTryParseTypeParameters();\n  expect(tt.eq);\n  tsParseType();\n  semicolon();\n}\n\nfunction tsParseEnumMember() {\n  // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n  if (match(tt.string)) {\n    parseLiteral();\n  } else {\n    parseIdentifier();\n  }\n  if (eat(tt.eq)) {\n    const eqIndex = state.tokens.length - 1;\n    parseMaybeAssign();\n    state.tokens[eqIndex].rhsEndIndex = state.tokens.length;\n  }\n}\n\nfunction tsParseEnumDeclaration() {\n  parseBindingIdentifier(false);\n  expect(tt.braceL);\n  while (!eat(tt.braceR) && !state.error) {\n    tsParseEnumMember();\n    eat(tt.comma);\n  }\n}\n\nfunction tsParseModuleBlock() {\n  expect(tt.braceL);\n  parseBlockBody(/* end */ tt.braceR);\n}\n\nfunction tsParseModuleOrNamespaceDeclaration() {\n  parseBindingIdentifier(false);\n  if (eat(tt.dot)) {\n    tsParseModuleOrNamespaceDeclaration();\n  } else {\n    tsParseModuleBlock();\n  }\n}\n\nfunction tsParseAmbientExternalModuleDeclaration() {\n  if (isContextual(ContextualKeyword._global)) {\n    parseIdentifier();\n  } else if (match(tt.string)) {\n    parseExprAtom();\n  } else {\n    unexpected();\n  }\n\n  if (match(tt.braceL)) {\n    tsParseModuleBlock();\n  } else {\n    semicolon();\n  }\n}\n\nexport function tsParseImportEqualsDeclaration() {\n  parseImportedIdentifier();\n  expect(tt.eq);\n  tsParseModuleReference();\n  semicolon();\n}\n\nfunction tsIsExternalModuleReference() {\n  return isContextual(ContextualKeyword._require) && lookaheadType() === tt.parenL;\n}\n\nfunction tsParseModuleReference() {\n  if (tsIsExternalModuleReference()) {\n    tsParseExternalModuleReference();\n  } else {\n    tsParseEntityName();\n  }\n}\n\nfunction tsParseExternalModuleReference() {\n  expectContextual(ContextualKeyword._require);\n  expect(tt.parenL);\n  if (!match(tt.string)) {\n    unexpected();\n  }\n  parseLiteral();\n  expect(tt.parenR);\n}\n\n// Utilities\n\n// Returns true if a statement matched.\nfunction tsTryParseDeclare() {\n  if (isLineTerminator()) {\n    return false;\n  }\n  switch (state.type) {\n    case tt._function: {\n      const oldIsType = pushTypeContext(1);\n      next();\n      // We don't need to precisely get the function start here, since it's only used to mark\n      // the function as a type if it's bodiless, and it's already a type here.\n      const functionStart = state.start;\n      parseFunction(functionStart, /* isStatement */ true);\n      popTypeContext(oldIsType);\n      return true;\n    }\n    case tt._class: {\n      const oldIsType = pushTypeContext(1);\n      parseClass(/* isStatement */ true, /* optionalId */ false);\n      popTypeContext(oldIsType);\n      return true;\n    }\n    case tt._const: {\n      if (match(tt._const) && isLookaheadContextual(ContextualKeyword._enum)) {\n        const oldIsType = pushTypeContext(1);\n        // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n        expect(tt._const);\n        expectContextual(ContextualKeyword._enum);\n        state.tokens[state.tokens.length - 1].type = tt._enum;\n        tsParseEnumDeclaration();\n        popTypeContext(oldIsType);\n        return true;\n      }\n    }\n    // falls through\n    case tt._var:\n    case tt._let: {\n      const oldIsType = pushTypeContext(1);\n      parseVarStatement(state.type !== tt._var);\n      popTypeContext(oldIsType);\n      return true;\n    }\n    case tt.name: {\n      const oldIsType = pushTypeContext(1);\n      const contextualKeyword = state.contextualKeyword;\n      let matched = false;\n      if (contextualKeyword === ContextualKeyword._global) {\n        tsParseAmbientExternalModuleDeclaration();\n        matched = true;\n      } else {\n        matched = tsParseDeclaration(contextualKeyword, /* isBeforeToken */ true);\n      }\n      popTypeContext(oldIsType);\n      return matched;\n    }\n    default:\n      return false;\n  }\n}\n\n// Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n// Returns true if it matched a declaration.\nfunction tsTryParseExportDeclaration() {\n  return tsParseDeclaration(state.contextualKeyword, /* isBeforeToken */ true);\n}\n\n// Returns true if it matched a statement.\nfunction tsParseExpressionStatement(contextualKeyword) {\n  switch (contextualKeyword) {\n    case ContextualKeyword._declare: {\n      const declareTokenIndex = state.tokens.length - 1;\n      const matched = tsTryParseDeclare();\n      if (matched) {\n        state.tokens[declareTokenIndex].type = tt._declare;\n        return true;\n      }\n      break;\n    }\n    case ContextualKeyword._global:\n      // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n      // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n      if (match(tt.braceL)) {\n        tsParseModuleBlock();\n        return true;\n      }\n      break;\n\n    default:\n      return tsParseDeclaration(contextualKeyword, /* isBeforeToken */ false);\n  }\n  return false;\n}\n\n/**\n * Common code for parsing a declaration.\n *\n * isBeforeToken indicates that the current parser state is at the contextual\n * keyword (and that it is not yet emitted) rather than reading the token after\n * it. When isBeforeToken is true, we may be preceded by an `export` token and\n * should include that token in a type context we create, e.g. to handle\n * `export interface` or `export type`. (This is a bit of a hack and should be\n * cleaned up at some point.)\n *\n * Returns true if it matched a declaration.\n */\nfunction tsParseDeclaration(contextualKeyword, isBeforeToken) {\n  switch (contextualKeyword) {\n    case ContextualKeyword._abstract:\n      if (tsCheckLineTerminator(isBeforeToken) && match(tt._class)) {\n        state.tokens[state.tokens.length - 1].type = tt._abstract;\n        parseClass(/* isStatement */ true, /* optionalId */ false);\n        return true;\n      }\n      break;\n\n    case ContextualKeyword._enum:\n      if (tsCheckLineTerminator(isBeforeToken) && match(tt.name)) {\n        state.tokens[state.tokens.length - 1].type = tt._enum;\n        tsParseEnumDeclaration();\n        return true;\n      }\n      break;\n\n    case ContextualKeyword._interface:\n      if (tsCheckLineTerminator(isBeforeToken) && match(tt.name)) {\n        // `next` is true in \"export\" and \"declare\" contexts, so we want to remove that token\n        // as well.\n        const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);\n        tsParseInterfaceDeclaration();\n        popTypeContext(oldIsType);\n        return true;\n      }\n      break;\n\n    case ContextualKeyword._module:\n      if (tsCheckLineTerminator(isBeforeToken)) {\n        if (match(tt.string)) {\n          const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);\n          tsParseAmbientExternalModuleDeclaration();\n          popTypeContext(oldIsType);\n          return true;\n        } else if (match(tt.name)) {\n          const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);\n          tsParseModuleOrNamespaceDeclaration();\n          popTypeContext(oldIsType);\n          return true;\n        }\n      }\n      break;\n\n    case ContextualKeyword._namespace:\n      if (tsCheckLineTerminator(isBeforeToken) && match(tt.name)) {\n        const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);\n        tsParseModuleOrNamespaceDeclaration();\n        popTypeContext(oldIsType);\n        return true;\n      }\n      break;\n\n    case ContextualKeyword._type:\n      if (tsCheckLineTerminator(isBeforeToken) && match(tt.name)) {\n        const oldIsType = pushTypeContext(isBeforeToken ? 2 : 1);\n        tsParseTypeAliasDeclaration();\n        popTypeContext(oldIsType);\n        return true;\n      }\n      break;\n\n    default:\n      break;\n  }\n  return false;\n}\n\nfunction tsCheckLineTerminator(isBeforeToken) {\n  if (isBeforeToken) {\n    // Babel checks hasFollowingLineBreak here and returns false, but this\n    // doesn't actually come up, e.g. `export interface` can never be on its own\n    // line in valid code.\n    next();\n    return true;\n  } else {\n    return !isLineTerminator();\n  }\n}\n\n// Returns true if there was a generic async arrow function.\nfunction tsTryParseGenericAsyncArrowFunction() {\n  const snapshot = state.snapshot();\n\n  tsParseTypeParameters();\n  parseFunctionParams();\n  tsTryParseTypeOrTypePredicateAnnotation();\n  expect(tt.arrow);\n\n  if (state.error) {\n    state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n\n  parseFunctionBody(true);\n  return true;\n}\n\n/**\n * If necessary, hack the tokenizer state so that this bitshift was actually a\n * less-than token, then keep parsing. This should only be used in situations\n * where we restore from snapshot on error (which reverts this change) or\n * where bitshift would be illegal anyway (e.g. in a class \"extends\" clause).\n *\n * This hack is useful to handle situations like foo<<T>() => void>() where\n * there can legitimately be two open-angle-brackets in a row in TS.\n */\nfunction tsParseTypeArgumentsWithPossibleBitshift() {\n  if (state.type === tt.bitShiftL) {\n    state.pos -= 1;\n    finishToken(tt.lessThan);\n  }\n  tsParseTypeArguments();\n}\n\nfunction tsParseTypeArguments() {\n  const oldIsType = pushTypeContext(0);\n  expect(tt.lessThan);\n  while (!match(tt.greaterThan) && !state.error) {\n    tsParseType();\n    eat(tt.comma);\n  }\n  if (!oldIsType) {\n    // If the type arguments are present in an expression context, e.g.\n    // f<number>(), then the > sign should be tokenized as a non-type token.\n    // In particular, f(a < b, c >= d) should parse the >= as a single token,\n    // resulting in a syntax error and fallback to the non-type-args\n    // interpretation. In the success case, even though the > is tokenized as a\n    // non-type token, it still must be marked as a type token so that it is\n    // erased.\n    popTypeContext(oldIsType);\n    rescan_gt();\n    expect(tt.greaterThan);\n    state.tokens[state.tokens.length - 1].isType = true;\n  } else {\n    expect(tt.greaterThan);\n    popTypeContext(oldIsType);\n  }\n}\n\nexport function tsIsDeclarationStart() {\n  if (match(tt.name)) {\n    switch (state.contextualKeyword) {\n      case ContextualKeyword._abstract:\n      case ContextualKeyword._declare:\n      case ContextualKeyword._enum:\n      case ContextualKeyword._interface:\n      case ContextualKeyword._module:\n      case ContextualKeyword._namespace:\n      case ContextualKeyword._type:\n        return true;\n      default:\n        break;\n    }\n  }\n\n  return false;\n}\n\n// ======================================================\n// OVERRIDES\n// ======================================================\n\nexport function tsParseFunctionBodyAndFinish(functionStart, funcContextId) {\n  // For arrow functions, `parseArrow` handles the return type itself.\n  if (match(tt.colon)) {\n    tsParseTypeOrTypePredicateAnnotation(tt.colon);\n  }\n\n  // The original code checked the node type to make sure this function type allows a missing\n  // body, but we skip that to avoid sending around the node type. We instead just use the\n  // allowExpressionBody boolean to make sure it's not an arrow function.\n  if (!match(tt.braceL) && isLineTerminator()) {\n    // Retroactively mark the function declaration as a type.\n    let i = state.tokens.length - 1;\n    while (\n      i >= 0 &&\n      (state.tokens[i].start >= functionStart ||\n        state.tokens[i].type === tt._default ||\n        state.tokens[i].type === tt._export)\n    ) {\n      state.tokens[i].isType = true;\n      i--;\n    }\n    return;\n  }\n\n  parseFunctionBody(false, funcContextId);\n}\n\nexport function tsParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if (!hasPrecedingLineBreak() && eat(tt.bang)) {\n    state.tokens[state.tokens.length - 1].type = tt.nonNullAssertion;\n    return;\n  }\n\n  if (match(tt.lessThan) || match(tt.bitShiftL)) {\n    // There are number of things we are going to \"maybe\" parse, like type arguments on\n    // tagged template expressions. If any of them fail, walk it back and continue.\n    const snapshot = state.snapshot();\n\n    if (!noCalls && atPossibleAsync()) {\n      // Almost certainly this is a generic async function `async <T>() => ...\n      // But it might be a call with a type argument `async<T>();`\n      const asyncArrowFn = tsTryParseGenericAsyncArrowFunction();\n      if (asyncArrowFn) {\n        return;\n      }\n    }\n    tsParseTypeArgumentsWithPossibleBitshift();\n    if (!noCalls && eat(tt.parenL)) {\n      // With f<T>(), the subscriptStartIndex marker is on the ( token.\n      state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n      parseCallExpressionArguments();\n    } else if (match(tt.backQuote)) {\n      // Tagged template with a type argument.\n      parseTemplate();\n    } else if (\n      // The remaining possible case is an instantiation expression, e.g.\n      // Array<number> . Check for a few cases that would disqualify it and\n      // cause us to bail out.\n      // a<b>>c is not (a<b>)>c, but a<(b>>c)\n      state.type === tt.greaterThan ||\n      // a<b>c is (a<b)>c\n      (state.type !== tt.parenL &&\n        Boolean(state.type & TokenType.IS_EXPRESSION_START) &&\n        !hasPrecedingLineBreak())\n    ) {\n      // Bail out. We have something like a<b>c, which is not an expression with\n      // type arguments but an (a < b) > c comparison.\n      unexpected();\n    }\n\n    if (state.error) {\n      state.restoreFromSnapshot(snapshot);\n    } else {\n      return;\n    }\n  } else if (!noCalls && match(tt.questionDot) && lookaheadType() === tt.lessThan) {\n    // If we see f?.<, then this must be an optional call with a type argument.\n    next();\n    state.tokens[startTokenIndex].isOptionalChainStart = true;\n    // With f?.<T>(), the subscriptStartIndex marker is on the ?. token.\n    state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n    tsParseTypeArguments();\n    expect(tt.parenL);\n    parseCallExpressionArguments();\n  }\n  baseParseSubscript(startTokenIndex, noCalls, stopState);\n}\n\nexport function tsTryParseExport() {\n  if (eat(tt._import)) {\n    // One of these cases:\n    // export import A = B;\n    // export import type A = require(\"A\");\n    if (isContextual(ContextualKeyword._type) && lookaheadType() !== tt.eq) {\n      // Eat a `type` token, unless it's actually an identifier name.\n      expectContextual(ContextualKeyword._type);\n    }\n    tsParseImportEqualsDeclaration();\n    return true;\n  } else if (eat(tt.eq)) {\n    // `export = x;`\n    parseExpression();\n    semicolon();\n    return true;\n  } else if (eatContextual(ContextualKeyword._as)) {\n    // `export as namespace A;`\n    // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n    expectContextual(ContextualKeyword._namespace);\n    parseIdentifier();\n    semicolon();\n    return true;\n  } else {\n    if (isContextual(ContextualKeyword._type)) {\n      const nextType = lookaheadType();\n      // export type {foo} from 'a';\n      // export type * from 'a';'\n      // export type * as ns from 'a';'\n      if (nextType === tt.braceL || nextType === tt.star) {\n        next();\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Parse a TS import specifier, which may be prefixed with \"type\" and may be of\n * the form `foo as bar`.\n *\n * The number of identifier-like tokens we see happens to be enough to uniquely\n * identify the form, so simply count the number of identifiers rather than\n * matching the words `type` or `as`. This is particularly important because\n * `type` and `as` could each actually be plain identifiers rather than\n * keywords.\n */\nexport function tsParseImportSpecifier() {\n  parseIdentifier();\n  if (match(tt.comma) || match(tt.braceR)) {\n    // import {foo}\n    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;\n    return;\n  }\n  parseIdentifier();\n  if (match(tt.comma) || match(tt.braceR)) {\n    // import {type foo}\n    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;\n    state.tokens[state.tokens.length - 2].isType = true;\n    state.tokens[state.tokens.length - 1].isType = true;\n    return;\n  }\n  parseIdentifier();\n  if (match(tt.comma) || match(tt.braceR)) {\n    // import {foo as bar}\n    state.tokens[state.tokens.length - 3].identifierRole = IdentifierRole.ImportAccess;\n    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;\n    return;\n  }\n  parseIdentifier();\n  // import {type foo as bar}\n  state.tokens[state.tokens.length - 3].identifierRole = IdentifierRole.ImportAccess;\n  state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportDeclaration;\n  state.tokens[state.tokens.length - 4].isType = true;\n  state.tokens[state.tokens.length - 3].isType = true;\n  state.tokens[state.tokens.length - 2].isType = true;\n  state.tokens[state.tokens.length - 1].isType = true;\n}\n\n/**\n * Just like named import specifiers, export specifiers can have from 1 to 4\n * tokens, inclusive, and the number of tokens determines the role of each token.\n */\nexport function tsParseExportSpecifier() {\n  parseIdentifier();\n  if (match(tt.comma) || match(tt.braceR)) {\n    // export {foo}\n    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ExportAccess;\n    return;\n  }\n  parseIdentifier();\n  if (match(tt.comma) || match(tt.braceR)) {\n    // export {type foo}\n    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ExportAccess;\n    state.tokens[state.tokens.length - 2].isType = true;\n    state.tokens[state.tokens.length - 1].isType = true;\n    return;\n  }\n  parseIdentifier();\n  if (match(tt.comma) || match(tt.braceR)) {\n    // export {foo as bar}\n    state.tokens[state.tokens.length - 3].identifierRole = IdentifierRole.ExportAccess;\n    return;\n  }\n  parseIdentifier();\n  // export {type foo as bar}\n  state.tokens[state.tokens.length - 3].identifierRole = IdentifierRole.ExportAccess;\n  state.tokens[state.tokens.length - 4].isType = true;\n  state.tokens[state.tokens.length - 3].isType = true;\n  state.tokens[state.tokens.length - 2].isType = true;\n  state.tokens[state.tokens.length - 1].isType = true;\n}\n\nexport function tsTryParseExportDefaultExpression() {\n  if (isContextual(ContextualKeyword._abstract) && lookaheadType() === tt._class) {\n    state.type = tt._abstract;\n    next(); // Skip \"abstract\"\n    parseClass(true, true);\n    return true;\n  }\n  if (isContextual(ContextualKeyword._interface)) {\n    // Make sure \"export default\" are considered type tokens so the whole thing is removed.\n    const oldIsType = pushTypeContext(2);\n    tsParseDeclaration(ContextualKeyword._interface, true);\n    popTypeContext(oldIsType);\n    return true;\n  }\n  return false;\n}\n\nexport function tsTryParseStatementContent() {\n  if (state.type === tt._const) {\n    const ahead = lookaheadTypeAndKeyword();\n    if (ahead.type === tt.name && ahead.contextualKeyword === ContextualKeyword._enum) {\n      expect(tt._const);\n      expectContextual(ContextualKeyword._enum);\n      state.tokens[state.tokens.length - 1].type = tt._enum;\n      tsParseEnumDeclaration();\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function tsTryParseClassMemberWithIsStatic(isStatic) {\n  const memberStartIndexAfterStatic = state.tokens.length;\n  tsParseModifiers([\n    ContextualKeyword._abstract,\n    ContextualKeyword._readonly,\n    ContextualKeyword._declare,\n    ContextualKeyword._static,\n    ContextualKeyword._override,\n  ]);\n\n  const modifiersEndIndex = state.tokens.length;\n  const found = tsTryParseIndexSignature();\n  if (found) {\n    // Index signatures are type declarations, so set the modifier tokens as\n    // type tokens. Most tokens could be assumed to be type tokens, but `static`\n    // is ambiguous unless we set it explicitly here.\n    const memberStartIndex = isStatic\n      ? memberStartIndexAfterStatic - 1\n      : memberStartIndexAfterStatic;\n    for (let i = memberStartIndex; i < modifiersEndIndex; i++) {\n      state.tokens[i].isType = true;\n    }\n    return true;\n  }\n  return false;\n}\n\n// Note: The reason we do this in `parseIdentifierStatement` and not `parseStatement`\n// is that e.g. `type()` is valid JS, so we must try parsing that first.\n// If it's really a type, we will parse `type` as the statement, and can correct it here\n// by parsing the rest.\nexport function tsParseIdentifierStatement(contextualKeyword) {\n  const matched = tsParseExpressionStatement(contextualKeyword);\n  if (!matched) {\n    semicolon();\n  }\n}\n\nexport function tsParseExportDeclaration() {\n  // \"export declare\" is equivalent to just \"export\".\n  const isDeclare = eatContextual(ContextualKeyword._declare);\n  if (isDeclare) {\n    state.tokens[state.tokens.length - 1].type = tt._declare;\n  }\n\n  let matchedDeclaration = false;\n  if (match(tt.name)) {\n    if (isDeclare) {\n      const oldIsType = pushTypeContext(2);\n      matchedDeclaration = tsTryParseExportDeclaration();\n      popTypeContext(oldIsType);\n    } else {\n      matchedDeclaration = tsTryParseExportDeclaration();\n    }\n  }\n  if (!matchedDeclaration) {\n    if (isDeclare) {\n      const oldIsType = pushTypeContext(2);\n      parseStatement(true);\n      popTypeContext(oldIsType);\n    } else {\n      parseStatement(true);\n    }\n  }\n}\n\nexport function tsAfterParseClassSuper(hasSuper) {\n  if (hasSuper && (match(tt.lessThan) || match(tt.bitShiftL))) {\n    tsParseTypeArgumentsWithPossibleBitshift();\n  }\n  if (eatContextual(ContextualKeyword._implements)) {\n    state.tokens[state.tokens.length - 1].type = tt._implements;\n    const oldIsType = pushTypeContext(1);\n    tsParseHeritageClause();\n    popTypeContext(oldIsType);\n  }\n}\n\nexport function tsStartParseObjPropValue() {\n  tsTryParseTypeParameters();\n}\n\nexport function tsStartParseFunctionParams() {\n  tsTryParseTypeParameters();\n}\n\n// `let x: number;`\nexport function tsAfterParseVarHead() {\n  const oldIsType = pushTypeContext(0);\n  if (!hasPrecedingLineBreak()) {\n    eat(tt.bang);\n  }\n  tsTryParseTypeAnnotation();\n  popTypeContext(oldIsType);\n}\n\n// parse the return type of an async arrow function - let foo = (async (): number => {});\nexport function tsStartParseAsyncArrowFromCallExpression() {\n  if (match(tt.colon)) {\n    tsParseTypeAnnotation();\n  }\n}\n\n// Returns true if the expression was an arrow function.\nexport function tsParseMaybeAssign(noIn, isWithinParens) {\n  // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n  if (isJSXEnabled) {\n    return tsParseMaybeAssignWithJSX(noIn, isWithinParens);\n  } else {\n    return tsParseMaybeAssignWithoutJSX(noIn, isWithinParens);\n  }\n}\n\nexport function tsParseMaybeAssignWithJSX(noIn, isWithinParens) {\n  if (!match(tt.lessThan)) {\n    return baseParseMaybeAssign(noIn, isWithinParens);\n  }\n\n  // Prefer to parse JSX if possible. But may be an arrow fn.\n  const snapshot = state.snapshot();\n  let wasArrow = baseParseMaybeAssign(noIn, isWithinParens);\n  if (state.error) {\n    state.restoreFromSnapshot(snapshot);\n  } else {\n    return wasArrow;\n  }\n\n  // Otherwise, try as type-parameterized arrow function.\n  state.type = tt.typeParameterStart;\n  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n  tsParseTypeParameters();\n  wasArrow = baseParseMaybeAssign(noIn, isWithinParens);\n  if (!wasArrow) {\n    unexpected();\n  }\n\n  return wasArrow;\n}\n\nexport function tsParseMaybeAssignWithoutJSX(noIn, isWithinParens) {\n  if (!match(tt.lessThan)) {\n    return baseParseMaybeAssign(noIn, isWithinParens);\n  }\n\n  const snapshot = state.snapshot();\n  // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n  tsParseTypeParameters();\n  const wasArrow = baseParseMaybeAssign(noIn, isWithinParens);\n  if (!wasArrow) {\n    unexpected();\n  }\n  if (state.error) {\n    state.restoreFromSnapshot(snapshot);\n  } else {\n    return wasArrow;\n  }\n\n  // Try parsing a type cast instead of an arrow function.\n  // This will start with a type assertion (via parseMaybeUnary).\n  // But don't directly call `tsParseTypeAssertion` because we want to handle any binary after it.\n  return baseParseMaybeAssign(noIn, isWithinParens);\n}\n\nexport function tsParseArrow() {\n  if (match(tt.colon)) {\n    // This is different from how the TS parser does it.\n    // TS uses lookahead. Babylon parses it as a parenthesized expression and converts.\n    const snapshot = state.snapshot();\n\n    tsParseTypeOrTypePredicateAnnotation(tt.colon);\n    if (canInsertSemicolon()) unexpected();\n    if (!match(tt.arrow)) unexpected();\n\n    if (state.error) {\n      state.restoreFromSnapshot(snapshot);\n    }\n  }\n  return eat(tt.arrow);\n}\n\n// Allow type annotations inside of a parameter list.\nexport function tsParseAssignableListItemTypes() {\n  const oldIsType = pushTypeContext(0);\n  eat(tt.question);\n  tsTryParseTypeAnnotation();\n  popTypeContext(oldIsType);\n}\n\nexport function tsParseMaybeDecoratorArguments() {\n  if (match(tt.lessThan) || match(tt.bitShiftL)) {\n    tsParseTypeArgumentsWithPossibleBitshift();\n  }\n  baseParseMaybeDecoratorArguments();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14083, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/plugins/jsx/index.js"],"sourcesContent":["import {\n  eat,\n  finishToken,\n  getTokenFromCode,\n  IdentifierRole,\n  JSXRole,\n  match,\n  next,\n  skipSpace,\n  Token,\n} from \"../../tokenizer/index\";\nimport {TokenType as tt} from \"../../tokenizer/types\";\nimport {input, isTypeScriptEnabled, state} from \"../../traverser/base\";\nimport {parseExpression, parseMaybeAssign} from \"../../traverser/expression\";\nimport {expect, unexpected} from \"../../traverser/util\";\nimport {charCodes} from \"../../util/charcodes\";\nimport {IS_IDENTIFIER_CHAR, IS_IDENTIFIER_START} from \"../../util/identifier\";\nimport {tsTryParseJSXTypeArgument} from \"../typescript\";\n\n/**\n * Read token with JSX contents.\n *\n * In addition to detecting jsxTagStart and also regular tokens that might be\n * part of an expression, this code detects the start and end of text ranges\n * within JSX children. In order to properly count the number of children, we\n * distinguish jsxText from jsxEmptyText, which is a text range that simplifies\n * to the empty string after JSX whitespace trimming.\n *\n * It turns out that a JSX text range will simplify to the empty string if and\n * only if both of these conditions hold:\n * - The range consists entirely of whitespace characters (only counting space,\n *   tab, \\r, and \\n).\n * - The range has at least one newline.\n * This can be proven by analyzing any implementation of whitespace trimming,\n * e.g. formatJSXTextLiteral in Sucrase or cleanJSXElementLiteralChild in Babel.\n */\nfunction jsxReadToken() {\n  let sawNewline = false;\n  let sawNonWhitespace = false;\n  while (true) {\n    if (state.pos >= input.length) {\n      unexpected(\"Unterminated JSX contents\");\n      return;\n    }\n\n    const ch = input.charCodeAt(state.pos);\n    if (ch === charCodes.lessThan || ch === charCodes.leftCurlyBrace) {\n      if (state.pos === state.start) {\n        if (ch === charCodes.lessThan) {\n          state.pos++;\n          finishToken(tt.jsxTagStart);\n          return;\n        }\n        getTokenFromCode(ch);\n        return;\n      }\n      if (sawNewline && !sawNonWhitespace) {\n        finishToken(tt.jsxEmptyText);\n      } else {\n        finishToken(tt.jsxText);\n      }\n      return;\n    }\n\n    // This is part of JSX text.\n    if (ch === charCodes.lineFeed) {\n      sawNewline = true;\n    } else if (ch !== charCodes.space && ch !== charCodes.carriageReturn && ch !== charCodes.tab) {\n      sawNonWhitespace = true;\n    }\n    state.pos++;\n  }\n}\n\nfunction jsxReadString(quote) {\n  state.pos++;\n  for (;;) {\n    if (state.pos >= input.length) {\n      unexpected(\"Unterminated string constant\");\n      return;\n    }\n\n    const ch = input.charCodeAt(state.pos);\n    if (ch === quote) {\n      state.pos++;\n      break;\n    }\n    state.pos++;\n  }\n  finishToken(tt.string);\n}\n\n// Read a JSX identifier (valid tag or attribute name).\n//\n// Optimized version since JSX identifiers can't contain\n// escape characters and so can be read as single slice.\n// Also assumes that first character was already checked\n// by isIdentifierStart in readToken.\n\nfunction jsxReadWord() {\n  let ch;\n  do {\n    if (state.pos > input.length) {\n      unexpected(\"Unexpectedly reached the end of input.\");\n      return;\n    }\n    ch = input.charCodeAt(++state.pos);\n  } while (IS_IDENTIFIER_CHAR[ch] || ch === charCodes.dash);\n  finishToken(tt.jsxName);\n}\n\n// Parse next token as JSX identifier\nfunction jsxParseIdentifier() {\n  nextJSXTagToken();\n}\n\n// Parse namespaced identifier.\nfunction jsxParseNamespacedName(identifierRole) {\n  jsxParseIdentifier();\n  if (!eat(tt.colon)) {\n    // Plain identifier, so this is an access.\n    state.tokens[state.tokens.length - 1].identifierRole = identifierRole;\n    return;\n  }\n  // Process the second half of the namespaced name.\n  jsxParseIdentifier();\n}\n\n// Parses element name in any form - namespaced, member\n// or single identifier.\nfunction jsxParseElementName() {\n  const firstTokenIndex = state.tokens.length;\n  jsxParseNamespacedName(IdentifierRole.Access);\n  let hadDot = false;\n  while (match(tt.dot)) {\n    hadDot = true;\n    nextJSXTagToken();\n    jsxParseIdentifier();\n  }\n  // For tags like <div> with a lowercase letter and no dots, the name is\n  // actually *not* an identifier access, since it's referring to a built-in\n  // tag name. Remove the identifier role in this case so that it's not\n  // accidentally transformed by the imports transform when preserving JSX.\n  if (!hadDot) {\n    const firstToken = state.tokens[firstTokenIndex];\n    const firstChar = input.charCodeAt(firstToken.start);\n    if (firstChar >= charCodes.lowercaseA && firstChar <= charCodes.lowercaseZ) {\n      firstToken.identifierRole = null;\n    }\n  }\n}\n\n// Parses any type of JSX attribute value.\nfunction jsxParseAttributeValue() {\n  switch (state.type) {\n    case tt.braceL:\n      next();\n      parseExpression();\n      nextJSXTagToken();\n      return;\n\n    case tt.jsxTagStart:\n      jsxParseElement();\n      nextJSXTagToken();\n      return;\n\n    case tt.string:\n      nextJSXTagToken();\n      return;\n\n    default:\n      unexpected(\"JSX value should be either an expression or a quoted JSX text\");\n  }\n}\n\n// Parse JSX spread child, after already processing the {\n// Does not parse the closing }\nfunction jsxParseSpreadChild() {\n  expect(tt.ellipsis);\n  parseExpression();\n}\n\n// Parses JSX opening tag starting after \"<\".\n// Returns true if the tag was self-closing.\n// Does not parse the last token.\nfunction jsxParseOpeningElement(initialTokenIndex) {\n  if (match(tt.jsxTagEnd)) {\n    // This is an open-fragment.\n    return false;\n  }\n  jsxParseElementName();\n  if (isTypeScriptEnabled) {\n    tsTryParseJSXTypeArgument();\n  }\n  let hasSeenPropSpread = false;\n  while (!match(tt.slash) && !match(tt.jsxTagEnd) && !state.error) {\n    if (eat(tt.braceL)) {\n      hasSeenPropSpread = true;\n      expect(tt.ellipsis);\n      parseMaybeAssign();\n      // }\n      nextJSXTagToken();\n      continue;\n    }\n    if (\n      hasSeenPropSpread &&\n      state.end - state.start === 3 &&\n      input.charCodeAt(state.start) === charCodes.lowercaseK &&\n      input.charCodeAt(state.start + 1) === charCodes.lowercaseE &&\n      input.charCodeAt(state.start + 2) === charCodes.lowercaseY\n    ) {\n      state.tokens[initialTokenIndex].jsxRole = JSXRole.KeyAfterPropSpread;\n    }\n    jsxParseNamespacedName(IdentifierRole.ObjectKey);\n    if (match(tt.eq)) {\n      nextJSXTagToken();\n      jsxParseAttributeValue();\n    }\n  }\n  const isSelfClosing = match(tt.slash);\n  if (isSelfClosing) {\n    // /\n    nextJSXTagToken();\n  }\n  return isSelfClosing;\n}\n\n// Parses JSX closing tag starting after \"</\".\n// Does not parse the last token.\nfunction jsxParseClosingElement() {\n  if (match(tt.jsxTagEnd)) {\n    // Fragment syntax, so we immediately have a tag end.\n    return;\n  }\n  jsxParseElementName();\n}\n\n// Parses entire JSX element, including its opening tag\n// (starting after \"<\"), attributes, contents and closing tag.\n// Does not parse the last token.\nfunction jsxParseElementAt() {\n  const initialTokenIndex = state.tokens.length - 1;\n  state.tokens[initialTokenIndex].jsxRole = JSXRole.NoChildren;\n  let numExplicitChildren = 0;\n  const isSelfClosing = jsxParseOpeningElement(initialTokenIndex);\n  if (!isSelfClosing) {\n    nextJSXExprToken();\n    while (true) {\n      switch (state.type) {\n        case tt.jsxTagStart:\n          nextJSXTagToken();\n          if (match(tt.slash)) {\n            nextJSXTagToken();\n            jsxParseClosingElement();\n            // Key after prop spread takes precedence over number of children,\n            // since it means we switch to createElement, which doesn't care\n            // about number of children.\n            if (state.tokens[initialTokenIndex].jsxRole !== JSXRole.KeyAfterPropSpread) {\n              if (numExplicitChildren === 1) {\n                state.tokens[initialTokenIndex].jsxRole = JSXRole.OneChild;\n              } else if (numExplicitChildren > 1) {\n                state.tokens[initialTokenIndex].jsxRole = JSXRole.StaticChildren;\n              }\n            }\n            return;\n          }\n          numExplicitChildren++;\n          jsxParseElementAt();\n          nextJSXExprToken();\n          break;\n\n        case tt.jsxText:\n          numExplicitChildren++;\n          nextJSXExprToken();\n          break;\n\n        case tt.jsxEmptyText:\n          nextJSXExprToken();\n          break;\n\n        case tt.braceL:\n          next();\n          if (match(tt.ellipsis)) {\n            jsxParseSpreadChild();\n            nextJSXExprToken();\n            // Spread children are a mechanism to explicitly mark children as\n            // static, so count it as 2 children to satisfy the \"more than one\n            // child\" condition.\n            numExplicitChildren += 2;\n          } else {\n            // If we see {}, this is an empty pseudo-expression that doesn't\n            // count as a child.\n            if (!match(tt.braceR)) {\n              numExplicitChildren++;\n              parseExpression();\n            }\n            nextJSXExprToken();\n          }\n\n          break;\n\n        // istanbul ignore next - should never happen\n        default:\n          unexpected();\n          return;\n      }\n    }\n  }\n}\n\n// Parses entire JSX element from current position.\n// Does not parse the last token.\nexport function jsxParseElement() {\n  nextJSXTagToken();\n  jsxParseElementAt();\n}\n\n// ==================================\n// Overrides\n// ==================================\n\nexport function nextJSXTagToken() {\n  state.tokens.push(new Token());\n  skipSpace();\n  state.start = state.pos;\n  const code = input.charCodeAt(state.pos);\n\n  if (IS_IDENTIFIER_START[code]) {\n    jsxReadWord();\n  } else if (code === charCodes.quotationMark || code === charCodes.apostrophe) {\n    jsxReadString(code);\n  } else {\n    // The following tokens are just one character each.\n    ++state.pos;\n    switch (code) {\n      case charCodes.greaterThan:\n        finishToken(tt.jsxTagEnd);\n        break;\n      case charCodes.lessThan:\n        finishToken(tt.jsxTagStart);\n        break;\n      case charCodes.slash:\n        finishToken(tt.slash);\n        break;\n      case charCodes.equalsTo:\n        finishToken(tt.eq);\n        break;\n      case charCodes.leftCurlyBrace:\n        finishToken(tt.braceL);\n        break;\n      case charCodes.dot:\n        finishToken(tt.dot);\n        break;\n      case charCodes.colon:\n        finishToken(tt.colon);\n        break;\n      default:\n        unexpected();\n    }\n  }\n}\n\nfunction nextJSXExprToken() {\n  state.tokens.push(new Token());\n  state.start = state.pos;\n  jsxReadToken();\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14418, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/plugins/types.js"],"sourcesContent":["import {eatTypeToken, lookaheadType, match} from \"../tokenizer/index\";\nimport {TokenType as tt} from \"../tokenizer/types\";\nimport {isFlowEnabled, isTypeScriptEnabled} from \"../traverser/base\";\nimport {baseParseConditional} from \"../traverser/expression\";\nimport {flowParseTypeAnnotation} from \"./flow\";\nimport {tsParseTypeAnnotation} from \"./typescript\";\n\n/**\n * Common parser code for TypeScript and Flow.\n */\n\n// An apparent conditional expression could actually be an optional parameter in an arrow function.\nexport function typedParseConditional(noIn) {\n  // If we see ?:, this can't possibly be a valid conditional. typedParseParenItem will be called\n  // later to finish off the arrow parameter. We also need to handle bare ? tokens for optional\n  // parameters without type annotations, i.e. ?, and ?) .\n  if (match(tt.question)) {\n    const nextType = lookaheadType();\n    if (nextType === tt.colon || nextType === tt.comma || nextType === tt.parenR) {\n      return;\n    }\n  }\n  baseParseConditional(noIn);\n}\n\n// Note: These \"type casts\" are *not* valid TS expressions.\n// But we parse them here and change them when completing the arrow function.\nexport function typedParseParenItem() {\n  eatTypeToken(tt.question);\n  if (match(tt.colon)) {\n    if (isTypeScriptEnabled) {\n      tsParseTypeAnnotation();\n    } else if (isFlowEnabled) {\n      flowParseTypeAnnotation();\n    }\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAOO,SAAS,sBAAsB,IAAI;IACxC,+FAA+F;IAC/F,6FAA6F;IAC7F,wDAAwD;IACxD,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,QAAQ,GAAG;QACtB,MAAM,WAAW,IAAA,iNAAa;QAC9B,IAAI,aAAa,6MAAE,CAAC,KAAK,IAAI,aAAa,6MAAE,CAAC,KAAK,IAAI,aAAa,6MAAE,CAAC,MAAM,EAAE;YAC5E;QACF;IACF;IACA,IAAA,6NAAoB,EAAC;AACvB;AAIO,SAAS;IACd,IAAA,gNAAY,EAAC,6MAAE,CAAC,QAAQ;IACxB,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK,GAAG;QACnB,IAAI,sNAAmB,EAAE;YACvB,IAAA,4NAAqB;QACvB,OAAO,IAAI,gNAAa,EAAE;YACxB,IAAA,wNAAuB;QACzB;IACF;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 14462, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/traverser/expression.js"],"sourcesContent":["/* eslint max-len: 0 */\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  flowParseArrow,\n  flowParseFunctionBodyAndFinish,\n  flowParseMaybeAssign,\n  flowParseSubscript,\n  flowParseSubscripts,\n  flowParseVariance,\n  flowStartParseAsyncArrowFromCallExpression,\n  flowStartParseNewArguments,\n  flowStartParseObjPropValue,\n} from \"../plugins/flow\";\nimport {jsxParseElement} from \"../plugins/jsx/index\";\nimport {typedParseConditional, typedParseParenItem} from \"../plugins/types\";\nimport {\n  tsParseArrow,\n  tsParseFunctionBodyAndFinish,\n  tsParseMaybeAssign,\n  tsParseSubscript,\n  tsParseType,\n  tsParseTypeAssertion,\n  tsStartParseAsyncArrowFromCallExpression,\n  tsStartParseObjPropValue,\n} from \"../plugins/typescript\";\nimport {\n  eat,\n  IdentifierRole,\n  lookaheadCharCode,\n  lookaheadType,\n  match,\n  next,\n  nextTemplateToken,\n  popTypeContext,\n  pushTypeContext,\n  rescan_gt,\n  retokenizeSlashAsRegex,\n} from \"../tokenizer/index\";\nimport {ContextualKeyword} from \"../tokenizer/keywords\";\nimport {Scope} from \"../tokenizer/state\";\nimport {TokenType, TokenType as tt} from \"../tokenizer/types\";\nimport {charCodes} from \"../util/charcodes\";\nimport {IS_IDENTIFIER_START} from \"../util/identifier\";\nimport {getNextContextId, isFlowEnabled, isJSXEnabled, isTypeScriptEnabled, state} from \"./base\";\nimport {\n  markPriorBindingIdentifier,\n  parseBindingIdentifier,\n  parseMaybeDefault,\n  parseRest,\n  parseSpread,\n} from \"./lval\";\nimport {\n  parseBlock,\n  parseBlockBody,\n  parseClass,\n  parseDecorators,\n  parseFunction,\n  parseFunctionParams,\n} from \"./statement\";\nimport {\n  canInsertSemicolon,\n  eatContextual,\n  expect,\n  expectContextual,\n  hasFollowingLineBreak,\n  hasPrecedingLineBreak,\n  isContextual,\n  unexpected,\n} from \"./util\";\n\nexport class StopState {\n  \n  constructor(stop) {\n    this.stop = stop;\n  }\n}\n\n// ### Expression parsing\n\n// These nest, from the most general expression type at the top to\n// 'atomic', nondivisible expression types at the bottom. Most of\n// the functions will simply let the function (s) below them parse,\n// and, *if* the syntactic construct they handle is present, wrap\n// the AST node that the inner parser gave them in another node.\nexport function parseExpression(noIn = false) {\n  parseMaybeAssign(noIn);\n  if (match(tt.comma)) {\n    while (eat(tt.comma)) {\n      parseMaybeAssign(noIn);\n    }\n  }\n}\n\n/**\n * noIn is used when parsing a for loop so that we don't interpret a following \"in\" as the binary\n * operatior.\n * isWithinParens is used to indicate that we're parsing something that might be a comma expression\n * or might be an arrow function or might be a Flow type assertion (which requires explicit parens).\n * In these cases, we should allow : and ?: after the initial \"left\" part.\n */\nexport function parseMaybeAssign(noIn = false, isWithinParens = false) {\n  if (isTypeScriptEnabled) {\n    return tsParseMaybeAssign(noIn, isWithinParens);\n  } else if (isFlowEnabled) {\n    return flowParseMaybeAssign(noIn, isWithinParens);\n  } else {\n    return baseParseMaybeAssign(noIn, isWithinParens);\n  }\n}\n\n// Parse an assignment expression. This includes applications of\n// operators like `+=`.\n// Returns true if the expression was an arrow function.\nexport function baseParseMaybeAssign(noIn, isWithinParens) {\n  if (match(tt._yield)) {\n    parseYield();\n    return false;\n  }\n\n  if (match(tt.parenL) || match(tt.name) || match(tt._yield)) {\n    state.potentialArrowAt = state.start;\n  }\n\n  const wasArrow = parseMaybeConditional(noIn);\n  if (isWithinParens) {\n    parseParenItem();\n  }\n  if (state.type & TokenType.IS_ASSIGN) {\n    next();\n    parseMaybeAssign(noIn);\n    return false;\n  }\n  return wasArrow;\n}\n\n// Parse a ternary conditional (`?:`) operator.\n// Returns true if the expression was an arrow function.\nfunction parseMaybeConditional(noIn) {\n  const wasArrow = parseExprOps(noIn);\n  if (wasArrow) {\n    return true;\n  }\n  parseConditional(noIn);\n  return false;\n}\n\nfunction parseConditional(noIn) {\n  if (isTypeScriptEnabled || isFlowEnabled) {\n    typedParseConditional(noIn);\n  } else {\n    baseParseConditional(noIn);\n  }\n}\n\nexport function baseParseConditional(noIn) {\n  if (eat(tt.question)) {\n    parseMaybeAssign();\n    expect(tt.colon);\n    parseMaybeAssign(noIn);\n  }\n}\n\n// Start the precedence parser.\n// Returns true if this was an arrow function\nfunction parseExprOps(noIn) {\n  const startTokenIndex = state.tokens.length;\n  const wasArrow = parseMaybeUnary();\n  if (wasArrow) {\n    return true;\n  }\n  parseExprOp(startTokenIndex, -1, noIn);\n  return false;\n}\n\n// Parse binary operators with the operator precedence parsing\n// algorithm. `left` is the left-hand side of the operator.\n// `minPrec` provides context that allows the function to stop and\n// defer further parser to one of its callers when it encounters an\n// operator that has a lower precedence than the set it is parsing.\nfunction parseExprOp(startTokenIndex, minPrec, noIn) {\n  if (\n    isTypeScriptEnabled &&\n    (tt._in & TokenType.PRECEDENCE_MASK) > minPrec &&\n    !hasPrecedingLineBreak() &&\n    (eatContextual(ContextualKeyword._as) || eatContextual(ContextualKeyword._satisfies))\n  ) {\n    const oldIsType = pushTypeContext(1);\n    tsParseType();\n    popTypeContext(oldIsType);\n    rescan_gt();\n    parseExprOp(startTokenIndex, minPrec, noIn);\n    return;\n  }\n\n  const prec = state.type & TokenType.PRECEDENCE_MASK;\n  if (prec > 0 && (!noIn || !match(tt._in))) {\n    if (prec > minPrec) {\n      const op = state.type;\n      next();\n      if (op === tt.nullishCoalescing) {\n        state.tokens[state.tokens.length - 1].nullishStartIndex = startTokenIndex;\n      }\n\n      const rhsStartTokenIndex = state.tokens.length;\n      parseMaybeUnary();\n      // Extend the right operand of this operator if possible.\n      parseExprOp(rhsStartTokenIndex, op & TokenType.IS_RIGHT_ASSOCIATIVE ? prec - 1 : prec, noIn);\n      if (op === tt.nullishCoalescing) {\n        state.tokens[startTokenIndex].numNullishCoalesceStarts++;\n        state.tokens[state.tokens.length - 1].numNullishCoalesceEnds++;\n      }\n      // Continue with any future operator holding this expression as the left operand.\n      parseExprOp(startTokenIndex, minPrec, noIn);\n    }\n  }\n}\n\n// Parse unary operators, both prefix and postfix.\n// Returns true if this was an arrow function.\nexport function parseMaybeUnary() {\n  if (isTypeScriptEnabled && !isJSXEnabled && eat(tt.lessThan)) {\n    tsParseTypeAssertion();\n    return false;\n  }\n  if (\n    isContextual(ContextualKeyword._module) &&\n    lookaheadCharCode() === charCodes.leftCurlyBrace &&\n    !hasFollowingLineBreak()\n  ) {\n    parseModuleExpression();\n    return false;\n  }\n  if (state.type & TokenType.IS_PREFIX) {\n    next();\n    parseMaybeUnary();\n    return false;\n  }\n\n  const wasArrow = parseExprSubscripts();\n  if (wasArrow) {\n    return true;\n  }\n  while (state.type & TokenType.IS_POSTFIX && !canInsertSemicolon()) {\n    // The tokenizer calls everything a preincrement, so make it a postincrement when\n    // we see it in that context.\n    if (state.type === tt.preIncDec) {\n      state.type = tt.postIncDec;\n    }\n    next();\n  }\n  return false;\n}\n\n// Parse call, dot, and `[]`-subscript expressions.\n// Returns true if this was an arrow function.\nexport function parseExprSubscripts() {\n  const startTokenIndex = state.tokens.length;\n  const wasArrow = parseExprAtom();\n  if (wasArrow) {\n    return true;\n  }\n  parseSubscripts(startTokenIndex);\n  // If there was any optional chain operation, the start token would be marked\n  // as such, so also mark the end now.\n  if (state.tokens.length > startTokenIndex && state.tokens[startTokenIndex].isOptionalChainStart) {\n    state.tokens[state.tokens.length - 1].isOptionalChainEnd = true;\n  }\n  return false;\n}\n\nfunction parseSubscripts(startTokenIndex, noCalls = false) {\n  if (isFlowEnabled) {\n    flowParseSubscripts(startTokenIndex, noCalls);\n  } else {\n    baseParseSubscripts(startTokenIndex, noCalls);\n  }\n}\n\nexport function baseParseSubscripts(startTokenIndex, noCalls = false) {\n  const stopState = new StopState(false);\n  do {\n    parseSubscript(startTokenIndex, noCalls, stopState);\n  } while (!stopState.stop && !state.error);\n}\n\nfunction parseSubscript(startTokenIndex, noCalls, stopState) {\n  if (isTypeScriptEnabled) {\n    tsParseSubscript(startTokenIndex, noCalls, stopState);\n  } else if (isFlowEnabled) {\n    flowParseSubscript(startTokenIndex, noCalls, stopState);\n  } else {\n    baseParseSubscript(startTokenIndex, noCalls, stopState);\n  }\n}\n\n/** Set 'state.stop = true' to indicate that we should stop parsing subscripts. */\nexport function baseParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if (!noCalls && eat(tt.doubleColon)) {\n    parseNoCallExpr();\n    stopState.stop = true;\n    // Propagate startTokenIndex so that `a::b?.()` will keep `a` as the first token. We may want\n    // to revisit this in the future when fully supporting bind syntax.\n    parseSubscripts(startTokenIndex, noCalls);\n  } else if (match(tt.questionDot)) {\n    state.tokens[startTokenIndex].isOptionalChainStart = true;\n    if (noCalls && lookaheadType() === tt.parenL) {\n      stopState.stop = true;\n      return;\n    }\n    next();\n    state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n    if (eat(tt.bracketL)) {\n      parseExpression();\n      expect(tt.bracketR);\n    } else if (eat(tt.parenL)) {\n      parseCallExpressionArguments();\n    } else {\n      parseMaybePrivateName();\n    }\n  } else if (eat(tt.dot)) {\n    state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n    parseMaybePrivateName();\n  } else if (eat(tt.bracketL)) {\n    state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n    parseExpression();\n    expect(tt.bracketR);\n  } else if (!noCalls && match(tt.parenL)) {\n    if (atPossibleAsync()) {\n      // We see \"async\", but it's possible it's a usage of the name \"async\". Parse as if it's a\n      // function call, and if we see an arrow later, backtrack and re-parse as a parameter list.\n      const snapshot = state.snapshot();\n      const asyncStartTokenIndex = state.tokens.length;\n      next();\n      state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n\n      const callContextId = getNextContextId();\n\n      state.tokens[state.tokens.length - 1].contextId = callContextId;\n      parseCallExpressionArguments();\n      state.tokens[state.tokens.length - 1].contextId = callContextId;\n\n      if (shouldParseAsyncArrow()) {\n        // We hit an arrow, so backtrack and start again parsing function parameters.\n        state.restoreFromSnapshot(snapshot);\n        stopState.stop = true;\n        state.scopeDepth++;\n\n        parseFunctionParams();\n        parseAsyncArrowFromCallExpression(asyncStartTokenIndex);\n      }\n    } else {\n      next();\n      state.tokens[state.tokens.length - 1].subscriptStartIndex = startTokenIndex;\n      const callContextId = getNextContextId();\n      state.tokens[state.tokens.length - 1].contextId = callContextId;\n      parseCallExpressionArguments();\n      state.tokens[state.tokens.length - 1].contextId = callContextId;\n    }\n  } else if (match(tt.backQuote)) {\n    // Tagged template expression.\n    parseTemplate();\n  } else {\n    stopState.stop = true;\n  }\n}\n\nexport function atPossibleAsync() {\n  // This was made less strict than the original version to avoid passing around nodes, but it\n  // should be safe to have rare false positives here.\n  return (\n    state.tokens[state.tokens.length - 1].contextualKeyword === ContextualKeyword._async &&\n    !canInsertSemicolon()\n  );\n}\n\nexport function parseCallExpressionArguments() {\n  let first = true;\n  while (!eat(tt.parenR) && !state.error) {\n    if (first) {\n      first = false;\n    } else {\n      expect(tt.comma);\n      if (eat(tt.parenR)) {\n        break;\n      }\n    }\n\n    parseExprListItem(false);\n  }\n}\n\nfunction shouldParseAsyncArrow() {\n  return match(tt.colon) || match(tt.arrow);\n}\n\nfunction parseAsyncArrowFromCallExpression(startTokenIndex) {\n  if (isTypeScriptEnabled) {\n    tsStartParseAsyncArrowFromCallExpression();\n  } else if (isFlowEnabled) {\n    flowStartParseAsyncArrowFromCallExpression();\n  }\n  expect(tt.arrow);\n  parseArrowExpression(startTokenIndex);\n}\n\n// Parse a no-call expression (like argument of `new` or `::` operators).\n\nfunction parseNoCallExpr() {\n  const startTokenIndex = state.tokens.length;\n  parseExprAtom();\n  parseSubscripts(startTokenIndex, true);\n}\n\n// Parse an atomic expression — either a single token that is an\n// expression, an expression started by a keyword like `function` or\n// `new`, or an expression wrapped in punctuation like `()`, `[]`,\n// or `{}`.\n// Returns true if the parsed expression was an arrow function.\nexport function parseExprAtom() {\n  if (eat(tt.modulo)) {\n    // V8 intrinsic expression. Just parse the identifier, and the function invocation is parsed\n    // naturally.\n    parseIdentifier();\n    return false;\n  }\n\n  if (match(tt.jsxText) || match(tt.jsxEmptyText)) {\n    parseLiteral();\n    return false;\n  } else if (match(tt.lessThan) && isJSXEnabled) {\n    state.type = tt.jsxTagStart;\n    jsxParseElement();\n    next();\n    return false;\n  }\n\n  const canBeArrow = state.potentialArrowAt === state.start;\n  switch (state.type) {\n    case tt.slash:\n    case tt.assign:\n      retokenizeSlashAsRegex();\n    // Fall through.\n\n    case tt._super:\n    case tt._this:\n    case tt.regexp:\n    case tt.num:\n    case tt.bigint:\n    case tt.decimal:\n    case tt.string:\n    case tt._null:\n    case tt._true:\n    case tt._false:\n      next();\n      return false;\n\n    case tt._import:\n      next();\n      if (match(tt.dot)) {\n        // import.meta\n        state.tokens[state.tokens.length - 1].type = tt.name;\n        next();\n        parseIdentifier();\n      }\n      return false;\n\n    case tt.name: {\n      const startTokenIndex = state.tokens.length;\n      const functionStart = state.start;\n      const contextualKeyword = state.contextualKeyword;\n      parseIdentifier();\n      if (contextualKeyword === ContextualKeyword._await) {\n        parseAwait();\n        return false;\n      } else if (\n        contextualKeyword === ContextualKeyword._async &&\n        match(tt._function) &&\n        !canInsertSemicolon()\n      ) {\n        next();\n        parseFunction(functionStart, false);\n        return false;\n      } else if (\n        canBeArrow &&\n        contextualKeyword === ContextualKeyword._async &&\n        !canInsertSemicolon() &&\n        match(tt.name)\n      ) {\n        state.scopeDepth++;\n        parseBindingIdentifier(false);\n        expect(tt.arrow);\n        // let foo = async bar => {};\n        parseArrowExpression(startTokenIndex);\n        return true;\n      } else if (match(tt._do) && !canInsertSemicolon()) {\n        next();\n        parseBlock();\n        return false;\n      }\n\n      if (canBeArrow && !canInsertSemicolon() && match(tt.arrow)) {\n        state.scopeDepth++;\n        markPriorBindingIdentifier(false);\n        expect(tt.arrow);\n        parseArrowExpression(startTokenIndex);\n        return true;\n      }\n\n      state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.Access;\n      return false;\n    }\n\n    case tt._do: {\n      next();\n      parseBlock();\n      return false;\n    }\n\n    case tt.parenL: {\n      const wasArrow = parseParenAndDistinguishExpression(canBeArrow);\n      return wasArrow;\n    }\n\n    case tt.bracketL:\n      next();\n      parseExprList(tt.bracketR, true);\n      return false;\n\n    case tt.braceL:\n      parseObj(false, false);\n      return false;\n\n    case tt._function:\n      parseFunctionExpression();\n      return false;\n\n    case tt.at:\n      parseDecorators();\n    // Fall through.\n\n    case tt._class:\n      parseClass(false);\n      return false;\n\n    case tt._new:\n      parseNew();\n      return false;\n\n    case tt.backQuote:\n      parseTemplate();\n      return false;\n\n    case tt.doubleColon: {\n      next();\n      parseNoCallExpr();\n      return false;\n    }\n\n    case tt.hash: {\n      const code = lookaheadCharCode();\n      if (IS_IDENTIFIER_START[code] || code === charCodes.backslash) {\n        parseMaybePrivateName();\n      } else {\n        next();\n      }\n      // Smart pipeline topic reference.\n      return false;\n    }\n\n    default:\n      unexpected();\n      return false;\n  }\n}\n\nfunction parseMaybePrivateName() {\n  eat(tt.hash);\n  parseIdentifier();\n}\n\nfunction parseFunctionExpression() {\n  const functionStart = state.start;\n  parseIdentifier();\n  if (eat(tt.dot)) {\n    // function.sent\n    parseIdentifier();\n  }\n  parseFunction(functionStart, false);\n}\n\nexport function parseLiteral() {\n  next();\n}\n\nexport function parseParenExpression() {\n  expect(tt.parenL);\n  parseExpression();\n  expect(tt.parenR);\n}\n\n// Returns true if this was an arrow expression.\nfunction parseParenAndDistinguishExpression(canBeArrow) {\n  // Assume this is a normal parenthesized expression, but if we see an arrow, we'll bail and\n  // start over as a parameter list.\n  const snapshot = state.snapshot();\n\n  const startTokenIndex = state.tokens.length;\n  expect(tt.parenL);\n\n  let first = true;\n\n  while (!match(tt.parenR) && !state.error) {\n    if (first) {\n      first = false;\n    } else {\n      expect(tt.comma);\n      if (match(tt.parenR)) {\n        break;\n      }\n    }\n\n    if (match(tt.ellipsis)) {\n      parseRest(false /* isBlockScope */);\n      parseParenItem();\n      break;\n    } else {\n      parseMaybeAssign(false, true);\n    }\n  }\n\n  expect(tt.parenR);\n\n  if (canBeArrow && shouldParseArrow()) {\n    const wasArrow = parseArrow();\n    if (wasArrow) {\n      // It was an arrow function this whole time, so start over and parse it as params so that we\n      // get proper token annotations.\n      state.restoreFromSnapshot(snapshot);\n      state.scopeDepth++;\n      // Don't specify a context ID because arrow functions don't need a context ID.\n      parseFunctionParams();\n      parseArrow();\n      parseArrowExpression(startTokenIndex);\n      if (state.error) {\n        // Nevermind! This must have been something that looks very much like an\n        // arrow function but where its \"parameter list\" isn't actually a valid\n        // parameter list. Force non-arrow parsing.\n        // See https://github.com/alangpierce/sucrase/issues/666 for an example.\n        state.restoreFromSnapshot(snapshot);\n        parseParenAndDistinguishExpression(false);\n        return false;\n      }\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction shouldParseArrow() {\n  return match(tt.colon) || !canInsertSemicolon();\n}\n\n// Returns whether there was an arrow token.\nexport function parseArrow() {\n  if (isTypeScriptEnabled) {\n    return tsParseArrow();\n  } else if (isFlowEnabled) {\n    return flowParseArrow();\n  } else {\n    return eat(tt.arrow);\n  }\n}\n\nfunction parseParenItem() {\n  if (isTypeScriptEnabled || isFlowEnabled) {\n    typedParseParenItem();\n  }\n}\n\n// New's precedence is slightly tricky. It must allow its argument to\n// be a `[]` or dot subscript expression, but not a call — at least,\n// not without wrapping it in parentheses. Thus, it uses the noCalls\n// argument to parseSubscripts to prevent it from consuming the\n// argument list.\nfunction parseNew() {\n  expect(tt._new);\n  if (eat(tt.dot)) {\n    // new.target\n    parseIdentifier();\n    return;\n  }\n  parseNewCallee();\n  if (isFlowEnabled) {\n    flowStartParseNewArguments();\n  }\n  if (eat(tt.parenL)) {\n    parseExprList(tt.parenR);\n  }\n}\n\nfunction parseNewCallee() {\n  parseNoCallExpr();\n  eat(tt.questionDot);\n}\n\nexport function parseTemplate() {\n  // Finish `, read quasi\n  nextTemplateToken();\n  // Finish quasi, read ${\n  nextTemplateToken();\n  while (!match(tt.backQuote) && !state.error) {\n    expect(tt.dollarBraceL);\n    parseExpression();\n    // Finish }, read quasi\n    nextTemplateToken();\n    // Finish quasi, read either ${ or `\n    nextTemplateToken();\n  }\n  next();\n}\n\n// Parse an object literal or binding pattern.\nexport function parseObj(isPattern, isBlockScope) {\n  // Attach a context ID to the object open and close brace and each object key.\n  const contextId = getNextContextId();\n  let first = true;\n\n  next();\n  state.tokens[state.tokens.length - 1].contextId = contextId;\n\n  while (!eat(tt.braceR) && !state.error) {\n    if (first) {\n      first = false;\n    } else {\n      expect(tt.comma);\n      if (eat(tt.braceR)) {\n        break;\n      }\n    }\n\n    let isGenerator = false;\n    if (match(tt.ellipsis)) {\n      const previousIndex = state.tokens.length;\n      parseSpread();\n      if (isPattern) {\n        // Mark role when the only thing being spread over is an identifier.\n        if (state.tokens.length === previousIndex + 2) {\n          markPriorBindingIdentifier(isBlockScope);\n        }\n        if (eat(tt.braceR)) {\n          break;\n        }\n      }\n      continue;\n    }\n\n    if (!isPattern) {\n      isGenerator = eat(tt.star);\n    }\n\n    if (!isPattern && isContextual(ContextualKeyword._async)) {\n      if (isGenerator) unexpected();\n\n      parseIdentifier();\n      if (\n        match(tt.colon) ||\n        match(tt.parenL) ||\n        match(tt.braceR) ||\n        match(tt.eq) ||\n        match(tt.comma)\n      ) {\n        // This is a key called \"async\" rather than an async function.\n      } else {\n        if (match(tt.star)) {\n          next();\n          isGenerator = true;\n        }\n        parsePropertyName(contextId);\n      }\n    } else {\n      parsePropertyName(contextId);\n    }\n\n    parseObjPropValue(isPattern, isBlockScope, contextId);\n  }\n\n  state.tokens[state.tokens.length - 1].contextId = contextId;\n}\n\nfunction isGetterOrSetterMethod(isPattern) {\n  // We go off of the next and don't bother checking if the node key is actually \"get\" or \"set\".\n  // This lets us avoid generating a node, and should only make the validation worse.\n  return (\n    !isPattern &&\n    (match(tt.string) || // get \"string\"() {}\n      match(tt.num) || // get 1() {}\n      match(tt.bracketL) || // get [\"string\"]() {}\n      match(tt.name) || // get foo() {}\n      !!(state.type & TokenType.IS_KEYWORD)) // get debugger() {}\n  );\n}\n\n// Returns true if this was a method.\nfunction parseObjectMethod(isPattern, objectContextId) {\n  // We don't need to worry about modifiers because object methods can't have optional bodies, so\n  // the start will never be used.\n  const functionStart = state.start;\n  if (match(tt.parenL)) {\n    if (isPattern) unexpected();\n    parseMethod(functionStart, /* isConstructor */ false);\n    return true;\n  }\n\n  if (isGetterOrSetterMethod(isPattern)) {\n    parsePropertyName(objectContextId);\n    parseMethod(functionStart, /* isConstructor */ false);\n    return true;\n  }\n  return false;\n}\n\nfunction parseObjectProperty(isPattern, isBlockScope) {\n  if (eat(tt.colon)) {\n    if (isPattern) {\n      parseMaybeDefault(isBlockScope);\n    } else {\n      parseMaybeAssign(false);\n    }\n    return;\n  }\n\n  // Since there's no colon, we assume this is an object shorthand.\n\n  // If we're in a destructuring, we've now discovered that the key was actually an assignee, so\n  // we need to tag it as a declaration with the appropriate scope. Otherwise, we might need to\n  // transform it on access, so mark it as a normal object shorthand.\n  let identifierRole;\n  if (isPattern) {\n    if (state.scopeDepth === 0) {\n      identifierRole = IdentifierRole.ObjectShorthandTopLevelDeclaration;\n    } else if (isBlockScope) {\n      identifierRole = IdentifierRole.ObjectShorthandBlockScopedDeclaration;\n    } else {\n      identifierRole = IdentifierRole.ObjectShorthandFunctionScopedDeclaration;\n    }\n  } else {\n    identifierRole = IdentifierRole.ObjectShorthand;\n  }\n  state.tokens[state.tokens.length - 1].identifierRole = identifierRole;\n\n  // Regardless of whether we know this to be a pattern or if we're in an ambiguous context, allow\n  // parsing as if there's a default value.\n  parseMaybeDefault(isBlockScope, true);\n}\n\nfunction parseObjPropValue(\n  isPattern,\n  isBlockScope,\n  objectContextId,\n) {\n  if (isTypeScriptEnabled) {\n    tsStartParseObjPropValue();\n  } else if (isFlowEnabled) {\n    flowStartParseObjPropValue();\n  }\n  const wasMethod = parseObjectMethod(isPattern, objectContextId);\n  if (!wasMethod) {\n    parseObjectProperty(isPattern, isBlockScope);\n  }\n}\n\nexport function parsePropertyName(objectContextId) {\n  if (isFlowEnabled) {\n    flowParseVariance();\n  }\n  if (eat(tt.bracketL)) {\n    state.tokens[state.tokens.length - 1].contextId = objectContextId;\n    parseMaybeAssign();\n    expect(tt.bracketR);\n    state.tokens[state.tokens.length - 1].contextId = objectContextId;\n  } else {\n    if (match(tt.num) || match(tt.string) || match(tt.bigint) || match(tt.decimal)) {\n      parseExprAtom();\n    } else {\n      parseMaybePrivateName();\n    }\n\n    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ObjectKey;\n    state.tokens[state.tokens.length - 1].contextId = objectContextId;\n  }\n}\n\n// Parse object or class method.\nexport function parseMethod(functionStart, isConstructor) {\n  const funcContextId = getNextContextId();\n\n  state.scopeDepth++;\n  const startTokenIndex = state.tokens.length;\n  const allowModifiers = isConstructor; // For TypeScript parameter properties\n  parseFunctionParams(allowModifiers, funcContextId);\n  parseFunctionBodyAndFinish(functionStart, funcContextId);\n  const endTokenIndex = state.tokens.length;\n  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));\n  state.scopeDepth--;\n}\n\n// Parse arrow function expression.\n// If the parameters are provided, they will be converted to an\n// assignable list.\nexport function parseArrowExpression(startTokenIndex) {\n  parseFunctionBody(true);\n  const endTokenIndex = state.tokens.length;\n  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));\n  state.scopeDepth--;\n}\n\nexport function parseFunctionBodyAndFinish(functionStart, funcContextId = 0) {\n  if (isTypeScriptEnabled) {\n    tsParseFunctionBodyAndFinish(functionStart, funcContextId);\n  } else if (isFlowEnabled) {\n    flowParseFunctionBodyAndFinish(funcContextId);\n  } else {\n    parseFunctionBody(false, funcContextId);\n  }\n}\n\nexport function parseFunctionBody(allowExpression, funcContextId = 0) {\n  const isExpression = allowExpression && !match(tt.braceL);\n\n  if (isExpression) {\n    parseMaybeAssign();\n  } else {\n    parseBlock(true /* isFunctionScope */, funcContextId);\n  }\n}\n\n// Parses a comma-separated list of expressions, and returns them as\n// an array. `close` is the token type that ends the list, and\n// `allowEmpty` can be turned on to allow subsequent commas with\n// nothing in between them to be parsed as `null` (which is needed\n// for array literals).\n\nfunction parseExprList(close, allowEmpty = false) {\n  let first = true;\n  while (!eat(close) && !state.error) {\n    if (first) {\n      first = false;\n    } else {\n      expect(tt.comma);\n      if (eat(close)) break;\n    }\n    parseExprListItem(allowEmpty);\n  }\n}\n\nfunction parseExprListItem(allowEmpty) {\n  if (allowEmpty && match(tt.comma)) {\n    // Empty item; nothing more to parse for this item.\n  } else if (match(tt.ellipsis)) {\n    parseSpread();\n    parseParenItem();\n  } else if (match(tt.question)) {\n    // Partial function application proposal.\n    next();\n  } else {\n    parseMaybeAssign(false, true);\n  }\n}\n\n// Parse the next token as an identifier.\nexport function parseIdentifier() {\n  next();\n  state.tokens[state.tokens.length - 1].type = tt.name;\n}\n\n// Parses await expression inside async function.\nfunction parseAwait() {\n  parseMaybeUnary();\n}\n\n// Parses yield expression inside generator.\nfunction parseYield() {\n  next();\n  if (!match(tt.semi) && !canInsertSemicolon()) {\n    eat(tt.star);\n    parseMaybeAssign();\n  }\n}\n\n// https://github.com/tc39/proposal-js-module-blocks\nfunction parseModuleExpression() {\n  expectContextual(ContextualKeyword._module);\n  expect(tt.braceL);\n  // For now, just call parseBlockBody to parse the block. In the future when we\n  // implement full support, we'll want to emit scopes and possibly other\n  // information.\n  parseBlockBody(tt.braceR);\n}\n"],"names":[],"mappings":"AAAA,qBAAqB,GAErB,oEAAoE;AACpE,mEAAmE;AACnE,mEAAmE;AACnE,oEAAoE;AACpE,8DAA8D;AAC9D,mEAAmE;AACnE,gEAAgE;AAChE,mEAAmE;AACnE,qCAAqC;AACrC,EAAE;AACF,mEAAmE;AACnE,kEAAkE;AAClE,8DAA8D;AAC9D,6DAA6D;AAC7D,6CAA6C;AAC7C,EAAE;AACF,iEAAiE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEjE;AAWA;AACA;AACA;AAUA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAQA;;;;;;;;;;;;;;;AAWO,MAAM;IAEX,YAAY,IAAI,CAAE;QAChB,IAAI,CAAC,IAAI,GAAG;IACd;AACF;AASO,SAAS;QAAgB,OAAA,iEAAO;IACrC,iBAAiB;IACjB,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK,GAAG;QACnB,MAAO,IAAA,uMAAG,EAAC,6MAAE,CAAC,KAAK,EAAG;YACpB,iBAAiB;QACnB;IACF;AACF;AASO,SAAS;QAAiB,OAAA,iEAAO,OAAO,iBAAA,iEAAiB;IAC9D,IAAI,sNAAmB,EAAE;QACvB,OAAO,IAAA,yNAAkB,EAAC,MAAM;IAClC,OAAO,IAAI,gNAAa,EAAE;QACxB,OAAO,IAAA,qNAAoB,EAAC,MAAM;IACpC,OAAO;QACL,OAAO,qBAAqB,MAAM;IACpC;AACF;AAKO,SAAS,qBAAqB,IAAI,EAAE,cAAc;IACvD,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,GAAG;QACpB;QACA,OAAO;IACT;IAEA,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,KAAK,IAAA,yMAAK,EAAC,6MAAE,CAAC,IAAI,KAAK,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,GAAG;QAC1D,wMAAK,CAAC,gBAAgB,GAAG,wMAAK,CAAC,KAAK;IACtC;IAEA,MAAM,WAAW,sBAAsB;IACvC,IAAI,gBAAgB;QAClB;IACF;IACA,IAAI,wMAAK,CAAC,IAAI,GAAG,6MAAS,CAAC,SAAS,EAAE;QACpC,IAAA,wMAAI;QACJ,iBAAiB;QACjB,OAAO;IACT;IACA,OAAO;AACT;AAEA,+CAA+C;AAC/C,wDAAwD;AACxD,SAAS,sBAAsB,IAAI;IACjC,MAAM,WAAW,aAAa;IAC9B,IAAI,UAAU;QACZ,OAAO;IACT;IACA,iBAAiB;IACjB,OAAO;AACT;AAEA,SAAS,iBAAiB,IAAI;IAC5B,IAAI,sNAAmB,IAAI,gNAAa,EAAE;QACxC,IAAA,uNAAqB,EAAC;IACxB,OAAO;QACL,qBAAqB;IACvB;AACF;AAEO,SAAS,qBAAqB,IAAI;IACvC,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,QAAQ,GAAG;QACpB;QACA,IAAA,yMAAM,EAAC,6MAAE,CAAC,KAAK;QACf,iBAAiB;IACnB;AACF;AAEA,+BAA+B;AAC/B,6CAA6C;AAC7C,SAAS,aAAa,IAAI;IACxB,MAAM,kBAAkB,wMAAK,CAAC,MAAM,CAAC,MAAM;IAC3C,MAAM,WAAW;IACjB,IAAI,UAAU;QACZ,OAAO;IACT;IACA,YAAY,iBAAiB,CAAC,GAAG;IACjC,OAAO;AACT;AAEA,8DAA8D;AAC9D,2DAA2D;AAC3D,kEAAkE;AAClE,mEAAmE;AACnE,mEAAmE;AACnE,SAAS,YAAY,eAAe,EAAE,OAAO,EAAE,IAAI;IACjD,IACE,sNAAmB,IACnB,CAAC,6MAAE,CAAC,GAAG,GAAG,6MAAS,CAAC,eAAe,IAAI,WACvC,CAAC,IAAA,wNAAqB,OACtB,CAAC,IAAA,gNAAa,EAAC,wNAAiB,CAAC,GAAG,KAAK,IAAA,gNAAa,EAAC,wNAAiB,CAAC,UAAU,CAAC,GACpF;QACA,MAAM,YAAY,IAAA,mNAAe,EAAC;QAClC,IAAA,kNAAW;QACX,IAAA,kNAAc,EAAC;QACf,IAAA,6MAAS;QACT,YAAY,iBAAiB,SAAS;QACtC;IACF;IAEA,MAAM,OAAO,wMAAK,CAAC,IAAI,GAAG,6MAAS,CAAC,eAAe;IACnD,IAAI,OAAO,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAA,yMAAK,EAAC,6MAAE,CAAC,GAAG,CAAC,GAAG;QACzC,IAAI,OAAO,SAAS;YAClB,MAAM,KAAK,wMAAK,CAAC,IAAI;YACrB,IAAA,wMAAI;YACJ,IAAI,OAAO,6MAAE,CAAC,iBAAiB,EAAE;gBAC/B,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,iBAAiB,GAAG;YAC5D;YAEA,MAAM,qBAAqB,wMAAK,CAAC,MAAM,CAAC,MAAM;YAC9C;YACA,yDAAyD;YACzD,YAAY,oBAAoB,KAAK,6MAAS,CAAC,oBAAoB,GAAG,OAAO,IAAI,MAAM;YACvF,IAAI,OAAO,6MAAE,CAAC,iBAAiB,EAAE;gBAC/B,wMAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,wBAAwB;gBACtD,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,sBAAsB;YAC9D;YACA,iFAAiF;YACjF,YAAY,iBAAiB,SAAS;QACxC;IACF;AACF;AAIO,SAAS;IACd,IAAI,sNAAmB,IAAI,CAAC,+MAAY,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,QAAQ,GAAG;QAC5D,IAAA,2NAAoB;QACpB,OAAO;IACT;IACA,IACE,IAAA,+MAAY,EAAC,wNAAiB,CAAC,OAAO,KACtC,IAAA,qNAAiB,QAAO,4MAAS,CAAC,cAAc,IAChD,CAAC,IAAA,wNAAqB,KACtB;QACA;QACA,OAAO;IACT;IACA,IAAI,wMAAK,CAAC,IAAI,GAAG,6MAAS,CAAC,SAAS,EAAE;QACpC,IAAA,wMAAI;QACJ;QACA,OAAO;IACT;IAEA,MAAM,WAAW;IACjB,IAAI,UAAU;QACZ,OAAO;IACT;IACA,MAAO,wMAAK,CAAC,IAAI,GAAG,6MAAS,CAAC,UAAU,IAAI,CAAC,IAAA,qNAAkB,IAAI;QACjE,iFAAiF;QACjF,6BAA6B;QAC7B,IAAI,wMAAK,CAAC,IAAI,KAAK,6MAAE,CAAC,SAAS,EAAE;YAC/B,wMAAK,CAAC,IAAI,GAAG,6MAAE,CAAC,UAAU;QAC5B;QACA,IAAA,wMAAI;IACN;IACA,OAAO;AACT;AAIO,SAAS;IACd,MAAM,kBAAkB,wMAAK,CAAC,MAAM,CAAC,MAAM;IAC3C,MAAM,WAAW;IACjB,IAAI,UAAU;QACZ,OAAO;IACT;IACA,gBAAgB;IAChB,6EAA6E;IAC7E,qCAAqC;IACrC,IAAI,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,mBAAmB,wMAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,EAAE;QAC/F,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,kBAAkB,GAAG;IAC7D;IACA,OAAO;AACT;AAEA,SAAS,gBAAgB,eAAe;QAAE,UAAA,iEAAU;IAClD,IAAI,gNAAa,EAAE;QACjB,IAAA,oNAAmB,EAAC,iBAAiB;IACvC,OAAO;QACL,oBAAoB,iBAAiB;IACvC;AACF;AAEO,SAAS,oBAAoB,eAAe;QAAE,UAAA,iEAAU;IAC7D,MAAM,YAAY,IAAI,UAAU;IAChC,GAAG;QACD,eAAe,iBAAiB,SAAS;IAC3C,QAAS,CAAC,UAAU,IAAI,IAAI,CAAC,wMAAK,CAAC,KAAK,CAAE;AAC5C;AAEA,SAAS,eAAe,eAAe,EAAE,OAAO,EAAE,SAAS;IACzD,IAAI,sNAAmB,EAAE;QACvB,IAAA,uNAAgB,EAAC,iBAAiB,SAAS;IAC7C,OAAO,IAAI,gNAAa,EAAE;QACxB,IAAA,mNAAkB,EAAC,iBAAiB,SAAS;IAC/C,OAAO;QACL,mBAAmB,iBAAiB,SAAS;IAC/C;AACF;AAGO,SAAS,mBACd,eAAe,EACf,OAAO,EACP,SAAS;IAET,IAAI,CAAC,WAAW,IAAA,uMAAG,EAAC,6MAAE,CAAC,WAAW,GAAG;QACnC;QACA,UAAU,IAAI,GAAG;QACjB,6FAA6F;QAC7F,mEAAmE;QACnE,gBAAgB,iBAAiB;IACnC,OAAO,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,WAAW,GAAG;QAChC,wMAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,oBAAoB,GAAG;QACrD,IAAI,WAAW,IAAA,iNAAa,QAAO,6MAAE,CAAC,MAAM,EAAE;YAC5C,UAAU,IAAI,GAAG;YACjB;QACF;QACA,IAAA,wMAAI;QACJ,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,mBAAmB,GAAG;QAE5D,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,QAAQ,GAAG;YACpB;YACA,IAAA,yMAAM,EAAC,6MAAE,CAAC,QAAQ;QACpB,OAAO,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,MAAM,GAAG;YACzB;QACF,OAAO;YACL;QACF;IACF,OAAO,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,GAAG,GAAG;QACtB,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,mBAAmB,GAAG;QAC5D;IACF,OAAO,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,QAAQ,GAAG;QAC3B,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,mBAAmB,GAAG;QAC5D;QACA,IAAA,yMAAM,EAAC,6MAAE,CAAC,QAAQ;IACpB,OAAO,IAAI,CAAC,WAAW,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,GAAG;QACvC,IAAI,mBAAmB;YACrB,yFAAyF;YACzF,2FAA2F;YAC3F,MAAM,WAAW,wMAAK,CAAC,QAAQ;YAC/B,MAAM,uBAAuB,wMAAK,CAAC,MAAM,CAAC,MAAM;YAChD,IAAA,wMAAI;YACJ,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,mBAAmB,GAAG;YAE5D,MAAM,gBAAgB,IAAA,mNAAgB;YAEtC,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;YAClD;YACA,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;YAElD,IAAI,yBAAyB;gBAC3B,6EAA6E;gBAC7E,wMAAK,CAAC,mBAAmB,CAAC;gBAC1B,UAAU,IAAI,GAAG;gBACjB,wMAAK,CAAC,UAAU;gBAEhB,IAAA,2NAAmB;gBACnB,kCAAkC;YACpC;QACF,OAAO;YACL,IAAA,wMAAI;YACJ,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,mBAAmB,GAAG;YAC5D,MAAM,gBAAgB,IAAA,mNAAgB;YACtC,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;YAClD;YACA,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;QACpD;IACF,OAAO,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,SAAS,GAAG;QAC9B,8BAA8B;QAC9B;IACF,OAAO;QACL,UAAU,IAAI,GAAG;IACnB;AACF;AAEO,SAAS;IACd,4FAA4F;IAC5F,oDAAoD;IACpD,OACE,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,iBAAiB,KAAK,wNAAiB,CAAC,MAAM,IACpF,CAAC,IAAA,qNAAkB;AAEvB;AAEO,SAAS;IACd,IAAI,QAAQ;IACZ,MAAO,CAAC,IAAA,uMAAG,EAAC,6MAAE,CAAC,MAAM,KAAK,CAAC,wMAAK,CAAC,KAAK,CAAE;QACtC,IAAI,OAAO;YACT,QAAQ;QACV,OAAO;YACL,IAAA,yMAAM,EAAC,6MAAE,CAAC,KAAK;YACf,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,MAAM,GAAG;gBAClB;YACF;QACF;QAEA,kBAAkB;IACpB;AACF;AAEA,SAAS;IACP,OAAO,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK,KAAK,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK;AAC1C;AAEA,SAAS,kCAAkC,eAAe;IACxD,IAAI,sNAAmB,EAAE;QACvB,IAAA,+OAAwC;IAC1C,OAAO,IAAI,gNAAa,EAAE;QACxB,IAAA,2OAA0C;IAC5C;IACA,IAAA,yMAAM,EAAC,6MAAE,CAAC,KAAK;IACf,qBAAqB;AACvB;AAEA,yEAAyE;AAEzE,SAAS;IACP,MAAM,kBAAkB,wMAAK,CAAC,MAAM,CAAC,MAAM;IAC3C;IACA,gBAAgB,iBAAiB;AACnC;AAOO,SAAS;IACd,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,MAAM,GAAG;QAClB,4FAA4F;QAC5F,aAAa;QACb;QACA,OAAO;IACT;IAEA,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,OAAO,KAAK,IAAA,yMAAK,EAAC,6MAAE,CAAC,YAAY,GAAG;QAC/C;QACA,OAAO;IACT,OAAO,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,QAAQ,KAAK,+MAAY,EAAE;QAC7C,wMAAK,CAAC,IAAI,GAAG,6MAAE,CAAC,WAAW;QAC3B,IAAA,wNAAe;QACf,IAAA,wMAAI;QACJ,OAAO;IACT;IAEA,MAAM,aAAa,wMAAK,CAAC,gBAAgB,KAAK,wMAAK,CAAC,KAAK;IACzD,OAAQ,wMAAK,CAAC,IAAI;QAChB,KAAK,6MAAE,CAAC,KAAK;QACb,KAAK,6MAAE,CAAC,MAAM;YACZ,IAAA,0NAAsB;QACxB,gBAAgB;QAEhB,KAAK,6MAAE,CAAC,MAAM;QACd,KAAK,6MAAE,CAAC,KAAK;QACb,KAAK,6MAAE,CAAC,MAAM;QACd,KAAK,6MAAE,CAAC,GAAG;QACX,KAAK,6MAAE,CAAC,MAAM;QACd,KAAK,6MAAE,CAAC,OAAO;QACf,KAAK,6MAAE,CAAC,MAAM;QACd,KAAK,6MAAE,CAAC,KAAK;QACb,KAAK,6MAAE,CAAC,KAAK;QACb,KAAK,6MAAE,CAAC,MAAM;YACZ,IAAA,wMAAI;YACJ,OAAO;QAET,KAAK,6MAAE,CAAC,OAAO;YACb,IAAA,wMAAI;YACJ,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,GAAG,GAAG;gBACjB,cAAc;gBACd,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,GAAG,6MAAE,CAAC,IAAI;gBACpD,IAAA,wMAAI;gBACJ;YACF;YACA,OAAO;QAET,KAAK,6MAAE,CAAC,IAAI;YAAE;gBACZ,MAAM,kBAAkB,wMAAK,CAAC,MAAM,CAAC,MAAM;gBAC3C,MAAM,gBAAgB,wMAAK,CAAC,KAAK;gBACjC,MAAM,oBAAoB,wMAAK,CAAC,iBAAiB;gBACjD;gBACA,IAAI,sBAAsB,wNAAiB,CAAC,MAAM,EAAE;oBAClD;oBACA,OAAO;gBACT,OAAO,IACL,sBAAsB,wNAAiB,CAAC,MAAM,IAC9C,IAAA,yMAAK,EAAC,6MAAE,CAAC,SAAS,KAClB,CAAC,IAAA,qNAAkB,KACnB;oBACA,IAAA,wMAAI;oBACJ,IAAA,qNAAa,EAAC,eAAe;oBAC7B,OAAO;gBACT,OAAO,IACL,cACA,sBAAsB,wNAAiB,CAAC,MAAM,IAC9C,CAAC,IAAA,qNAAkB,OACnB,IAAA,yMAAK,EAAC,6MAAE,CAAC,IAAI,GACb;oBACA,wMAAK,CAAC,UAAU;oBAChB,IAAA,yNAAsB,EAAC;oBACvB,IAAA,yMAAM,EAAC,6MAAE,CAAC,KAAK;oBACf,6BAA6B;oBAC7B,qBAAqB;oBACrB,OAAO;gBACT,OAAO,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,GAAG,KAAK,CAAC,IAAA,qNAAkB,KAAI;oBACjD,IAAA,wMAAI;oBACJ,IAAA,kNAAU;oBACV,OAAO;gBACT;gBAEA,IAAI,cAAc,CAAC,IAAA,qNAAkB,OAAM,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK,GAAG;oBAC1D,wMAAK,CAAC,UAAU;oBAChB,IAAA,6NAA0B,EAAC;oBAC3B,IAAA,yMAAM,EAAC,6MAAE,CAAC,KAAK;oBACf,qBAAqB;oBACrB,OAAO;gBACT;gBAEA,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,cAAc,GAAG,kNAAc,CAAC,MAAM;gBAC5E,OAAO;YACT;QAEA,KAAK,6MAAE,CAAC,GAAG;YAAE;gBACX,IAAA,wMAAI;gBACJ,IAAA,kNAAU;gBACV,OAAO;YACT;QAEA,KAAK,6MAAE,CAAC,MAAM;YAAE;gBACd,MAAM,WAAW,mCAAmC;gBACpD,OAAO;YACT;QAEA,KAAK,6MAAE,CAAC,QAAQ;YACd,IAAA,wMAAI;YACJ,cAAc,6MAAE,CAAC,QAAQ,EAAE;YAC3B,OAAO;QAET,KAAK,6MAAE,CAAC,MAAM;YACZ,SAAS,OAAO;YAChB,OAAO;QAET,KAAK,6MAAE,CAAC,SAAS;YACf;YACA,OAAO;QAET,KAAK,6MAAE,CAAC,EAAE;YACR,IAAA,uNAAe;QACjB,gBAAgB;QAEhB,KAAK,6MAAE,CAAC,MAAM;YACZ,IAAA,kNAAU,EAAC;YACX,OAAO;QAET,KAAK,6MAAE,CAAC,IAAI;YACV;YACA,OAAO;QAET,KAAK,6MAAE,CAAC,SAAS;YACf;YACA,OAAO;QAET,KAAK,6MAAE,CAAC,WAAW;YAAE;gBACnB,IAAA,wMAAI;gBACJ;gBACA,OAAO;YACT;QAEA,KAAK,6MAAE,CAAC,IAAI;YAAE;gBACZ,MAAM,OAAO,IAAA,qNAAiB;gBAC9B,IAAI,uNAAmB,CAAC,KAAK,IAAI,SAAS,4MAAS,CAAC,SAAS,EAAE;oBAC7D;gBACF,OAAO;oBACL,IAAA,wMAAI;gBACN;gBACA,kCAAkC;gBAClC,OAAO;YACT;QAEA;YACE,IAAA,6MAAU;YACV,OAAO;IACX;AACF;AAEA,SAAS;IACP,IAAA,uMAAG,EAAC,6MAAE,CAAC,IAAI;IACX;AACF;AAEA,SAAS;IACP,MAAM,gBAAgB,wMAAK,CAAC,KAAK;IACjC;IACA,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,GAAG,GAAG;QACf,gBAAgB;QAChB;IACF;IACA,IAAA,qNAAa,EAAC,eAAe;AAC/B;AAEO,SAAS;IACd,IAAA,wMAAI;AACN;AAEO,SAAS;IACd,IAAA,yMAAM,EAAC,6MAAE,CAAC,MAAM;IAChB;IACA,IAAA,yMAAM,EAAC,6MAAE,CAAC,MAAM;AAClB;AAEA,gDAAgD;AAChD,SAAS,mCAAmC,UAAU;IACpD,2FAA2F;IAC3F,kCAAkC;IAClC,MAAM,WAAW,wMAAK,CAAC,QAAQ;IAE/B,MAAM,kBAAkB,wMAAK,CAAC,MAAM,CAAC,MAAM;IAC3C,IAAA,yMAAM,EAAC,6MAAE,CAAC,MAAM;IAEhB,IAAI,QAAQ;IAEZ,MAAO,CAAC,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,KAAK,CAAC,wMAAK,CAAC,KAAK,CAAE;QACxC,IAAI,OAAO;YACT,QAAQ;QACV,OAAO;YACL,IAAA,yMAAM,EAAC,6MAAE,CAAC,KAAK;YACf,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,GAAG;gBACpB;YACF;QACF;QAEA,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,QAAQ,GAAG;YACtB,IAAA,4MAAS,EAAC;YACV;YACA;QACF,OAAO;YACL,iBAAiB,OAAO;QAC1B;IACF;IAEA,IAAA,yMAAM,EAAC,6MAAE,CAAC,MAAM;IAEhB,IAAI,cAAc,oBAAoB;QACpC,MAAM,WAAW;QACjB,IAAI,UAAU;YACZ,4FAA4F;YAC5F,gCAAgC;YAChC,wMAAK,CAAC,mBAAmB,CAAC;YAC1B,wMAAK,CAAC,UAAU;YAChB,8EAA8E;YAC9E,IAAA,2NAAmB;YACnB;YACA,qBAAqB;YACrB,IAAI,wMAAK,CAAC,KAAK,EAAE;gBACf,wEAAwE;gBACxE,uEAAuE;gBACvE,2CAA2C;gBAC3C,wEAAwE;gBACxE,wMAAK,CAAC,mBAAmB,CAAC;gBAC1B,mCAAmC;gBACnC,OAAO;YACT;YACA,OAAO;QACT;IACF;IAEA,OAAO;AACT;AAEA,SAAS;IACP,OAAO,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK,KAAK,CAAC,IAAA,qNAAkB;AAC/C;AAGO,SAAS;IACd,IAAI,sNAAmB,EAAE;QACvB,OAAO,IAAA,mNAAY;IACrB,OAAO,IAAI,gNAAa,EAAE;QACxB,OAAO,IAAA,+MAAc;IACvB,OAAO;QACL,OAAO,IAAA,uMAAG,EAAC,6MAAE,CAAC,KAAK;IACrB;AACF;AAEA,SAAS;IACP,IAAI,sNAAmB,IAAI,gNAAa,EAAE;QACxC,IAAA,qNAAmB;IACrB;AACF;AAEA,qEAAqE;AACrE,oEAAoE;AACpE,oEAAoE;AACpE,+DAA+D;AAC/D,iBAAiB;AACjB,SAAS;IACP,IAAA,yMAAM,EAAC,6MAAE,CAAC,IAAI;IACd,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,GAAG,GAAG;QACf,aAAa;QACb;QACA;IACF;IACA;IACA,IAAI,gNAAa,EAAE;QACjB,IAAA,2NAA0B;IAC5B;IACA,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,MAAM,GAAG;QAClB,cAAc,6MAAE,CAAC,MAAM;IACzB;AACF;AAEA,SAAS;IACP;IACA,IAAA,uMAAG,EAAC,6MAAE,CAAC,WAAW;AACpB;AAEO,SAAS;IACd,uBAAuB;IACvB,IAAA,qNAAiB;IACjB,wBAAwB;IACxB,IAAA,qNAAiB;IACjB,MAAO,CAAC,IAAA,yMAAK,EAAC,6MAAE,CAAC,SAAS,KAAK,CAAC,wMAAK,CAAC,KAAK,CAAE;QAC3C,IAAA,yMAAM,EAAC,6MAAE,CAAC,YAAY;QACtB;QACA,uBAAuB;QACvB,IAAA,qNAAiB;QACjB,oCAAoC;QACpC,IAAA,qNAAiB;IACnB;IACA,IAAA,wMAAI;AACN;AAGO,SAAS,SAAS,SAAS,EAAE,YAAY;IAC9C,8EAA8E;IAC9E,MAAM,YAAY,IAAA,mNAAgB;IAClC,IAAI,QAAQ;IAEZ,IAAA,wMAAI;IACJ,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;IAElD,MAAO,CAAC,IAAA,uMAAG,EAAC,6MAAE,CAAC,MAAM,KAAK,CAAC,wMAAK,CAAC,KAAK,CAAE;QACtC,IAAI,OAAO;YACT,QAAQ;QACV,OAAO;YACL,IAAA,yMAAM,EAAC,6MAAE,CAAC,KAAK;YACf,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,MAAM,GAAG;gBAClB;YACF;QACF;QAEA,IAAI,cAAc;QAClB,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,QAAQ,GAAG;YACtB,MAAM,gBAAgB,wMAAK,CAAC,MAAM,CAAC,MAAM;YACzC,IAAA,8MAAW;YACX,IAAI,WAAW;gBACb,oEAAoE;gBACpE,IAAI,wMAAK,CAAC,MAAM,CAAC,MAAM,KAAK,gBAAgB,GAAG;oBAC7C,IAAA,6NAA0B,EAAC;gBAC7B;gBACA,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,MAAM,GAAG;oBAClB;gBACF;YACF;YACA;QACF;QAEA,IAAI,CAAC,WAAW;YACd,cAAc,IAAA,uMAAG,EAAC,6MAAE,CAAC,IAAI;QAC3B;QAEA,IAAI,CAAC,aAAa,IAAA,+MAAY,EAAC,wNAAiB,CAAC,MAAM,GAAG;YACxD,IAAI,aAAa,IAAA,6MAAU;YAE3B;YACA,IACE,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK,KACd,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,KACf,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,KACf,IAAA,yMAAK,EAAC,6MAAE,CAAC,EAAE,KACX,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK,GACd;YACA,8DAA8D;YAChE,OAAO;gBACL,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,IAAI,GAAG;oBAClB,IAAA,wMAAI;oBACJ,cAAc;gBAChB;gBACA,kBAAkB;YACpB;QACF,OAAO;YACL,kBAAkB;QACpB;QAEA,kBAAkB,WAAW,cAAc;IAC7C;IAEA,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;AACpD;AAEA,SAAS,uBAAuB,SAAS;IACvC,8FAA8F;IAC9F,mFAAmF;IACnF,OACE,CAAC,aACD,CAAC,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,KAAK,oBAAoB;IACvC,IAAA,yMAAK,EAAC,6MAAE,CAAC,GAAG,KAAK,aAAa;IAC9B,IAAA,yMAAK,EAAC,6MAAE,CAAC,QAAQ,KAAK,sBAAsB;IAC5C,IAAA,yMAAK,EAAC,6MAAE,CAAC,IAAI,KAAK,eAAe;IACjC,CAAC,CAAC,CAAC,wMAAK,CAAC,IAAI,GAAG,6MAAS,CAAC,UAAU,CAAC,EAAE,oBAAoB;;AAEjE;AAEA,qCAAqC;AACrC,SAAS,kBAAkB,SAAS,EAAE,eAAe;IACnD,+FAA+F;IAC/F,gCAAgC;IAChC,MAAM,gBAAgB,wMAAK,CAAC,KAAK;IACjC,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,GAAG;QACpB,IAAI,WAAW,IAAA,6MAAU;QACzB,YAAY,eAAe,iBAAiB,GAAG;QAC/C,OAAO;IACT;IAEA,IAAI,uBAAuB,YAAY;QACrC,kBAAkB;QAClB,YAAY,eAAe,iBAAiB,GAAG;QAC/C,OAAO;IACT;IACA,OAAO;AACT;AAEA,SAAS,oBAAoB,SAAS,EAAE,YAAY;IAClD,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,KAAK,GAAG;QACjB,IAAI,WAAW;YACb,IAAA,oNAAiB,EAAC;QACpB,OAAO;YACL,iBAAiB;QACnB;QACA;IACF;IAEA,iEAAiE;IAEjE,8FAA8F;IAC9F,6FAA6F;IAC7F,mEAAmE;IACnE,IAAI;IACJ,IAAI,WAAW;QACb,IAAI,wMAAK,CAAC,UAAU,KAAK,GAAG;YAC1B,iBAAiB,kNAAc,CAAC,kCAAkC;QACpE,OAAO,IAAI,cAAc;YACvB,iBAAiB,kNAAc,CAAC,qCAAqC;QACvE,OAAO;YACL,iBAAiB,kNAAc,CAAC,wCAAwC;QAC1E;IACF,OAAO;QACL,iBAAiB,kNAAc,CAAC,eAAe;IACjD;IACA,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,cAAc,GAAG;IAEvD,gGAAgG;IAChG,yCAAyC;IACzC,IAAA,oNAAiB,EAAC,cAAc;AAClC;AAEA,SAAS,kBACP,SAAS,EACT,YAAY,EACZ,eAAe;IAEf,IAAI,sNAAmB,EAAE;QACvB,IAAA,+NAAwB;IAC1B,OAAO,IAAI,gNAAa,EAAE;QACxB,IAAA,2NAA0B;IAC5B;IACA,MAAM,YAAY,kBAAkB,WAAW;IAC/C,IAAI,CAAC,WAAW;QACd,oBAAoB,WAAW;IACjC;AACF;AAEO,SAAS,kBAAkB,eAAe;IAC/C,IAAI,gNAAa,EAAE;QACjB,IAAA,kNAAiB;IACnB;IACA,IAAI,IAAA,uMAAG,EAAC,6MAAE,CAAC,QAAQ,GAAG;QACpB,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;QAClD;QACA,IAAA,yMAAM,EAAC,6MAAE,CAAC,QAAQ;QAClB,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;IACpD,OAAO;QACL,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,GAAG,KAAK,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,KAAK,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM,KAAK,IAAA,yMAAK,EAAC,6MAAE,CAAC,OAAO,GAAG;YAC9E;QACF,OAAO;YACL;QACF;QAEA,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,cAAc,GAAG,kNAAc,CAAC,SAAS;QAC/E,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,SAAS,GAAG;IACpD;AACF;AAGO,SAAS,YAAY,aAAa,EAAE,aAAa;IACtD,MAAM,gBAAgB,IAAA,mNAAgB;IAEtC,wMAAK,CAAC,UAAU;IAChB,MAAM,kBAAkB,wMAAK,CAAC,MAAM,CAAC,MAAM;IAC3C,MAAM,iBAAiB,eAAe,sCAAsC;IAC5E,IAAA,2NAAmB,EAAC,gBAAgB;IACpC,2BAA2B,eAAe;IAC1C,MAAM,gBAAgB,wMAAK,CAAC,MAAM,CAAC,MAAM;IACzC,wMAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,yMAAK,CAAC,iBAAiB,eAAe;IAC5D,wMAAK,CAAC,UAAU;AAClB;AAKO,SAAS,qBAAqB,eAAe;IAClD,kBAAkB;IAClB,MAAM,gBAAgB,wMAAK,CAAC,MAAM,CAAC,MAAM;IACzC,wMAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,yMAAK,CAAC,iBAAiB,eAAe;IAC5D,wMAAK,CAAC,UAAU;AAClB;AAEO,SAAS,2BAA2B,aAAa;QAAE,gBAAA,iEAAgB;IACxE,IAAI,sNAAmB,EAAE;QACvB,IAAA,mOAA4B,EAAC,eAAe;IAC9C,OAAO,IAAI,gNAAa,EAAE;QACxB,IAAA,+NAA8B,EAAC;IACjC,OAAO;QACL,kBAAkB,OAAO;IAC3B;AACF;AAEO,SAAS,kBAAkB,eAAe;QAAE,gBAAA,iEAAgB;IACjE,MAAM,eAAe,mBAAmB,CAAC,IAAA,yMAAK,EAAC,6MAAE,CAAC,MAAM;IAExD,IAAI,cAAc;QAChB;IACF,OAAO;QACL,IAAA,kNAAU,EAAC,MAA4B;IACzC;AACF;AAEA,oEAAoE;AACpE,8DAA8D;AAC9D,gEAAgE;AAChE,kEAAkE;AAClE,uBAAuB;AAEvB,SAAS,cAAc,KAAK;QAAE,aAAA,iEAAa;IACzC,IAAI,QAAQ;IACZ,MAAO,CAAC,IAAA,uMAAG,EAAC,UAAU,CAAC,wMAAK,CAAC,KAAK,CAAE;QAClC,IAAI,OAAO;YACT,QAAQ;QACV,OAAO;YACL,IAAA,yMAAM,EAAC,6MAAE,CAAC,KAAK;YACf,IAAI,IAAA,uMAAG,EAAC,QAAQ;QAClB;QACA,kBAAkB;IACpB;AACF;AAEA,SAAS,kBAAkB,UAAU;IACnC,IAAI,cAAc,IAAA,yMAAK,EAAC,6MAAE,CAAC,KAAK,GAAG;IACjC,mDAAmD;IACrD,OAAO,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,QAAQ,GAAG;QAC7B,IAAA,8MAAW;QACX;IACF,OAAO,IAAI,IAAA,yMAAK,EAAC,6MAAE,CAAC,QAAQ,GAAG;QAC7B,yCAAyC;QACzC,IAAA,wMAAI;IACN,OAAO;QACL,iBAAiB,OAAO;IAC1B;AACF;AAGO,SAAS;IACd,IAAA,wMAAI;IACJ,wMAAK,CAAC,MAAM,CAAC,wMAAK,CAAC,MAAM,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,GAAG,6MAAE,CAAC,IAAI;AACtD;AAEA,iDAAiD;AACjD,SAAS;IACP;AACF;AAEA,4CAA4C;AAC5C,SAAS;IACP,IAAA,wMAAI;IACJ,IAAI,CAAC,IAAA,yMAAK,EAAC,6MAAE,CAAC,IAAI,KAAK,CAAC,IAAA,qNAAkB,KAAI;QAC5C,IAAA,uMAAG,EAAC,6MAAE,CAAC,IAAI;QACX;IACF;AACF;AAEA,oDAAoD;AACpD,SAAS;IACP,IAAA,mNAAgB,EAAC,wNAAiB,CAAC,OAAO;IAC1C,IAAA,yMAAM,EAAC,6MAAE,CAAC,MAAM;IAChB,8EAA8E;IAC9E,uEAAuE;IACvE,eAAe;IACf,IAAA,sNAAc,EAAC,6MAAE,CAAC,MAAM;AAC1B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 15332, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/plugins/flow.js"],"sourcesContent":["/* eslint max-len: 0 */\n\nimport {\n  eat,\n  lookaheadType,\n  lookaheadTypeAndKeyword,\n  match,\n  next,\n  popTypeContext,\n  pushTypeContext,\n\n} from \"../tokenizer/index\";\nimport {ContextualKeyword} from \"../tokenizer/keywords\";\nimport {TokenType, TokenType as tt} from \"../tokenizer/types\";\nimport {input, state} from \"../traverser/base\";\nimport {\n  baseParseMaybeAssign,\n  baseParseSubscript,\n  baseParseSubscripts,\n  parseArrow,\n  parseArrowExpression,\n  parseCallExpressionArguments,\n  parseExprAtom,\n  parseExpression,\n  parseFunctionBody,\n  parseIdentifier,\n  parseLiteral,\n\n} from \"../traverser/expression\";\nimport {\n  baseParseExportStar,\n  parseExport,\n  parseExportFrom,\n  parseExportSpecifiers,\n  parseFunctionParams,\n  parseImport,\n  parseStatement,\n} from \"../traverser/statement\";\nimport {\n  canInsertSemicolon,\n  eatContextual,\n  expect,\n  expectContextual,\n  isContextual,\n  isLookaheadContextual,\n  semicolon,\n  unexpected,\n} from \"../traverser/util\";\n\nfunction isMaybeDefaultImport(lookahead) {\n  return (\n    (lookahead.type === tt.name || !!(lookahead.type & TokenType.IS_KEYWORD)) &&\n    lookahead.contextualKeyword !== ContextualKeyword._from\n  );\n}\n\nfunction flowParseTypeInitialiser(tok) {\n  const oldIsType = pushTypeContext(0);\n  expect(tok || tt.colon);\n  flowParseType();\n  popTypeContext(oldIsType);\n}\n\nfunction flowParsePredicate() {\n  expect(tt.modulo);\n  expectContextual(ContextualKeyword._checks);\n  if (eat(tt.parenL)) {\n    parseExpression();\n    expect(tt.parenR);\n  }\n}\n\nfunction flowParseTypeAndPredicateInitialiser() {\n  const oldIsType = pushTypeContext(0);\n  expect(tt.colon);\n  if (match(tt.modulo)) {\n    flowParsePredicate();\n  } else {\n    flowParseType();\n    if (match(tt.modulo)) {\n      flowParsePredicate();\n    }\n  }\n  popTypeContext(oldIsType);\n}\n\nfunction flowParseDeclareClass() {\n  next();\n  flowParseInterfaceish(/* isClass */ true);\n}\n\nfunction flowParseDeclareFunction() {\n  next();\n  parseIdentifier();\n\n  if (match(tt.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  expect(tt.parenL);\n  flowParseFunctionTypeParams();\n  expect(tt.parenR);\n\n  flowParseTypeAndPredicateInitialiser();\n\n  semicolon();\n}\n\nfunction flowParseDeclare() {\n  if (match(tt._class)) {\n    flowParseDeclareClass();\n  } else if (match(tt._function)) {\n    flowParseDeclareFunction();\n  } else if (match(tt._var)) {\n    flowParseDeclareVariable();\n  } else if (eatContextual(ContextualKeyword._module)) {\n    if (eat(tt.dot)) {\n      flowParseDeclareModuleExports();\n    } else {\n      flowParseDeclareModule();\n    }\n  } else if (isContextual(ContextualKeyword._type)) {\n    flowParseDeclareTypeAlias();\n  } else if (isContextual(ContextualKeyword._opaque)) {\n    flowParseDeclareOpaqueType();\n  } else if (isContextual(ContextualKeyword._interface)) {\n    flowParseDeclareInterface();\n  } else if (match(tt._export)) {\n    flowParseDeclareExportDeclaration();\n  } else {\n    unexpected();\n  }\n}\n\nfunction flowParseDeclareVariable() {\n  next();\n  flowParseTypeAnnotatableIdentifier();\n  semicolon();\n}\n\nfunction flowParseDeclareModule() {\n  if (match(tt.string)) {\n    parseExprAtom();\n  } else {\n    parseIdentifier();\n  }\n\n  expect(tt.braceL);\n  while (!match(tt.braceR) && !state.error) {\n    if (match(tt._import)) {\n      next();\n      parseImport();\n    } else {\n      unexpected();\n    }\n  }\n  expect(tt.braceR);\n}\n\nfunction flowParseDeclareExportDeclaration() {\n  expect(tt._export);\n\n  if (eat(tt._default)) {\n    if (match(tt._function) || match(tt._class)) {\n      // declare export default class ...\n      // declare export default function ...\n      flowParseDeclare();\n    } else {\n      // declare export default [type];\n      flowParseType();\n      semicolon();\n    }\n  } else if (\n    match(tt._var) || // declare export var ...\n    match(tt._function) || // declare export function ...\n    match(tt._class) || // declare export class ...\n    isContextual(ContextualKeyword._opaque) // declare export opaque ..\n  ) {\n    flowParseDeclare();\n  } else if (\n    match(tt.star) || // declare export * from ''\n    match(tt.braceL) || // declare export {} ...\n    isContextual(ContextualKeyword._interface) || // declare export interface ...\n    isContextual(ContextualKeyword._type) || // declare export type ...\n    isContextual(ContextualKeyword._opaque) // declare export opaque type ...\n  ) {\n    parseExport();\n  } else {\n    unexpected();\n  }\n}\n\nfunction flowParseDeclareModuleExports() {\n  expectContextual(ContextualKeyword._exports);\n  flowParseTypeAnnotation();\n  semicolon();\n}\n\nfunction flowParseDeclareTypeAlias() {\n  next();\n  flowParseTypeAlias();\n}\n\nfunction flowParseDeclareOpaqueType() {\n  next();\n  flowParseOpaqueType(true);\n}\n\nfunction flowParseDeclareInterface() {\n  next();\n  flowParseInterfaceish();\n}\n\n// Interfaces\n\nfunction flowParseInterfaceish(isClass = false) {\n  flowParseRestrictedIdentifier();\n\n  if (match(tt.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  if (eat(tt._extends)) {\n    do {\n      flowParseInterfaceExtends();\n    } while (!isClass && eat(tt.comma));\n  }\n\n  if (isContextual(ContextualKeyword._mixins)) {\n    next();\n    do {\n      flowParseInterfaceExtends();\n    } while (eat(tt.comma));\n  }\n\n  if (isContextual(ContextualKeyword._implements)) {\n    next();\n    do {\n      flowParseInterfaceExtends();\n    } while (eat(tt.comma));\n  }\n\n  flowParseObjectType(isClass, false, isClass);\n}\n\nfunction flowParseInterfaceExtends() {\n  flowParseQualifiedTypeIdentifier(false);\n  if (match(tt.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n}\n\nfunction flowParseInterface() {\n  flowParseInterfaceish();\n}\n\nfunction flowParseRestrictedIdentifier() {\n  parseIdentifier();\n}\n\nfunction flowParseTypeAlias() {\n  flowParseRestrictedIdentifier();\n\n  if (match(tt.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  flowParseTypeInitialiser(tt.eq);\n  semicolon();\n}\n\nfunction flowParseOpaqueType(declare) {\n  expectContextual(ContextualKeyword._type);\n  flowParseRestrictedIdentifier();\n\n  if (match(tt.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  // Parse the supertype\n  if (match(tt.colon)) {\n    flowParseTypeInitialiser(tt.colon);\n  }\n\n  if (!declare) {\n    flowParseTypeInitialiser(tt.eq);\n  }\n  semicolon();\n}\n\nfunction flowParseTypeParameter() {\n  flowParseVariance();\n  flowParseTypeAnnotatableIdentifier();\n\n  if (eat(tt.eq)) {\n    flowParseType();\n  }\n}\n\nexport function flowParseTypeParameterDeclaration() {\n  const oldIsType = pushTypeContext(0);\n  // istanbul ignore else: this condition is already checked at all call sites\n  if (match(tt.lessThan) || match(tt.typeParameterStart)) {\n    next();\n  } else {\n    unexpected();\n  }\n\n  do {\n    flowParseTypeParameter();\n    if (!match(tt.greaterThan)) {\n      expect(tt.comma);\n    }\n  } while (!match(tt.greaterThan) && !state.error);\n  expect(tt.greaterThan);\n  popTypeContext(oldIsType);\n}\n\nfunction flowParseTypeParameterInstantiation() {\n  const oldIsType = pushTypeContext(0);\n  expect(tt.lessThan);\n  while (!match(tt.greaterThan) && !state.error) {\n    flowParseType();\n    if (!match(tt.greaterThan)) {\n      expect(tt.comma);\n    }\n  }\n  expect(tt.greaterThan);\n  popTypeContext(oldIsType);\n}\n\nfunction flowParseInterfaceType() {\n  expectContextual(ContextualKeyword._interface);\n  if (eat(tt._extends)) {\n    do {\n      flowParseInterfaceExtends();\n    } while (eat(tt.comma));\n  }\n  flowParseObjectType(false, false, false);\n}\n\nfunction flowParseObjectPropertyKey() {\n  if (match(tt.num) || match(tt.string)) {\n    parseExprAtom();\n  } else {\n    parseIdentifier();\n  }\n}\n\nfunction flowParseObjectTypeIndexer() {\n  // Note: bracketL has already been consumed\n  if (lookaheadType() === tt.colon) {\n    flowParseObjectPropertyKey();\n    flowParseTypeInitialiser();\n  } else {\n    flowParseType();\n  }\n  expect(tt.bracketR);\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseObjectTypeInternalSlot() {\n  // Note: both bracketL have already been consumed\n  flowParseObjectPropertyKey();\n  expect(tt.bracketR);\n  expect(tt.bracketR);\n  if (match(tt.lessThan) || match(tt.parenL)) {\n    flowParseObjectTypeMethodish();\n  } else {\n    eat(tt.question);\n    flowParseTypeInitialiser();\n  }\n}\n\nfunction flowParseObjectTypeMethodish() {\n  if (match(tt.lessThan)) {\n    flowParseTypeParameterDeclaration();\n  }\n\n  expect(tt.parenL);\n  while (!match(tt.parenR) && !match(tt.ellipsis) && !state.error) {\n    flowParseFunctionTypeParam();\n    if (!match(tt.parenR)) {\n      expect(tt.comma);\n    }\n  }\n\n  if (eat(tt.ellipsis)) {\n    flowParseFunctionTypeParam();\n  }\n  expect(tt.parenR);\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseObjectTypeCallProperty() {\n  flowParseObjectTypeMethodish();\n}\n\nfunction flowParseObjectType(allowStatic, allowExact, allowProto) {\n  let endDelim;\n  if (allowExact && match(tt.braceBarL)) {\n    expect(tt.braceBarL);\n    endDelim = tt.braceBarR;\n  } else {\n    expect(tt.braceL);\n    endDelim = tt.braceR;\n  }\n\n  while (!match(endDelim) && !state.error) {\n    if (allowProto && isContextual(ContextualKeyword._proto)) {\n      const lookahead = lookaheadType();\n      if (lookahead !== tt.colon && lookahead !== tt.question) {\n        next();\n        allowStatic = false;\n      }\n    }\n    if (allowStatic && isContextual(ContextualKeyword._static)) {\n      const lookahead = lookaheadType();\n      if (lookahead !== tt.colon && lookahead !== tt.question) {\n        next();\n      }\n    }\n\n    flowParseVariance();\n\n    if (eat(tt.bracketL)) {\n      if (eat(tt.bracketL)) {\n        flowParseObjectTypeInternalSlot();\n      } else {\n        flowParseObjectTypeIndexer();\n      }\n    } else if (match(tt.parenL) || match(tt.lessThan)) {\n      flowParseObjectTypeCallProperty();\n    } else {\n      if (isContextual(ContextualKeyword._get) || isContextual(ContextualKeyword._set)) {\n        const lookahead = lookaheadType();\n        if (lookahead === tt.name || lookahead === tt.string || lookahead === tt.num) {\n          next();\n        }\n      }\n\n      flowParseObjectTypeProperty();\n    }\n\n    flowObjectTypeSemicolon();\n  }\n\n  expect(endDelim);\n}\n\nfunction flowParseObjectTypeProperty() {\n  if (match(tt.ellipsis)) {\n    expect(tt.ellipsis);\n    if (!eat(tt.comma)) {\n      eat(tt.semi);\n    }\n    // Explicit inexact object syntax.\n    if (match(tt.braceR)) {\n      return;\n    }\n    flowParseType();\n  } else {\n    flowParseObjectPropertyKey();\n    if (match(tt.lessThan) || match(tt.parenL)) {\n      // This is a method property\n      flowParseObjectTypeMethodish();\n    } else {\n      eat(tt.question);\n      flowParseTypeInitialiser();\n    }\n  }\n}\n\nfunction flowObjectTypeSemicolon() {\n  if (!eat(tt.semi) && !eat(tt.comma) && !match(tt.braceR) && !match(tt.braceBarR)) {\n    unexpected();\n  }\n}\n\nfunction flowParseQualifiedTypeIdentifier(initialIdAlreadyParsed) {\n  if (!initialIdAlreadyParsed) {\n    parseIdentifier();\n  }\n  while (eat(tt.dot)) {\n    parseIdentifier();\n  }\n}\n\nfunction flowParseGenericType() {\n  flowParseQualifiedTypeIdentifier(true);\n  if (match(tt.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n}\n\nfunction flowParseTypeofType() {\n  expect(tt._typeof);\n  flowParsePrimaryType();\n}\n\nfunction flowParseTupleType() {\n  expect(tt.bracketL);\n  // We allow trailing commas\n  while (state.pos < input.length && !match(tt.bracketR)) {\n    flowParseType();\n    if (match(tt.bracketR)) {\n      break;\n    }\n    expect(tt.comma);\n  }\n  expect(tt.bracketR);\n}\n\nfunction flowParseFunctionTypeParam() {\n  const lookahead = lookaheadType();\n  if (lookahead === tt.colon || lookahead === tt.question) {\n    parseIdentifier();\n    eat(tt.question);\n    flowParseTypeInitialiser();\n  } else {\n    flowParseType();\n  }\n}\n\nfunction flowParseFunctionTypeParams() {\n  while (!match(tt.parenR) && !match(tt.ellipsis) && !state.error) {\n    flowParseFunctionTypeParam();\n    if (!match(tt.parenR)) {\n      expect(tt.comma);\n    }\n  }\n  if (eat(tt.ellipsis)) {\n    flowParseFunctionTypeParam();\n  }\n}\n\n// The parsing of types roughly parallels the parsing of expressions, and\n// primary types are kind of like primary expressions...they're the\n// primitives with which other types are constructed.\nfunction flowParsePrimaryType() {\n  let isGroupedType = false;\n  const oldNoAnonFunctionType = state.noAnonFunctionType;\n\n  switch (state.type) {\n    case tt.name: {\n      if (isContextual(ContextualKeyword._interface)) {\n        flowParseInterfaceType();\n        return;\n      }\n      parseIdentifier();\n      flowParseGenericType();\n      return;\n    }\n\n    case tt.braceL:\n      flowParseObjectType(false, false, false);\n      return;\n\n    case tt.braceBarL:\n      flowParseObjectType(false, true, false);\n      return;\n\n    case tt.bracketL:\n      flowParseTupleType();\n      return;\n\n    case tt.lessThan:\n      flowParseTypeParameterDeclaration();\n      expect(tt.parenL);\n      flowParseFunctionTypeParams();\n      expect(tt.parenR);\n      expect(tt.arrow);\n      flowParseType();\n      return;\n\n    case tt.parenL:\n      next();\n\n      // Check to see if this is actually a grouped type\n      if (!match(tt.parenR) && !match(tt.ellipsis)) {\n        if (match(tt.name)) {\n          const token = lookaheadType();\n          isGroupedType = token !== tt.question && token !== tt.colon;\n        } else {\n          isGroupedType = true;\n        }\n      }\n\n      if (isGroupedType) {\n        state.noAnonFunctionType = false;\n        flowParseType();\n        state.noAnonFunctionType = oldNoAnonFunctionType;\n\n        // A `,` or a `) =>` means this is an anonymous function type\n        if (\n          state.noAnonFunctionType ||\n          !(match(tt.comma) || (match(tt.parenR) && lookaheadType() === tt.arrow))\n        ) {\n          expect(tt.parenR);\n          return;\n        } else {\n          // Eat a comma if there is one\n          eat(tt.comma);\n        }\n      }\n\n      flowParseFunctionTypeParams();\n\n      expect(tt.parenR);\n      expect(tt.arrow);\n      flowParseType();\n      return;\n\n    case tt.minus:\n      next();\n      parseLiteral();\n      return;\n\n    case tt.string:\n    case tt.num:\n    case tt._true:\n    case tt._false:\n    case tt._null:\n    case tt._this:\n    case tt._void:\n    case tt.star:\n      next();\n      return;\n\n    default:\n      if (state.type === tt._typeof) {\n        flowParseTypeofType();\n        return;\n      } else if (state.type & TokenType.IS_KEYWORD) {\n        next();\n        state.tokens[state.tokens.length - 1].type = tt.name;\n        return;\n      }\n  }\n\n  unexpected();\n}\n\nfunction flowParsePostfixType() {\n  flowParsePrimaryType();\n  while (!canInsertSemicolon() && (match(tt.bracketL) || match(tt.questionDot))) {\n    eat(tt.questionDot);\n    expect(tt.bracketL);\n    if (eat(tt.bracketR)) {\n      // Array type\n    } else {\n      // Indexed access type\n      flowParseType();\n      expect(tt.bracketR);\n    }\n  }\n}\n\nfunction flowParsePrefixType() {\n  if (eat(tt.question)) {\n    flowParsePrefixType();\n  } else {\n    flowParsePostfixType();\n  }\n}\n\nfunction flowParseAnonFunctionWithoutParens() {\n  flowParsePrefixType();\n  if (!state.noAnonFunctionType && eat(tt.arrow)) {\n    flowParseType();\n  }\n}\n\nfunction flowParseIntersectionType() {\n  eat(tt.bitwiseAND);\n  flowParseAnonFunctionWithoutParens();\n  while (eat(tt.bitwiseAND)) {\n    flowParseAnonFunctionWithoutParens();\n  }\n}\n\nfunction flowParseUnionType() {\n  eat(tt.bitwiseOR);\n  flowParseIntersectionType();\n  while (eat(tt.bitwiseOR)) {\n    flowParseIntersectionType();\n  }\n}\n\nfunction flowParseType() {\n  flowParseUnionType();\n}\n\nexport function flowParseTypeAnnotation() {\n  flowParseTypeInitialiser();\n}\n\nfunction flowParseTypeAnnotatableIdentifier() {\n  parseIdentifier();\n  if (match(tt.colon)) {\n    flowParseTypeAnnotation();\n  }\n}\n\nexport function flowParseVariance() {\n  if (match(tt.plus) || match(tt.minus)) {\n    next();\n    state.tokens[state.tokens.length - 1].isType = true;\n  }\n}\n\n// ==================================\n// Overrides\n// ==================================\n\nexport function flowParseFunctionBodyAndFinish(funcContextId) {\n  // For arrow functions, `parseArrow` handles the return type itself.\n  if (match(tt.colon)) {\n    flowParseTypeAndPredicateInitialiser();\n  }\n\n  parseFunctionBody(false, funcContextId);\n}\n\nexport function flowParseSubscript(\n  startTokenIndex,\n  noCalls,\n  stopState,\n) {\n  if (match(tt.questionDot) && lookaheadType() === tt.lessThan) {\n    if (noCalls) {\n      stopState.stop = true;\n      return;\n    }\n    next();\n    flowParseTypeParameterInstantiation();\n    expect(tt.parenL);\n    parseCallExpressionArguments();\n    return;\n  } else if (!noCalls && match(tt.lessThan)) {\n    const snapshot = state.snapshot();\n    flowParseTypeParameterInstantiation();\n    expect(tt.parenL);\n    parseCallExpressionArguments();\n    if (state.error) {\n      state.restoreFromSnapshot(snapshot);\n    } else {\n      return;\n    }\n  }\n  baseParseSubscript(startTokenIndex, noCalls, stopState);\n}\n\nexport function flowStartParseNewArguments() {\n  if (match(tt.lessThan)) {\n    const snapshot = state.snapshot();\n    flowParseTypeParameterInstantiation();\n    if (state.error) {\n      state.restoreFromSnapshot(snapshot);\n    }\n  }\n}\n\n// interfaces\nexport function flowTryParseStatement() {\n  if (match(tt.name) && state.contextualKeyword === ContextualKeyword._interface) {\n    const oldIsType = pushTypeContext(0);\n    next();\n    flowParseInterface();\n    popTypeContext(oldIsType);\n    return true;\n  } else if (isContextual(ContextualKeyword._enum)) {\n    flowParseEnumDeclaration();\n    return true;\n  }\n  return false;\n}\n\nexport function flowTryParseExportDefaultExpression() {\n  if (isContextual(ContextualKeyword._enum)) {\n    flowParseEnumDeclaration();\n    return true;\n  }\n  return false;\n}\n\n// declares, interfaces and type aliases\nexport function flowParseIdentifierStatement(contextualKeyword) {\n  if (contextualKeyword === ContextualKeyword._declare) {\n    if (\n      match(tt._class) ||\n      match(tt.name) ||\n      match(tt._function) ||\n      match(tt._var) ||\n      match(tt._export)\n    ) {\n      const oldIsType = pushTypeContext(1);\n      flowParseDeclare();\n      popTypeContext(oldIsType);\n    }\n  } else if (match(tt.name)) {\n    if (contextualKeyword === ContextualKeyword._interface) {\n      const oldIsType = pushTypeContext(1);\n      flowParseInterface();\n      popTypeContext(oldIsType);\n    } else if (contextualKeyword === ContextualKeyword._type) {\n      const oldIsType = pushTypeContext(1);\n      flowParseTypeAlias();\n      popTypeContext(oldIsType);\n    } else if (contextualKeyword === ContextualKeyword._opaque) {\n      const oldIsType = pushTypeContext(1);\n      flowParseOpaqueType(false);\n      popTypeContext(oldIsType);\n    }\n  }\n  semicolon();\n}\n\n// export type\nexport function flowShouldParseExportDeclaration() {\n  return (\n    isContextual(ContextualKeyword._type) ||\n    isContextual(ContextualKeyword._interface) ||\n    isContextual(ContextualKeyword._opaque) ||\n    isContextual(ContextualKeyword._enum)\n  );\n}\n\nexport function flowShouldDisallowExportDefaultSpecifier() {\n  return (\n    match(tt.name) &&\n    (state.contextualKeyword === ContextualKeyword._type ||\n      state.contextualKeyword === ContextualKeyword._interface ||\n      state.contextualKeyword === ContextualKeyword._opaque ||\n      state.contextualKeyword === ContextualKeyword._enum)\n  );\n}\n\nexport function flowParseExportDeclaration() {\n  if (isContextual(ContextualKeyword._type)) {\n    const oldIsType = pushTypeContext(1);\n    next();\n\n    if (match(tt.braceL)) {\n      // export type { foo, bar };\n      parseExportSpecifiers();\n      parseExportFrom();\n    } else {\n      // export type Foo = Bar;\n      flowParseTypeAlias();\n    }\n    popTypeContext(oldIsType);\n  } else if (isContextual(ContextualKeyword._opaque)) {\n    const oldIsType = pushTypeContext(1);\n    next();\n    // export opaque type Foo = Bar;\n    flowParseOpaqueType(false);\n    popTypeContext(oldIsType);\n  } else if (isContextual(ContextualKeyword._interface)) {\n    const oldIsType = pushTypeContext(1);\n    next();\n    flowParseInterface();\n    popTypeContext(oldIsType);\n  } else {\n    parseStatement(true);\n  }\n}\n\nexport function flowShouldParseExportStar() {\n  return match(tt.star) || (isContextual(ContextualKeyword._type) && lookaheadType() === tt.star);\n}\n\nexport function flowParseExportStar() {\n  if (eatContextual(ContextualKeyword._type)) {\n    const oldIsType = pushTypeContext(2);\n    baseParseExportStar();\n    popTypeContext(oldIsType);\n  } else {\n    baseParseExportStar();\n  }\n}\n\n// parse a the super class type parameters and implements\nexport function flowAfterParseClassSuper(hasSuper) {\n  if (hasSuper && match(tt.lessThan)) {\n    flowParseTypeParameterInstantiation();\n  }\n  if (isContextual(ContextualKeyword._implements)) {\n    const oldIsType = pushTypeContext(0);\n    next();\n    state.tokens[state.tokens.length - 1].type = tt._implements;\n    do {\n      flowParseRestrictedIdentifier();\n      if (match(tt.lessThan)) {\n        flowParseTypeParameterInstantiation();\n      }\n    } while (eat(tt.comma));\n    popTypeContext(oldIsType);\n  }\n}\n\n// parse type parameters for object method shorthand\nexport function flowStartParseObjPropValue() {\n  // method shorthand\n  if (match(tt.lessThan)) {\n    flowParseTypeParameterDeclaration();\n    if (!match(tt.parenL)) unexpected();\n  }\n}\n\nexport function flowParseAssignableListItemTypes() {\n  const oldIsType = pushTypeContext(0);\n  eat(tt.question);\n  if (match(tt.colon)) {\n    flowParseTypeAnnotation();\n  }\n  popTypeContext(oldIsType);\n}\n\n// parse typeof and type imports\nexport function flowStartParseImportSpecifiers() {\n  if (match(tt._typeof) || isContextual(ContextualKeyword._type)) {\n    const lh = lookaheadTypeAndKeyword();\n    if (isMaybeDefaultImport(lh) || lh.type === tt.braceL || lh.type === tt.star) {\n      next();\n    }\n  }\n}\n\n// parse import-type/typeof shorthand\nexport function flowParseImportSpecifier() {\n  const isTypeKeyword =\n    state.contextualKeyword === ContextualKeyword._type || state.type === tt._typeof;\n  if (isTypeKeyword) {\n    next();\n  } else {\n    parseIdentifier();\n  }\n\n  if (isContextual(ContextualKeyword._as) && !isLookaheadContextual(ContextualKeyword._as)) {\n    parseIdentifier();\n    if (isTypeKeyword && !match(tt.name) && !(state.type & TokenType.IS_KEYWORD)) {\n      // `import {type as ,` or `import {type as }`\n    } else {\n      // `import {type as foo`\n      parseIdentifier();\n    }\n  } else {\n    if (isTypeKeyword && (match(tt.name) || !!(state.type & TokenType.IS_KEYWORD))) {\n      // `import {type foo`\n      parseIdentifier();\n    }\n    if (eatContextual(ContextualKeyword._as)) {\n      parseIdentifier();\n    }\n  }\n}\n\n// parse function type parameters - function foo<T>() {}\nexport function flowStartParseFunctionParams() {\n  // Originally this checked if the method is a getter/setter, but if it was, we'd crash soon\n  // anyway, so don't try to propagate that information.\n  if (match(tt.lessThan)) {\n    const oldIsType = pushTypeContext(0);\n    flowParseTypeParameterDeclaration();\n    popTypeContext(oldIsType);\n  }\n}\n\n// parse flow type annotations on variable declarator heads - let foo: string = bar\nexport function flowAfterParseVarHead() {\n  if (match(tt.colon)) {\n    flowParseTypeAnnotation();\n  }\n}\n\n// parse the return type of an async arrow function - let foo = (async (): number => {});\nexport function flowStartParseAsyncArrowFromCallExpression() {\n  if (match(tt.colon)) {\n    const oldNoAnonFunctionType = state.noAnonFunctionType;\n    state.noAnonFunctionType = true;\n    flowParseTypeAnnotation();\n    state.noAnonFunctionType = oldNoAnonFunctionType;\n  }\n}\n\n// We need to support type parameter declarations for arrow functions. This\n// is tricky. There are three situations we need to handle\n//\n// 1. This is either JSX or an arrow function. We'll try JSX first. If that\n//    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n//    error.\n// 2. This is an arrow function. We'll parse the type parameter declaration,\n//    parse the rest, make sure the rest is an arrow function, and go from\n//    there\n// 3. This is neither. Just call the super method\nexport function flowParseMaybeAssign(noIn, isWithinParens) {\n  if (match(tt.lessThan)) {\n    const snapshot = state.snapshot();\n    let wasArrow = baseParseMaybeAssign(noIn, isWithinParens);\n    if (state.error) {\n      state.restoreFromSnapshot(snapshot);\n      state.type = tt.typeParameterStart;\n    } else {\n      return wasArrow;\n    }\n\n    const oldIsType = pushTypeContext(0);\n    flowParseTypeParameterDeclaration();\n    popTypeContext(oldIsType);\n    wasArrow = baseParseMaybeAssign(noIn, isWithinParens);\n    if (wasArrow) {\n      return true;\n    }\n    unexpected();\n  }\n\n  return baseParseMaybeAssign(noIn, isWithinParens);\n}\n\n// handle return types for arrow functions\nexport function flowParseArrow() {\n  if (match(tt.colon)) {\n    const oldIsType = pushTypeContext(0);\n    const snapshot = state.snapshot();\n\n    const oldNoAnonFunctionType = state.noAnonFunctionType;\n    state.noAnonFunctionType = true;\n    flowParseTypeAndPredicateInitialiser();\n    state.noAnonFunctionType = oldNoAnonFunctionType;\n\n    if (canInsertSemicolon()) unexpected();\n    if (!match(tt.arrow)) unexpected();\n\n    if (state.error) {\n      state.restoreFromSnapshot(snapshot);\n    }\n    popTypeContext(oldIsType);\n  }\n  return eat(tt.arrow);\n}\n\nexport function flowParseSubscripts(startTokenIndex, noCalls = false) {\n  if (\n    state.tokens[state.tokens.length - 1].contextualKeyword === ContextualKeyword._async &&\n    match(tt.lessThan)\n  ) {\n    const snapshot = state.snapshot();\n    const wasArrow = parseAsyncArrowWithTypeParameters();\n    if (wasArrow && !state.error) {\n      return;\n    }\n    state.restoreFromSnapshot(snapshot);\n  }\n\n  baseParseSubscripts(startTokenIndex, noCalls);\n}\n\n// Returns true if there was an arrow function here.\nfunction parseAsyncArrowWithTypeParameters() {\n  state.scopeDepth++;\n  const startTokenIndex = state.tokens.length;\n  parseFunctionParams();\n  if (!parseArrow()) {\n    return false;\n  }\n  parseArrowExpression(startTokenIndex);\n  return true;\n}\n\nfunction flowParseEnumDeclaration() {\n  expectContextual(ContextualKeyword._enum);\n  state.tokens[state.tokens.length - 1].type = tt._enum;\n  parseIdentifier();\n  flowParseEnumBody();\n}\n\nfunction flowParseEnumBody() {\n  if (eatContextual(ContextualKeyword._of)) {\n    next();\n  }\n  expect(tt.braceL);\n  flowParseEnumMembers();\n  expect(tt.braceR);\n}\n\nfunction flowParseEnumMembers() {\n  while (!match(tt.braceR) && !state.error) {\n    if (eat(tt.ellipsis)) {\n      break;\n    }\n    flowParseEnumMember();\n    if (!match(tt.braceR)) {\n      expect(tt.comma);\n    }\n  }\n}\n\nfunction flowParseEnumMember() {\n  parseIdentifier();\n  if (eat(tt.eq)) {\n    // Flow enum values are always just one token (a string, number, or boolean literal).\n    next();\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 16278, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/traverser/statement.js"],"sourcesContent":["/* eslint max-len: 0 */\n\nimport {File} from \"../index\";\nimport {\n  flowAfterParseClassSuper,\n  flowAfterParseVarHead,\n  flowParseExportDeclaration,\n  flowParseExportStar,\n  flowParseIdentifierStatement,\n  flowParseImportSpecifier,\n  flowParseTypeAnnotation,\n  flowParseTypeParameterDeclaration,\n  flowShouldDisallowExportDefaultSpecifier,\n  flowShouldParseExportDeclaration,\n  flowShouldParseExportStar,\n  flowStartParseFunctionParams,\n  flowStartParseImportSpecifiers,\n  flowTryParseExportDefaultExpression,\n  flowTryParseStatement,\n} from \"../plugins/flow\";\nimport {\n  tsAfterParseClassSuper,\n  tsAfterParseVarHead,\n  tsIsDeclarationStart,\n  tsParseExportDeclaration,\n  tsParseExportSpecifier,\n  tsParseIdentifierStatement,\n  tsParseImportEqualsDeclaration,\n  tsParseImportSpecifier,\n  tsParseMaybeDecoratorArguments,\n  tsParseModifiers,\n  tsStartParseFunctionParams,\n  tsTryParseClassMemberWithIsStatic,\n  tsTryParseExport,\n  tsTryParseExportDefaultExpression,\n  tsTryParseStatementContent,\n  tsTryParseTypeAnnotation,\n  tsTryParseTypeParameters,\n} from \"../plugins/typescript\";\nimport {\n  eat,\n  eatTypeToken,\n  IdentifierRole,\n  lookaheadType,\n  lookaheadTypeAndKeyword,\n  match,\n  next,\n  nextTokenStart,\n  nextTokenStartSince,\n  popTypeContext,\n  pushTypeContext,\n} from \"../tokenizer\";\nimport {ContextualKeyword} from \"../tokenizer/keywords\";\nimport {Scope} from \"../tokenizer/state\";\nimport { TokenType as tt} from \"../tokenizer/types\";\nimport {charCodes} from \"../util/charcodes\";\nimport {getNextContextId, input, isFlowEnabled, isTypeScriptEnabled, state} from \"./base\";\nimport {\n  parseCallExpressionArguments,\n  parseExprAtom,\n  parseExpression,\n  parseExprSubscripts,\n  parseFunctionBodyAndFinish,\n  parseIdentifier,\n  parseMaybeAssign,\n  parseMethod,\n  parseObj,\n  parseParenExpression,\n  parsePropertyName,\n} from \"./expression\";\nimport {\n  parseBindingAtom,\n  parseBindingIdentifier,\n  parseBindingList,\n  parseImportedIdentifier,\n} from \"./lval\";\nimport {\n  canInsertSemicolon,\n  eatContextual,\n  expect,\n  expectContextual,\n  hasFollowingLineBreak,\n  hasPrecedingLineBreak,\n  isContextual,\n  isLineTerminator,\n  isLookaheadContextual,\n  semicolon,\n  unexpected,\n} from \"./util\";\n\nexport function parseTopLevel() {\n  parseBlockBody(tt.eof);\n  state.scopes.push(new Scope(0, state.tokens.length, true));\n  if (state.scopeDepth !== 0) {\n    throw new Error(`Invalid scope depth at end of file: ${state.scopeDepth}`);\n  }\n  return new File(state.tokens, state.scopes);\n}\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\nexport function parseStatement(declaration) {\n  if (isFlowEnabled) {\n    if (flowTryParseStatement()) {\n      return;\n    }\n  }\n  if (match(tt.at)) {\n    parseDecorators();\n  }\n  parseStatementContent(declaration);\n}\n\nfunction parseStatementContent(declaration) {\n  if (isTypeScriptEnabled) {\n    if (tsTryParseStatementContent()) {\n      return;\n    }\n  }\n\n  const starttype = state.type;\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n    case tt._break:\n    case tt._continue:\n      parseBreakContinueStatement();\n      return;\n    case tt._debugger:\n      parseDebuggerStatement();\n      return;\n    case tt._do:\n      parseDoStatement();\n      return;\n    case tt._for:\n      parseForStatement();\n      return;\n    case tt._function:\n      if (lookaheadType() === tt.dot) break;\n      if (!declaration) unexpected();\n      parseFunctionStatement();\n      return;\n\n    case tt._class:\n      if (!declaration) unexpected();\n      parseClass(true);\n      return;\n\n    case tt._if:\n      parseIfStatement();\n      return;\n    case tt._return:\n      parseReturnStatement();\n      return;\n    case tt._switch:\n      parseSwitchStatement();\n      return;\n    case tt._throw:\n      parseThrowStatement();\n      return;\n    case tt._try:\n      parseTryStatement();\n      return;\n\n    case tt._let:\n    case tt._const:\n      if (!declaration) unexpected(); // NOTE: falls through to _var\n\n    case tt._var:\n      parseVarStatement(starttype !== tt._var);\n      return;\n\n    case tt._while:\n      parseWhileStatement();\n      return;\n    case tt.braceL:\n      parseBlock();\n      return;\n    case tt.semi:\n      parseEmptyStatement();\n      return;\n    case tt._export:\n    case tt._import: {\n      const nextType = lookaheadType();\n      if (nextType === tt.parenL || nextType === tt.dot) {\n        break;\n      }\n      next();\n      if (starttype === tt._import) {\n        parseImport();\n      } else {\n        parseExport();\n      }\n      return;\n    }\n    case tt.name:\n      if (state.contextualKeyword === ContextualKeyword._async) {\n        const functionStart = state.start;\n        // peek ahead and see if next token is a function\n        const snapshot = state.snapshot();\n        next();\n        if (match(tt._function) && !canInsertSemicolon()) {\n          expect(tt._function);\n          parseFunction(functionStart, true);\n          return;\n        } else {\n          state.restoreFromSnapshot(snapshot);\n        }\n      } else if (\n        state.contextualKeyword === ContextualKeyword._using &&\n        !hasFollowingLineBreak() &&\n        // Statements like `using[0]` and `using in foo` aren't actual using\n        // declarations.\n        lookaheadType() === tt.name\n      ) {\n        parseVarStatement(true);\n        return;\n      } else if (startsAwaitUsing()) {\n        expectContextual(ContextualKeyword._await);\n        parseVarStatement(true);\n        return;\n      }\n    default:\n      // Do nothing.\n      break;\n  }\n\n  // If the statement does not start with a statement keyword or a\n  // brace, it's an ExpressionStatement or LabeledStatement. We\n  // simply start parsing an expression, and afterwards, if the\n  // next token is a colon and the expression was a simple\n  // Identifier node, we switch to interpreting it as a label.\n  const initialTokensLength = state.tokens.length;\n  parseExpression();\n  let simpleName = null;\n  if (state.tokens.length === initialTokensLength + 1) {\n    const token = state.tokens[state.tokens.length - 1];\n    if (token.type === tt.name) {\n      simpleName = token.contextualKeyword;\n    }\n  }\n  if (simpleName == null) {\n    semicolon();\n    return;\n  }\n  if (eat(tt.colon)) {\n    parseLabeledStatement();\n  } else {\n    // This was an identifier, so we might want to handle flow/typescript-specific cases.\n    parseIdentifierStatement(simpleName);\n  }\n}\n\n/**\n * Determine if we're positioned at an `await using` declaration.\n *\n * Note that this can happen either in place of a regular variable declaration\n * or in a loop body, and in both places, there are similar-looking cases where\n * we need to return false.\n *\n * Examples returning true:\n * await using foo = bar();\n * for (await using a of b) {}\n *\n * Examples returning false:\n * await using\n * await using + 1\n * await using instanceof T\n * for (await using;;) {}\n *\n * For now, we early return if we don't see `await`, then do a simple\n * backtracking-based lookahead for the `using` and identifier tokens. In the\n * future, this could be optimized with a character-based approach.\n */\nfunction startsAwaitUsing() {\n  if (!isContextual(ContextualKeyword._await)) {\n    return false;\n  }\n  const snapshot = state.snapshot();\n  // await\n  next();\n  if (!isContextual(ContextualKeyword._using) || hasPrecedingLineBreak()) {\n    state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n  // using\n  next();\n  if (!match(tt.name) || hasPrecedingLineBreak()) {\n    state.restoreFromSnapshot(snapshot);\n    return false;\n  }\n  state.restoreFromSnapshot(snapshot);\n  return true;\n}\n\nexport function parseDecorators() {\n  while (match(tt.at)) {\n    parseDecorator();\n  }\n}\n\nfunction parseDecorator() {\n  next();\n  if (eat(tt.parenL)) {\n    parseExpression();\n    expect(tt.parenR);\n  } else {\n    parseIdentifier();\n    while (eat(tt.dot)) {\n      parseIdentifier();\n    }\n    parseMaybeDecoratorArguments();\n  }\n}\n\nfunction parseMaybeDecoratorArguments() {\n  if (isTypeScriptEnabled) {\n    tsParseMaybeDecoratorArguments();\n  } else {\n    baseParseMaybeDecoratorArguments();\n  }\n}\n\nexport function baseParseMaybeDecoratorArguments() {\n  if (eat(tt.parenL)) {\n    parseCallExpressionArguments();\n  }\n}\n\nfunction parseBreakContinueStatement() {\n  next();\n  if (!isLineTerminator()) {\n    parseIdentifier();\n    semicolon();\n  }\n}\n\nfunction parseDebuggerStatement() {\n  next();\n  semicolon();\n}\n\nfunction parseDoStatement() {\n  next();\n  parseStatement(false);\n  expect(tt._while);\n  parseParenExpression();\n  eat(tt.semi);\n}\n\nfunction parseForStatement() {\n  state.scopeDepth++;\n  const startTokenIndex = state.tokens.length;\n  parseAmbiguousForStatement();\n  const endTokenIndex = state.tokens.length;\n  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, false));\n  state.scopeDepth--;\n}\n\n/**\n * Determine if this token is a `using` declaration (explicit resource\n * management) as part of a loop.\n * https://github.com/tc39/proposal-explicit-resource-management\n */\nfunction isUsingInLoop() {\n  if (!isContextual(ContextualKeyword._using)) {\n    return false;\n  }\n  // This must be `for (using of`, where `using` is the name of the loop\n  // variable.\n  if (isLookaheadContextual(ContextualKeyword._of)) {\n    return false;\n  }\n  return true;\n}\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\nfunction parseAmbiguousForStatement() {\n  next();\n\n  let forAwait = false;\n  if (isContextual(ContextualKeyword._await)) {\n    forAwait = true;\n    next();\n  }\n  expect(tt.parenL);\n\n  if (match(tt.semi)) {\n    if (forAwait) {\n      unexpected();\n    }\n    parseFor();\n    return;\n  }\n\n  const isAwaitUsing = startsAwaitUsing();\n  if (isAwaitUsing || match(tt._var) || match(tt._let) || match(tt._const) || isUsingInLoop()) {\n    if (isAwaitUsing) {\n      expectContextual(ContextualKeyword._await);\n    }\n    next();\n    parseVar(true, state.type !== tt._var);\n    if (match(tt._in) || isContextual(ContextualKeyword._of)) {\n      parseForIn(forAwait);\n      return;\n    }\n    parseFor();\n    return;\n  }\n\n  parseExpression(true);\n  if (match(tt._in) || isContextual(ContextualKeyword._of)) {\n    parseForIn(forAwait);\n    return;\n  }\n  if (forAwait) {\n    unexpected();\n  }\n  parseFor();\n}\n\nfunction parseFunctionStatement() {\n  const functionStart = state.start;\n  next();\n  parseFunction(functionStart, true);\n}\n\nfunction parseIfStatement() {\n  next();\n  parseParenExpression();\n  parseStatement(false);\n  if (eat(tt._else)) {\n    parseStatement(false);\n  }\n}\n\nfunction parseReturnStatement() {\n  next();\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (!isLineTerminator()) {\n    parseExpression();\n    semicolon();\n  }\n}\n\nfunction parseSwitchStatement() {\n  next();\n  parseParenExpression();\n  state.scopeDepth++;\n  const startTokenIndex = state.tokens.length;\n  expect(tt.braceL);\n\n  // Don't bother validation; just go through any sequence of cases, defaults, and statements.\n  while (!match(tt.braceR) && !state.error) {\n    if (match(tt._case) || match(tt._default)) {\n      const isCase = match(tt._case);\n      next();\n      if (isCase) {\n        parseExpression();\n      }\n      expect(tt.colon);\n    } else {\n      parseStatement(true);\n    }\n  }\n  next(); // Closing brace\n  const endTokenIndex = state.tokens.length;\n  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, false));\n  state.scopeDepth--;\n}\n\nfunction parseThrowStatement() {\n  next();\n  parseExpression();\n  semicolon();\n}\n\nfunction parseCatchClauseParam() {\n  parseBindingAtom(true /* isBlockScope */);\n\n  if (isTypeScriptEnabled) {\n    tsTryParseTypeAnnotation();\n  }\n}\n\nfunction parseTryStatement() {\n  next();\n\n  parseBlock();\n\n  if (match(tt._catch)) {\n    next();\n    let catchBindingStartTokenIndex = null;\n    if (match(tt.parenL)) {\n      state.scopeDepth++;\n      catchBindingStartTokenIndex = state.tokens.length;\n      expect(tt.parenL);\n      parseCatchClauseParam();\n      expect(tt.parenR);\n    }\n    parseBlock();\n    if (catchBindingStartTokenIndex != null) {\n      // We need a special scope for the catch binding which includes the binding itself and the\n      // catch block.\n      const endTokenIndex = state.tokens.length;\n      state.scopes.push(new Scope(catchBindingStartTokenIndex, endTokenIndex, false));\n      state.scopeDepth--;\n    }\n  }\n  if (eat(tt._finally)) {\n    parseBlock();\n  }\n}\n\nexport function parseVarStatement(isBlockScope) {\n  next();\n  parseVar(false, isBlockScope);\n  semicolon();\n}\n\nfunction parseWhileStatement() {\n  next();\n  parseParenExpression();\n  parseStatement(false);\n}\n\nfunction parseEmptyStatement() {\n  next();\n}\n\nfunction parseLabeledStatement() {\n  parseStatement(true);\n}\n\n/**\n * Parse a statement starting with an identifier of the given name. Subclasses match on the name\n * to handle statements like \"declare\".\n */\nfunction parseIdentifierStatement(contextualKeyword) {\n  if (isTypeScriptEnabled) {\n    tsParseIdentifierStatement(contextualKeyword);\n  } else if (isFlowEnabled) {\n    flowParseIdentifierStatement(contextualKeyword);\n  } else {\n    semicolon();\n  }\n}\n\n// Parse a semicolon-enclosed block of statements.\nexport function parseBlock(isFunctionScope = false, contextId = 0) {\n  const startTokenIndex = state.tokens.length;\n  state.scopeDepth++;\n  expect(tt.braceL);\n  if (contextId) {\n    state.tokens[state.tokens.length - 1].contextId = contextId;\n  }\n  parseBlockBody(tt.braceR);\n  if (contextId) {\n    state.tokens[state.tokens.length - 1].contextId = contextId;\n  }\n  const endTokenIndex = state.tokens.length;\n  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, isFunctionScope));\n  state.scopeDepth--;\n}\n\nexport function parseBlockBody(end) {\n  while (!eat(end) && !state.error) {\n    parseStatement(true);\n  }\n}\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\nfunction parseFor() {\n  expect(tt.semi);\n  if (!match(tt.semi)) {\n    parseExpression();\n  }\n  expect(tt.semi);\n  if (!match(tt.parenR)) {\n    parseExpression();\n  }\n  expect(tt.parenR);\n  parseStatement(false);\n}\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\nfunction parseForIn(forAwait) {\n  if (forAwait) {\n    eatContextual(ContextualKeyword._of);\n  } else {\n    next();\n  }\n  parseExpression();\n  expect(tt.parenR);\n  parseStatement(false);\n}\n\n// Parse a list of variable declarations.\n\nfunction parseVar(isFor, isBlockScope) {\n  while (true) {\n    parseVarHead(isBlockScope);\n    if (eat(tt.eq)) {\n      const eqIndex = state.tokens.length - 1;\n      parseMaybeAssign(isFor);\n      state.tokens[eqIndex].rhsEndIndex = state.tokens.length;\n    }\n    if (!eat(tt.comma)) {\n      break;\n    }\n  }\n}\n\nfunction parseVarHead(isBlockScope) {\n  parseBindingAtom(isBlockScope);\n  if (isTypeScriptEnabled) {\n    tsAfterParseVarHead();\n  } else if (isFlowEnabled) {\n    flowAfterParseVarHead();\n  }\n}\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\nexport function parseFunction(\n  functionStart,\n  isStatement,\n  optionalId = false,\n) {\n  if (match(tt.star)) {\n    next();\n  }\n\n  if (isStatement && !optionalId && !match(tt.name) && !match(tt._yield)) {\n    unexpected();\n  }\n\n  let nameScopeStartTokenIndex = null;\n\n  if (match(tt.name)) {\n    // Expression-style functions should limit their name's scope to the function body, so we make\n    // a new function scope to enforce that.\n    if (!isStatement) {\n      nameScopeStartTokenIndex = state.tokens.length;\n      state.scopeDepth++;\n    }\n    parseBindingIdentifier(false);\n  }\n\n  const startTokenIndex = state.tokens.length;\n  state.scopeDepth++;\n  parseFunctionParams();\n  parseFunctionBodyAndFinish(functionStart);\n  const endTokenIndex = state.tokens.length;\n  // In addition to the block scope of the function body, we need a separate function-style scope\n  // that includes the params.\n  state.scopes.push(new Scope(startTokenIndex, endTokenIndex, true));\n  state.scopeDepth--;\n  if (nameScopeStartTokenIndex !== null) {\n    state.scopes.push(new Scope(nameScopeStartTokenIndex, endTokenIndex, true));\n    state.scopeDepth--;\n  }\n}\n\nexport function parseFunctionParams(\n  allowModifiers = false,\n  funcContextId = 0,\n) {\n  if (isTypeScriptEnabled) {\n    tsStartParseFunctionParams();\n  } else if (isFlowEnabled) {\n    flowStartParseFunctionParams();\n  }\n\n  expect(tt.parenL);\n  if (funcContextId) {\n    state.tokens[state.tokens.length - 1].contextId = funcContextId;\n  }\n  parseBindingList(\n    tt.parenR,\n    false /* isBlockScope */,\n    false /* allowEmpty */,\n    allowModifiers,\n    funcContextId,\n  );\n  if (funcContextId) {\n    state.tokens[state.tokens.length - 1].contextId = funcContextId;\n  }\n}\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\nexport function parseClass(isStatement, optionalId = false) {\n  // Put a context ID on the class keyword, the open-brace, and the close-brace, so that later\n  // code can easily navigate to meaningful points on the class.\n  const contextId = getNextContextId();\n\n  next();\n  state.tokens[state.tokens.length - 1].contextId = contextId;\n  state.tokens[state.tokens.length - 1].isExpression = !isStatement;\n  // Like with functions, we declare a special \"name scope\" from the start of the name to the end\n  // of the class, but only with expression-style classes, to represent the fact that the name is\n  // available to the body of the class but not an outer declaration.\n  let nameScopeStartTokenIndex = null;\n  if (!isStatement) {\n    nameScopeStartTokenIndex = state.tokens.length;\n    state.scopeDepth++;\n  }\n  parseClassId(isStatement, optionalId);\n  parseClassSuper();\n  const openBraceIndex = state.tokens.length;\n  parseClassBody(contextId);\n  if (state.error) {\n    return;\n  }\n  state.tokens[openBraceIndex].contextId = contextId;\n  state.tokens[state.tokens.length - 1].contextId = contextId;\n  if (nameScopeStartTokenIndex !== null) {\n    const endTokenIndex = state.tokens.length;\n    state.scopes.push(new Scope(nameScopeStartTokenIndex, endTokenIndex, false));\n    state.scopeDepth--;\n  }\n}\n\nfunction isClassProperty() {\n  return match(tt.eq) || match(tt.semi) || match(tt.braceR) || match(tt.bang) || match(tt.colon);\n}\n\nfunction isClassMethod() {\n  return match(tt.parenL) || match(tt.lessThan);\n}\n\nfunction parseClassBody(classContextId) {\n  expect(tt.braceL);\n\n  while (!eat(tt.braceR) && !state.error) {\n    if (eat(tt.semi)) {\n      continue;\n    }\n\n    if (match(tt.at)) {\n      parseDecorator();\n      continue;\n    }\n    const memberStart = state.start;\n    parseClassMember(memberStart, classContextId);\n  }\n}\n\nfunction parseClassMember(memberStart, classContextId) {\n  if (isTypeScriptEnabled) {\n    tsParseModifiers([\n      ContextualKeyword._declare,\n      ContextualKeyword._public,\n      ContextualKeyword._protected,\n      ContextualKeyword._private,\n      ContextualKeyword._override,\n    ]);\n  }\n  let isStatic = false;\n  if (match(tt.name) && state.contextualKeyword === ContextualKeyword._static) {\n    parseIdentifier(); // eats 'static'\n    if (isClassMethod()) {\n      parseClassMethod(memberStart, /* isConstructor */ false);\n      return;\n    } else if (isClassProperty()) {\n      parseClassProperty();\n      return;\n    }\n    // otherwise something static\n    state.tokens[state.tokens.length - 1].type = tt._static;\n    isStatic = true;\n\n    if (match(tt.braceL)) {\n      // This is a static block. Mark the word \"static\" with the class context ID for class element\n      // detection and parse as a regular block.\n      state.tokens[state.tokens.length - 1].contextId = classContextId;\n      parseBlock();\n      return;\n    }\n  }\n\n  parseClassMemberWithIsStatic(memberStart, isStatic, classContextId);\n}\n\nfunction parseClassMemberWithIsStatic(\n  memberStart,\n  isStatic,\n  classContextId,\n) {\n  if (isTypeScriptEnabled) {\n    if (tsTryParseClassMemberWithIsStatic(isStatic)) {\n      return;\n    }\n  }\n  if (eat(tt.star)) {\n    // a generator\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, /* isConstructor */ false);\n    return;\n  }\n\n  // Get the identifier name so we can tell if it's actually a keyword like \"async\", \"get\", or\n  // \"set\".\n  parseClassPropertyName(classContextId);\n  let isConstructor = false;\n  const token = state.tokens[state.tokens.length - 1];\n  // We allow \"constructor\" as either an identifier or a string.\n  if (token.contextualKeyword === ContextualKeyword._constructor) {\n    isConstructor = true;\n  }\n  parsePostMemberNameModifiers();\n\n  if (isClassMethod()) {\n    parseClassMethod(memberStart, isConstructor);\n  } else if (isClassProperty()) {\n    parseClassProperty();\n  } else if (token.contextualKeyword === ContextualKeyword._async && !isLineTerminator()) {\n    state.tokens[state.tokens.length - 1].type = tt._async;\n    // an async method\n    const isGenerator = match(tt.star);\n    if (isGenerator) {\n      next();\n    }\n\n    // The so-called parsed name would have been \"async\": get the real name.\n    parseClassPropertyName(classContextId);\n    parsePostMemberNameModifiers();\n    parseClassMethod(memberStart, false /* isConstructor */);\n  } else if (\n    (token.contextualKeyword === ContextualKeyword._get ||\n      token.contextualKeyword === ContextualKeyword._set) &&\n    !(isLineTerminator() && match(tt.star))\n  ) {\n    if (token.contextualKeyword === ContextualKeyword._get) {\n      state.tokens[state.tokens.length - 1].type = tt._get;\n    } else {\n      state.tokens[state.tokens.length - 1].type = tt._set;\n    }\n    // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n    // a getter or setter\n    // The so-called parsed name would have been \"get/set\": get the real name.\n    parseClassPropertyName(classContextId);\n    parseClassMethod(memberStart, /* isConstructor */ false);\n  } else if (token.contextualKeyword === ContextualKeyword._accessor && !isLineTerminator()) {\n    parseClassPropertyName(classContextId);\n    parseClassProperty();\n  } else if (isLineTerminator()) {\n    // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n    parseClassProperty();\n  } else {\n    unexpected();\n  }\n}\n\nfunction parseClassMethod(functionStart, isConstructor) {\n  if (isTypeScriptEnabled) {\n    tsTryParseTypeParameters();\n  } else if (isFlowEnabled) {\n    if (match(tt.lessThan)) {\n      flowParseTypeParameterDeclaration();\n    }\n  }\n  parseMethod(functionStart, isConstructor);\n}\n\n// Return the name of the class property, if it is a simple identifier.\nexport function parseClassPropertyName(classContextId) {\n  parsePropertyName(classContextId);\n}\n\nexport function parsePostMemberNameModifiers() {\n  if (isTypeScriptEnabled) {\n    const oldIsType = pushTypeContext(0);\n    eat(tt.question);\n    popTypeContext(oldIsType);\n  }\n}\n\nexport function parseClassProperty() {\n  if (isTypeScriptEnabled) {\n    eatTypeToken(tt.bang);\n    tsTryParseTypeAnnotation();\n  } else if (isFlowEnabled) {\n    if (match(tt.colon)) {\n      flowParseTypeAnnotation();\n    }\n  }\n\n  if (match(tt.eq)) {\n    const equalsTokenIndex = state.tokens.length;\n    next();\n    parseMaybeAssign();\n    state.tokens[equalsTokenIndex].rhsEndIndex = state.tokens.length;\n  }\n  semicolon();\n}\n\nfunction parseClassId(isStatement, optionalId = false) {\n  if (\n    isTypeScriptEnabled &&\n    (!isStatement || optionalId) &&\n    isContextual(ContextualKeyword._implements)\n  ) {\n    return;\n  }\n\n  if (match(tt.name)) {\n    parseBindingIdentifier(true);\n  }\n\n  if (isTypeScriptEnabled) {\n    tsTryParseTypeParameters();\n  } else if (isFlowEnabled) {\n    if (match(tt.lessThan)) {\n      flowParseTypeParameterDeclaration();\n    }\n  }\n}\n\n// Returns true if there was a superclass.\nfunction parseClassSuper() {\n  let hasSuper = false;\n  if (eat(tt._extends)) {\n    parseExprSubscripts();\n    hasSuper = true;\n  } else {\n    hasSuper = false;\n  }\n  if (isTypeScriptEnabled) {\n    tsAfterParseClassSuper(hasSuper);\n  } else if (isFlowEnabled) {\n    flowAfterParseClassSuper(hasSuper);\n  }\n}\n\n// Parses module export declaration.\n\nexport function parseExport() {\n  const exportIndex = state.tokens.length - 1;\n  if (isTypeScriptEnabled) {\n    if (tsTryParseExport()) {\n      return;\n    }\n  }\n  // export * from '...'\n  if (shouldParseExportStar()) {\n    parseExportStar();\n  } else if (isExportDefaultSpecifier()) {\n    // export default from\n    parseIdentifier();\n    if (match(tt.comma) && lookaheadType() === tt.star) {\n      expect(tt.comma);\n      expect(tt.star);\n      expectContextual(ContextualKeyword._as);\n      parseIdentifier();\n    } else {\n      parseExportSpecifiersMaybe();\n    }\n    parseExportFrom();\n  } else if (eat(tt._default)) {\n    // export default ...\n    parseExportDefaultExpression();\n  } else if (shouldParseExportDeclaration()) {\n    parseExportDeclaration();\n  } else {\n    // export { x, y as z } [from '...']\n    parseExportSpecifiers();\n    parseExportFrom();\n  }\n  state.tokens[exportIndex].rhsEndIndex = state.tokens.length;\n}\n\nfunction parseExportDefaultExpression() {\n  if (isTypeScriptEnabled) {\n    if (tsTryParseExportDefaultExpression()) {\n      return;\n    }\n  }\n  if (isFlowEnabled) {\n    if (flowTryParseExportDefaultExpression()) {\n      return;\n    }\n  }\n  const functionStart = state.start;\n  if (eat(tt._function)) {\n    parseFunction(functionStart, true, true);\n  } else if (isContextual(ContextualKeyword._async) && lookaheadType() === tt._function) {\n    // async function declaration\n    eatContextual(ContextualKeyword._async);\n    eat(tt._function);\n    parseFunction(functionStart, true, true);\n  } else if (match(tt._class)) {\n    parseClass(true, true);\n  } else if (match(tt.at)) {\n    parseDecorators();\n    parseClass(true, true);\n  } else {\n    parseMaybeAssign();\n    semicolon();\n  }\n}\n\nfunction parseExportDeclaration() {\n  if (isTypeScriptEnabled) {\n    tsParseExportDeclaration();\n  } else if (isFlowEnabled) {\n    flowParseExportDeclaration();\n  } else {\n    parseStatement(true);\n  }\n}\n\nfunction isExportDefaultSpecifier() {\n  if (isTypeScriptEnabled && tsIsDeclarationStart()) {\n    return false;\n  } else if (isFlowEnabled && flowShouldDisallowExportDefaultSpecifier()) {\n    return false;\n  }\n  if (match(tt.name)) {\n    return state.contextualKeyword !== ContextualKeyword._async;\n  }\n\n  if (!match(tt._default)) {\n    return false;\n  }\n\n  const _next = nextTokenStart();\n  const lookahead = lookaheadTypeAndKeyword();\n  const hasFrom =\n    lookahead.type === tt.name && lookahead.contextualKeyword === ContextualKeyword._from;\n  if (lookahead.type === tt.comma) {\n    return true;\n  }\n  // lookahead again when `export default from` is seen\n  if (hasFrom) {\n    const nextAfterFrom = input.charCodeAt(nextTokenStartSince(_next + 4));\n    return nextAfterFrom === charCodes.quotationMark || nextAfterFrom === charCodes.apostrophe;\n  }\n  return false;\n}\n\nfunction parseExportSpecifiersMaybe() {\n  if (eat(tt.comma)) {\n    parseExportSpecifiers();\n  }\n}\n\nexport function parseExportFrom() {\n  if (eatContextual(ContextualKeyword._from)) {\n    parseExprAtom();\n    maybeParseImportAttributes();\n  }\n  semicolon();\n}\n\nfunction shouldParseExportStar() {\n  if (isFlowEnabled) {\n    return flowShouldParseExportStar();\n  } else {\n    return match(tt.star);\n  }\n}\n\nfunction parseExportStar() {\n  if (isFlowEnabled) {\n    flowParseExportStar();\n  } else {\n    baseParseExportStar();\n  }\n}\n\nexport function baseParseExportStar() {\n  expect(tt.star);\n\n  if (isContextual(ContextualKeyword._as)) {\n    parseExportNamespace();\n  } else {\n    parseExportFrom();\n  }\n}\n\nfunction parseExportNamespace() {\n  next();\n  state.tokens[state.tokens.length - 1].type = tt._as;\n  parseIdentifier();\n  parseExportSpecifiersMaybe();\n  parseExportFrom();\n}\n\nfunction shouldParseExportDeclaration() {\n  return (\n    (isTypeScriptEnabled && tsIsDeclarationStart()) ||\n    (isFlowEnabled && flowShouldParseExportDeclaration()) ||\n    state.type === tt._var ||\n    state.type === tt._const ||\n    state.type === tt._let ||\n    state.type === tt._function ||\n    state.type === tt._class ||\n    isContextual(ContextualKeyword._async) ||\n    match(tt.at)\n  );\n}\n\n// Parses a comma-separated list of module exports.\nexport function parseExportSpecifiers() {\n  let first = true;\n\n  // export { x, y as z } [from '...']\n  expect(tt.braceL);\n\n  while (!eat(tt.braceR) && !state.error) {\n    if (first) {\n      first = false;\n    } else {\n      expect(tt.comma);\n      if (eat(tt.braceR)) {\n        break;\n      }\n    }\n    parseExportSpecifier();\n  }\n}\n\nfunction parseExportSpecifier() {\n  if (isTypeScriptEnabled) {\n    tsParseExportSpecifier();\n    return;\n  }\n  parseIdentifier();\n  state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ExportAccess;\n  if (eatContextual(ContextualKeyword._as)) {\n    parseIdentifier();\n  }\n}\n\n/**\n * Starting at the `module` token in an import, determine if it was truly an\n * import reflection token or just looks like one.\n *\n * Returns true for:\n * import module foo from \"foo\";\n * import module from from \"foo\";\n *\n * Returns false for:\n * import module from \"foo\";\n * import module, {bar} from \"foo\";\n */\nfunction isImportReflection() {\n  const snapshot = state.snapshot();\n  expectContextual(ContextualKeyword._module);\n  if (eatContextual(ContextualKeyword._from)) {\n    if (isContextual(ContextualKeyword._from)) {\n      state.restoreFromSnapshot(snapshot);\n      return true;\n    } else {\n      state.restoreFromSnapshot(snapshot);\n      return false;\n    }\n  } else if (match(tt.comma)) {\n    state.restoreFromSnapshot(snapshot);\n    return false;\n  } else {\n    state.restoreFromSnapshot(snapshot);\n    return true;\n  }\n}\n\n/**\n * Eat the \"module\" token from the import reflection proposal.\n * https://github.com/tc39/proposal-import-reflection\n */\nfunction parseMaybeImportReflection() {\n  // isImportReflection does snapshot/restore, so only run it if we see the word\n  // \"module\".\n  if (isContextual(ContextualKeyword._module) && isImportReflection()) {\n    next();\n  }\n}\n\n// Parses import declaration.\n\nexport function parseImport() {\n  if (isTypeScriptEnabled && match(tt.name) && lookaheadType() === tt.eq) {\n    tsParseImportEqualsDeclaration();\n    return;\n  }\n  if (isTypeScriptEnabled && isContextual(ContextualKeyword._type)) {\n    const lookahead = lookaheadTypeAndKeyword();\n    if (lookahead.type === tt.name && lookahead.contextualKeyword !== ContextualKeyword._from) {\n      // One of these `import type` cases:\n      // import type T = require('T');\n      // import type A from 'A';\n      expectContextual(ContextualKeyword._type);\n      if (lookaheadType() === tt.eq) {\n        tsParseImportEqualsDeclaration();\n        return;\n      }\n      // If this is an `import type...from` statement, then we already ate the\n      // type token, so proceed to the regular import parser.\n    } else if (lookahead.type === tt.star || lookahead.type === tt.braceL) {\n      // One of these `import type` cases, in which case we can eat the type token\n      // and proceed as normal:\n      // import type * as A from 'A';\n      // import type {a} from 'A';\n      expectContextual(ContextualKeyword._type);\n    }\n    // Otherwise, we are importing the name \"type\".\n  }\n\n  // import '...'\n  if (match(tt.string)) {\n    parseExprAtom();\n  } else {\n    parseMaybeImportReflection();\n    parseImportSpecifiers();\n    expectContextual(ContextualKeyword._from);\n    parseExprAtom();\n  }\n  maybeParseImportAttributes();\n  semicolon();\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction shouldParseDefaultImport() {\n  return match(tt.name);\n}\n\nfunction parseImportSpecifierLocal() {\n  parseImportedIdentifier();\n}\n\n// Parses a comma-separated list of module imports.\nfunction parseImportSpecifiers() {\n  if (isFlowEnabled) {\n    flowStartParseImportSpecifiers();\n  }\n\n  let first = true;\n  if (shouldParseDefaultImport()) {\n    // import defaultObj, { x, y as z } from '...'\n    parseImportSpecifierLocal();\n\n    if (!eat(tt.comma)) return;\n  }\n\n  if (match(tt.star)) {\n    next();\n    expectContextual(ContextualKeyword._as);\n\n    parseImportSpecifierLocal();\n\n    return;\n  }\n\n  expect(tt.braceL);\n  while (!eat(tt.braceR) && !state.error) {\n    if (first) {\n      first = false;\n    } else {\n      // Detect an attempt to deep destructure\n      if (eat(tt.colon)) {\n        unexpected(\n          \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n        );\n      }\n\n      expect(tt.comma);\n      if (eat(tt.braceR)) {\n        break;\n      }\n    }\n\n    parseImportSpecifier();\n  }\n}\n\nfunction parseImportSpecifier() {\n  if (isTypeScriptEnabled) {\n    tsParseImportSpecifier();\n    return;\n  }\n  if (isFlowEnabled) {\n    flowParseImportSpecifier();\n    return;\n  }\n  parseImportedIdentifier();\n  if (isContextual(ContextualKeyword._as)) {\n    state.tokens[state.tokens.length - 1].identifierRole = IdentifierRole.ImportAccess;\n    next();\n    parseImportedIdentifier();\n  }\n}\n\n/**\n * Parse import attributes like `with {type: \"json\"}`, or the legacy form\n * `assert {type: \"json\"}`.\n *\n * Import attributes technically have their own syntax, but are always parseable\n * as a plain JS object, so just do that for simplicity.\n */\nfunction maybeParseImportAttributes() {\n  if (match(tt._with) || (isContextual(ContextualKeyword._assert) && !hasPrecedingLineBreak())) {\n    next();\n    parseObj(false, false);\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17405, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/traverser/index.js"],"sourcesContent":["\nimport {nextToken, skipLineComment} from \"../tokenizer/index\";\nimport {charCodes} from \"../util/charcodes\";\nimport {input, state} from \"./base\";\nimport {parseTopLevel} from \"./statement\";\n\nexport function parseFile() {\n  // If enabled, skip leading hashbang line.\n  if (\n    state.pos === 0 &&\n    input.charCodeAt(0) === charCodes.numberSign &&\n    input.charCodeAt(1) === charCodes.exclamationMark\n  ) {\n    skipLineComment(2);\n  }\n  nextToken();\n  return parseTopLevel();\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;AACA;;;;;AAEO,SAAS;IACd,0CAA0C;IAC1C,IACE,wMAAK,CAAC,GAAG,KAAK,KACd,wMAAK,CAAC,UAAU,CAAC,OAAO,4MAAS,CAAC,UAAU,IAC5C,wMAAK,CAAC,UAAU,CAAC,OAAO,4MAAS,CAAC,eAAe,EACjD;QACA,IAAA,mNAAe,EAAC;IAClB;IACA,IAAA,6MAAS;IACT,OAAO,IAAA,qNAAa;AACtB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 17429, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/roaa3/acecore/Frontend/node_modules/sucrase/dist/esm/parser/index.js"],"sourcesContent":["\n\nimport {augmentError, initParser, state} from \"./traverser/base\";\nimport {parseFile} from \"./traverser/index\";\n\nexport class File {\n  \n  \n\n  constructor(tokens, scopes) {\n    this.tokens = tokens;\n    this.scopes = scopes;\n  }\n}\n\nexport function parse(\n  input,\n  isJSXEnabled,\n  isTypeScriptEnabled,\n  isFlowEnabled,\n) {\n  if (isFlowEnabled && isTypeScriptEnabled) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  initParser(input, isJSXEnabled, isTypeScriptEnabled, isFlowEnabled);\n  const result = parseFile();\n  if (state.error) {\n    throw augmentError(state.error);\n  }\n  return result;\n}\n"],"names":[],"mappings":";;;;;;AAEA;AACA;;;AAEO,MAAM;IAIX,YAAY,MAAM,EAAE,MAAM,CAAE;QAC1B,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,MAAM,GAAG;IAChB;AACF;AAEO,SAAS,MACd,KAAK,EACL,YAAY,EACZ,mBAAmB,EACnB,aAAa;IAEb,IAAI,iBAAiB,qBAAqB;QACxC,MAAM,IAAI,MAAM;IAClB;IACA,IAAA,6MAAU,EAAC,OAAO,cAAc,qBAAqB;IACrD,MAAM,SAAS,IAAA,6MAAS;IACxB,IAAI,wMAAK,CAAC,KAAK,EAAE;QACf,MAAM,IAAA,+MAAY,EAAC,wMAAK,CAAC,KAAK;IAChC;IACA,OAAO;AACT","ignoreList":[0],"debugId":null}}]
}